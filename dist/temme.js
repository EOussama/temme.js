var Temme=function(e){var t={};function s(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,s),r.l=!0,r.exports}return s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(n,r,function(t){return e[t]}.bind(null,r));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t),s.d(t,"parse",(function(){return z})),s.d(t,"validate",(function(){return U}));class n{constructor(e,t,s,n,r=!1){this.label=e,this.type=t,this.values=s,this.default=n,this.inherited=r}static validateOptionType(e,t){let s="";return s=Array.isArray(e)?"array":typeof e,{valid:s===t.type,type:s}}static validateOptionValue(e,t){if(null!=t&&t.values.length>0){if("include"!==t.label&&"exclude"!==t.label)return-1!==t.values.indexOf(e);for(const s of e)if(-1===t.values.indexOf(s))return!1}return!0}}n.validateOptionName=e=>null!=e;class r extends n{constructor(){super("ref","string",[],""),this.getKeyFromElement=e=>null}inherit(e,t){}}class o extends n{constructor(){super("value","string",[],""),this.getKeyFromElement=e=>null}inherit(e,t){}}class i extends n{constructor(){super("type","string",["text","html"],"text"),this.getKeyFromElement=e=>null}inherit(e,t){}}class a extends n{constructor(){super("mode","string",["append","override"],"append"),this.getKeyFromElement=e=>null}inherit(e,t){}}class l extends n{constructor(){super("placement","string",["after","before"],"after"),this.getKeyFromElement=e=>null}inherit(e,t){}}class c extends n{constructor(){super("allow","boolean",[],!1),this.getKeyFromElement=e=>null}inherit(e,t){}}class h extends n{constructor(){super("children","object",[],{allow:(new c).default,placement:(new l).default}),this.keys={allow:new c,placement:new l},this.getKeyFromElement=e=>null}inherit(e,t){}}class u extends n{constructor(){super("include","array",["name","id","classes","attributes","dataset","content","childNodes"],["name","id","classes","attributes","dataset","content","childNodes"]),this.getKeyFromElement=e=>null}inherit(e,t){}}class d extends n{constructor(){super("exclude","array",["name","id","classes","attributes","dataset","content","childNodes"],[]),this.getKeyFromElement=e=>null}inherit(e,t){}}const f=[new r,new class extends n{constructor(){super("name","string",[],"div",!0),this.getKeyFromElement=e=>null}inherit(e,t){null!=t&&"override"===e.from.mode&&(e.name=t)}},new class extends n{constructor(){super("id","string",[],"",!0),this.getKeyFromElement=e=>e.id}inherit(e,t){""!==t&&("append"===e.from.mode?""===e.id&&(e.id=t):e.id=t)}parse(e,t){""!=t.id&&(e.id=t.id)}},new class extends n{constructor(){super("content","object",[],{type:(new i).default,value:(new o).default},!0),this.keys={type:new i,value:new o}}inherit(e,t){let s=t.value;""!==t.value&&("append"===e.from.mode?s=`${e.content.value}${s.length>0?" ":""}${s}`:e.content=t,e.content.value=s)}getKeyFromElement(e){return{type:"html",value:e.innerHTML}}parse(e,t){""!=t.content.value&&("text"===t.content.type?e.textContent=t.content.value:e.innerHTML=t.content.value)}},new class extends n{constructor(){super("temmeIds","array",[],[]),this.getKeyFromElement=e=>null}inherit(e,t){}},new class extends n{constructor(){super("templates","array",[],[]),this.getKeyFromElement=e=>null}inherit(e,t){}},new class extends n{constructor(){super("classes","array",[],[],!0)}inherit(e,t){"append"===e.from.mode?e.classes.push(...t):e.classes=t,e.classes=e.classes.filter((t,s)=>e.classes.indexOf(t)===s),e.classes.sort()}getKeyFromElement(e){let t=[];return e.classList.forEach(e=>t.push(e)),t}parse(e,t){t.classes.length>0&&e.classList.add(...t.classes)}},new class extends n{constructor(){super("childNodes","array",[],[],!0),this.getKeyFromElement=e=>e.innerHTML}inherit(e,t){let s=[...e.childNodes];!0===e.from.children.allow&&("append"===e.from.mode?"before"===e.from.children.placement?s.unshift(...t):s.push(...t):s=t),e.childNodes=s}},new class extends n{constructor(){super("attributes","object",[],{},!0)}inherit(e,t){const s=Object.assign({},t);if("append"===e.from.mode)for(const t in e.attributes)s[t]=e.attributes[t];else for(const t in e.attributes)t in s||(s[t]=e.attributes[t]);e.attributes=s}getKeyFromElement(e){let t={};for(const s in e.attributes)isNaN(parseInt(s))||-1!==["id","class"].indexOf(e.attributes[s].nodeName)||"data-"===e.attributes[s].nodeName.substring(0,5)||(t[e.attributes[s].nodeName]=e.attributes[s].nodeValue);return t}parse(e,t){for(const s in t.attributes)e.setAttribute(s,t.attributes[s])}},new class extends n{constructor(){super("dataset","object",[],{},!0)}inherit(e,t){const s=Object.assign({},t);if("append"===e.from.mode)for(const t in e.dataset)s[t]=e.dataset[t];else for(const t in e.dataset)t in s||(s[t]=e.dataset[t]);e.dataset=s}getKeyFromElement(e){let t={};for(const s in e.dataset)t[s]=e.dataset[s];return t}parse(e,t){for(const s in t.dataset)e.dataset[s]=t.dataset[s]}},new class extends n{constructor(){super("from","object",[],{ref:(new r).default,mode:(new a).default,children:(new h).default,include:(new u).default,exclude:(new d).default}),this.keys={ref:new r,mode:new a,children:new h,include:new u,exclude:new d},this.getKeyFromElement=e=>null}inherit(e,t){}}],m=function(){let e=[];return f.forEach(t=>{if(e.push(t),"keys"in t){const s=function e(t){let s=[];for(const n in t.keys){const r=t.keys[n];if(s.push(r),"keys"in r){const t=e(r);s=s.concat(t)}}return s}(t);e=e.concat(s)}}),e}(),p=["name","childNodes","templates"];function g(e){const t=[];return m.forEach(s=>{if("keys"in s&&s.label===e)for(const e in s.keys){const n=s.keys[e];t.push(n)}}),t}class y extends Error{constructor(e){super(),this.name="TemmyError",this.message="Temme isn't feeling good",this.message=e.length>0?e:this.message}}class w extends y{constructor(e){super(""),this.name="InvalidTemplateOptionError",this.message="A template has an invalid option";const t=`“${e}” is not a valid option to use in templates`;this.message=e.length>0?t:this.message}}class b extends y{constructor(e){super(""),this.name="InvalidOptionNameError",this.message="An option is not valid";const t=`“${e}” is not a valid option`;this.message=e.length>0?t:this.message}}class v extends y{constructor(e,t){super(""),this.name="InvalidOptionTypeError",this.message="An option doesn't have a valid value type";const s=`The “${e}” option doesn't accept values of type “${t}”`;this.message=e.length>0?s:this.message}}class E extends y{constructor(e,t){super(""),this.name="InvalidOptionValueError",this.message="An option doesn't have a valid value";const s=`The “${e}” option doesn't accept “${t}” as a value`;this.message=e.length>0?s:this.message}}class x extends y{constructor(e,t){super(""),this.name="InvalidSubOptionNameError",this.message="A sub-option is not valid";const s=`The “${e}” option doesn't not recognize “${t}” as a valid sub-option`;this.message=e.length>0||t.length>0?s:this.message}}class N extends y{constructor(e,t){super(""),this.name="InvalidSubOptionTypeError",this.message="A sub-option doesn't have a valid value type";const s=`The “${e}” sub-option doesn't accept values of type “${t}”`;this.message=e.length>0||t.length>0?s:this.message}}class O extends y{constructor(e,t){super(""),this.name="InvalidSubOptionValueError",this.message="A sub-option doesn't have a valid value";const s=`The “${e}” sub-option doesn't accept “${t}” as a value`;this.message=e.length>0||t.length>0?s:this.message}}class T extends y{constructor(e){super(""),this.name="InvalidReferencingOptionError",this.message="A referencing option is not valid",this.message=e.length>0?e:this.message}}class k extends y{constructor(e){super(""),this.name="InvalidReferenceOptionValueError",this.message="“ref” options must not begin with the “@” symbol",this.message=e.length>0?e:this.message}}class I extends y{constructor(e){super(""),this.name="InvalidReferenceError",this.message="A reference is invalid",this.message=e.length>0?`“${e}” is an invalid reference`:this.message}}class F extends y{constructor(e){super(""),this.name="InvalidTemplateError",this.message="A template does not have a “ref” option",this.message=e.length>0?e:this.message}}function K(e,t=[],s=!1){try{const n=function(e=!1){const t="0123456789abcdefghijklmnopqrstuvwxyz",s=!1===e?6:4;let n="";for(let e=0;e<s;e++){const e=Math.floor(Math.random()*t.length),s=Math.floor(2*Math.random());n+=1===s?t[e].toUpperCase():t[e]}return n}(s);e.temmeIds=[...t,n],"childNodes"in e&&e.childNodes.forEach(t=>{K(t,e.temmeIds)}),"templates"in e&&e.templates.forEach(t=>{K(t,e.temmeIds,!0)})}catch(e){throw e}}function $(e){return e.temmeIds[e.temmeIds.length-1]}class j extends y{constructor(e,t){super(""),this.name="InvalidTemplateReferencingError",this.message="Templates can only reference other templates.";const s=`The template with the reference “${e}” is trying to reference “${t}” a non-template object`;this.message=e.length>0?s:this.message}}class A extends y{constructor(e){super(""),this.name="ReferenceOutOfScopeError",this.message="An object is referencing an element out of its scope",this.message=e.length>0?e:this.message}}function M(e){try{for(const t in e){const s=f.filter(e=>e.label===t)[0],r=e[t];if(!1===n.validateOptionName(s))throw new b(t);const o=n.validateOptionType(r,s);if(!1===o.valid)throw new v(t,o.type);if(!1===n.validateOptionValue(r,s))throw new E(t,r);if("keys"in s){const e=s.keys;L(t,r,e)}}if(!1===function(e){if("from"in e)return"ref"in e.from;return!0}(e))throw new T("The “from” option must always have a “ref” sub-option");if(!1===function(e){if("from"in e)return!("include"in e.from&&"exclude"in e.from);return!0}(e))throw new T("The “from” option can't have both the “include” and “exclude” sub-options at the same time");"templates"in e&&e.templates.forEach(e=>{!function(e){try{if(!("ref"in e))throw new F("");for(const t in e){if(p.indexOf(t)>-1)throw new w(t);M(e)}}catch(e){throw e}}(e)}),"childNodes"in e&&e.childNodes.forEach(e=>{M(e)})}catch(e){throw e}}const S=(e,t)=>null!=t.filter(t=>t.hierarchy.ref===e.from.ref&&$(e)!==$(t.hierarchy))[0];function L(e,t,s){for(const r in t){const o=g(e).filter(e=>e.label===r)[0],i=t[r];if(!(r in s))throw new x(e,r);{if(!1===n.validateOptionName(o))throw new x(e,r);const s=n.validateOptionType(i,o);if(!1===s.valid)throw new N(r,s.type);if(!1===n.validateOptionValue(i,o))throw new O(r,i);if("keys"in o){const e=t[r];L(r,e,o.keys)}}}}function V(e){try{f.forEach(t=>{if(t.label in e){if("keys"in t)for(const s in t.keys){const n=t.keys[s];H(e[t.label],n)}}else e[t.label]=t.default}),e.classes=e.classes.filter((t,s)=>e.classes.indexOf(t)===s),e.classes.sort(),"childNodes"in e&&e.childNodes.length>0&&e.childNodes.forEach(e=>{V(e)}),"templates"in e&&e.templates.length>0&&e.templates.forEach(e=>{!function(e){try{f.filter(e=>-1===p.indexOf(e.label)).forEach(t=>{if(t.label in e){if("keys"in t)for(const s in t.keys){const n=t.keys[s];H(e[t.label],n)}}else e[t.label]=t.default})}catch(e){throw e}}(e)})}catch(e){throw e}}function H(e,t){try{if(t.label in e?"include"!==t.label&&"exclude"!==t.label||(e[t.label]=e[t.label].filter((s,n)=>e[t.label].indexOf(s)===n),e[t.label].sort()):e[t.label]=t.default,"keys"in t)for(const s in t.keys){const n=e[t.label];H(n,t.keys[s])}}catch(e){throw e}}function _(e){try{const t=function e(t,s=0){const n=[];s++,""!==t.ref&&n.push({depth:s,hierarchy:t});"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(t=>{n.push(...e(t,s))});"templates"in t&&t.templates.length>0&&t.templates.forEach(t=>{n.push(...e(t,s-1))});return n}(e);!function e(t,s){try{if("@"===t.ref[0])throw new k("");if("@"===t.from.ref[0]){const e=t.from.ref.substring(1);if(null==document.querySelector(e))throw new k(`No outer element corresponds to the selector “${e}”`)}else if(!1===S(t,s)&&""!==t.from.ref)throw new I(t.from.ref);"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(t=>{e(t,s)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(t=>{e(t,s)})}catch(e){throw e}}(e,t),function e(t,s){try{const n=t.templates;n.length>0&&n.forEach(e=>{if(e.from.ref.length>0){if(!1===(4===$(s.filter(t=>t.hierarchy.ref===e.from.ref)[0].hierarchy).length))throw new j(e.ref,e.from.ref)}}),t.childNodes.forEach(t=>{e(t,s)})}catch(e){throw e}}(e,t),function e(t,s,n=0){try{const r=t.from.ref;if(n++,""!==r&&"@"!==r[0]){if(null==s.filter(e=>e.hierarchy.ref===r&&n>=e.depth)[0])throw new A("")}"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(t=>{e(t,s,n)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(t=>{e(t,s,n)})}catch(e){throw e}}(e,t),function e(t,s){try{"templates"in t&&t.templates.length>0&&t.templates.forEach(e=>{if(""!==e.from.ref)for(const t in e){const n=f.filter(e=>e.label===t)[0],r=s.filter(t=>t.hierarchy.ref===e.from.ref)[0];n.inherit(e,r.hierarchy[t])}}),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(t=>{e(t,s)})}catch(e){throw e}}(e,t.filter(e=>P(e.hierarchy))),function e(t,s){try{if("childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(t=>{e(t,s)}),""!==t.from.ref)if("@"===t.from.ref[0]){const e=t.from.ref.substring(1),s=document.querySelector(e);for(const e in t){const n=f.filter(t=>t.label===e)[0],r=n.getKeyFromElement(s);null!=r&&n.inherit(t,r)}}else{const e=s.filter(e=>e.hierarchy.ref===t.from.ref)[0];t.from.include.filter(e=>-1===t.from.exclude.indexOf(e)).forEach(s=>{f.filter(e=>e.label===s)[0].inherit(t,e.hierarchy[s])})}}catch(e){throw e}}(e,t)}catch(e){throw e}}const P=e=>4===$(e).length;function R(e,t,s,n=!1){try{const r=function(e,t,s=!1){try{const n=!0===s?t:document.createElement(e.name);return f.forEach(t=>{"function"==typeof t.parse&&t.parse(n,e)}),!1===s&&t.appendChild(n),n}catch(e){throw e}}(e,t,n);s($(e),e),"childNodes"in e&&e.childNodes.length>0&&e.childNodes.forEach(e=>{R(e,r,s)})}catch(e){throw e}}class q extends y{constructor(e){super(""),this.name="InvalidHierarchyError",this.message="The hierarchy object is not valid",this.message=e.length>0?e:this.message}}class C extends y{constructor(e){super(""),this.name="InvalidTargetError",this.message="The target is not a valid HTML element",this.message=e.length>0?e:this.message}}function z(e,t,s=(e=>{}),n=(()=>{})){try{if(!(e=>null!=e&&e instanceof HTMLElement)(t))throw new C("");if(!(e=>null!=e&&"object"==typeof e&&!Array.isArray(e))(e))throw new q("");return M(e),V(e),K(e),_(e),R(e,t,n,!0),s(e),e}catch(e){throw e.message=`[Temme]: ${e.message}.`,e}}function U(e){try{return M(e),{valid:!0,error:null}}catch(e){return{valid:!1,error:e}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,