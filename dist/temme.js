var Temme=function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r,o=function(){function t(t,n,e,r){this.label=t,this.type=n,this.values=e,this.default=r}return t.validateOptionType=function(t,n){var e="";return{valid:(e=Array.isArray(t)?"array":typeof t)===n.type,type:e}},t.validateOptionValue=function(t,n){return!(null!=n&&n.values.length>0)||-1!==n.values.indexOf(t)},t.validateOptionName=function(t){return null!=t},t}(),i=(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),c=function(t){function n(){var n=t.call(this,"ref","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return i(n,t),n.prototype.inherit=function(t,n){},n}(o),a=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),u=function(t){function n(){var n=t.call(this,"name","string",[],"div")||this;return n.getKeyFromElement=function(t){return null},n}return a(n,t),n.prototype.inherit=function(t,n){null!=n&&(t.name=n)},n}(o),f=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),s=function(t){function n(){var n=t.call(this,"id","string",[],"")||this;return n.getKeyFromElement=function(t){return t.id},n}return f(n,t),n.prototype.inherit=function(t,n){t.id=n},n.prototype.parse=function(t,n){""!=n.id&&(t.id=n.id)},n}(o),p=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),l=function(t){function n(){var n=t.call(this,"value","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return p(n,t),n.prototype.inherit=function(t,n){},n}(o),h=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),y=function(t){function n(){var n=t.call(this,"type","string",["text","html"],"text")||this;return n.getKeyFromElement=function(t){return null},n}return h(n,t),n.prototype.inherit=function(t,n){},n}(o),_=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new y).default,value:(new l).default})||this;return n.keys={type:new y,value:new l},n}return _(n,t),n.prototype.inherit=function(t,n){var e=n.value;""!==n.value&&("append"===t.from.mode?e=t.content.value+(e.length>0?" ":"")+e:t.content=n,t.content.value=e)},n.prototype.getKeyFromElement=function(t){return{type:"html",value:t.innerHTML}},n.prototype.parse=function(t,n){""!=n.content.value&&("text"===n.content.type?t.textContent=n.content.value:t.innerHTML=n.content.value)},n}(o),m=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),d=function(t){function n(){var n=t.call(this,"temmeIds","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return m(n,t),n.prototype.inherit=function(t,n){},n}(o),O=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),w=function(t){function n(){var n=t.call(this,"templates","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return O(n,t),n.prototype.inherit=function(t,n){},n}(o),b=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),g=function(t){function n(){return t.call(this,"classes","array",[],[])||this}return b(n,t),n.prototype.inherit=function(t,n){var e;"append"===t.from.mode?(e=t.classes).push.apply(e,n):t.classes=n,t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort()},n.prototype.getKeyFromElement=function(t){var n=[];return t.classList.forEach(function(t){return n.push(t)}),n},n.prototype.parse=function(t,n){var e;n.classes.length>0&&(e=t.classList).add.apply(e,n.classes)},n}(o),j=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),P=function(t){function n(){var n=t.call(this,"childNodes","array",[],[])||this;return n.getKeyFromElement=function(t){return t.innerHTML},n}return j(n,t),n.prototype.inherit=function(t,n){var e=t.childNodes.slice();!0===t.from.children.allow&&("append"===t.from.mode?"before"===t.from.children.placement?e.unshift.apply(e,n):e.push.apply(e,n):e=n),t.childNodes=e},n}(o),E=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),A=function(){return(A=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},N=function(t){function n(){return t.call(this,"attributes","object",[],{})||this}return E(n,t),n.prototype.inherit=function(t,n){var e=A({},n);if("append"===t.from.mode)for(var r in t.attributes)e[r]=t.attributes[r];else for(var r in t.attributes)r in e||(e[r]=t.attributes[r]);t.attributes=e},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.attributes)isNaN(parseInt(e))||-1!==["id","class"].indexOf(t.attributes[e].nodeName)||"data-"===t.attributes[e].nodeName.substring(0,5)||(n[t.attributes[e].nodeName]=t.attributes[e].nodeValue);return n},n.prototype.parse=function(t,n){for(var e in n.attributes)t.setAttribute(e,n.attributes[e])},n}(o),T=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),k=function(){return(k=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},I=function(t){function n(){return t.call(this,"dataset","object",[],{})||this}return T(n,t),n.prototype.inherit=function(t,n){var e=k({},n);if("append"===t.from.mode)for(var r in t.dataset)e[r]=t.dataset[r];else for(var r in t.dataset)r in e||(e[r]=t.dataset[r]);t.dataset=e},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.dataset)n[e]=t.dataset[e];return n},n.prototype.parse=function(t,n){for(var e in n.dataset)t.dataset[e]=n.dataset[e]},n}(o),F=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),K=function(t){function n(){var n=t.call(this,"mode","string",["append","override"],"append")||this;return n.getKeyFromElement=function(t){return null},n}return F(n,t),n.prototype.inherit=function(t,n){},n}(o),x=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),M=function(t){function n(){var n=t.call(this,"placement","string",["after","before"],"after")||this;return n.getKeyFromElement=function(t){return null},n}return x(n,t),n.prototype.inherit=function(t,n){},n}(o),S=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),L=function(t){function n(){var n=t.call(this,"allow","boolean",[],!1)||this;return n.getKeyFromElement=function(t){return null},n}return S(n,t),n.prototype.inherit=function(t,n){},n}(o),V=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),H=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new L).default,placement:(new M).default})||this;return n.keys={allow:new L,placement:new M},n.getKeyFromElement=function(t){return null},n}return V(n,t),n.prototype.inherit=function(t,n){},n}(o),R=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),q=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new K).default,children:(new H).default})||this;return n.keys={ref:new c,mode:new K,children:new H},n.getKeyFromElement=function(t){return null},n}return R(n,t),n.prototype.inherit=function(t,n){},n}(o),C=[new c,new u,new s,new v,new d,new w,new g,new P,new N,new I,new q],z=function(){var t=[];return C.forEach(function(n){if(t.push(n),"keys"in n){var e=function t(n){var e=[];for(var r in n.keys){var o=n.keys[r];if(e.push(o),"keys"in o){var i=t(o);e=e.concat(i)}}return e}(n);t=t.concat(e)}}),t}(),U=["name","childNodes","templates"];var B=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),D=function(t){function n(n){var e=t.call(this)||this;return e.name="TemmyError",e.message="Temme isn't feeling good",e.message=n.length>0?n:e.message,e}return B(n,t),n}(Error),G=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),J=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidTemplateOptionError",e.message="A template has an invalid option";var r="“"+n+"” is not a valid option to use in templates";return e.message=n.length>0?r:e.message,e}return G(n,t),n}(D),Q=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),W=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidOptionNameError",e.message="An option is not valid";var r="“"+n+"” is not a valid option";return e.message=n.length>0?r:e.message,e}return Q(n,t),n}(D),X=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Y=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionTypeError",r.message="An option doesn't have a valid value type";var o="The “"+n+"” option doesn't accept values of type “"+e+"”";return r.message=n.length>0?o:r.message,r}return X(n,t),n}(D),Z=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),$=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionValueError",r.message="An option doesn't have a valid value";var o="The “"+n+"” option doesn't accept “"+e+"” as a value";return r.message=n.length>0?o:r.message,r}return Z(n,t),n}(D),tt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),nt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionNameError",r.message="A sub-option is not valid";var o="The “"+n+"” option doesn't not recognize “"+e+"” as a valid sub-option";return r.message=n.length>0||e.length>0?o:r.message,r}return tt(n,t),n}(D),et=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),rt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionTypeError",r.message="A sub-option doesn't have a valid value type";var o="The “"+n+"” sub-option doesn't accept values of type “"+e+"”";return r.message=n.length>0||e.length>0?o:r.message,r}return et(n,t),n}(D),ot=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),it=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionValueError",r.message="A sub-option doesn't have a valid value";var o="The “"+n+"” sub-option doesn't accept “"+e+"” as a value";return r.message=n.length>0||e.length>0?o:r.message,r}return ot(n,t),n}(D),ct=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),at=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferencingOptionError",e.message="A referencing option is not valid",e.message=n.length>0?n:e.message,e}return ct(n,t),n}(D),ut=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ft=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceOptionValueError",e.message="“ref” options must not begin with the “@” symbol",e.message=n.length>0?n:e.message,e}return ut(n,t),n}(D),st=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),pt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceError",e.message="A reference is invalid",e.message=n.length>0?"“"+n+"” is an invalid reference":e.message,e}return st(n,t),n}(D),lt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ht=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTemplateError",e.message="A template does not have a “ref” option",e.message=n.length>0?n:e.message,e}return lt(n,t),n}(D);function yt(t,n,e){void 0===n&&(n=[]),void 0===e&&(e=!1);try{var r=function(t){void 0===t&&(t=!1);for(var n="0123456789abcdefghijklmnopqrstuvwxyz",e=!1===t?6:4,r="",o=0;o<e;o++){var i=Math.floor(Math.random()*n.length),c=Math.floor(2*Math.random());r+=1===c?n[i].toUpperCase():n[i]}return r}(e);t.temmeIds=n.concat([r]),"childNodes"in t&&t.childNodes.forEach(function(n){yt(n,t.temmeIds)}),"templates"in t&&t.templates.forEach(function(n){yt(n,t.temmeIds,!0)})}catch(t){throw t}}function _t(t){return t.temmeIds[t.temmeIds.length-1]}var vt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),mt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidTemplateReferencingError",r.message="Templates can only reference other templates.";var o="The template with the reference “"+n+"” is trying to reference “"+e+"” a non-template object";return r.message=n.length>0?o:r.message,r}return vt(n,t),n}(D),dt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Ot=function(t){function n(n){var e=t.call(this,"")||this;return e.name="ReferenceOutOfScopeError",e.message="An object is referencing an element out of its scope",e.message=n.length>0?n:e.message,e}return dt(n,t),n}(D),wt=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},bt=function(t){return null!=t&&t instanceof HTMLElement};function gt(t){try{var n=function(n){var e=C.filter(function(t){return t.label===n})[0],r=t[n];if(!1===o.validateOptionName(e))throw new W(n);var i=o.validateOptionType(r,e);if(!1===i.valid)throw new Y(n,i.type);if(!1===o.validateOptionValue(r,e))throw new $(n,r);if("keys"in e){var c=e.keys;!function t(n,e,r){var i=function(i){var c=function(t){var n=[];return z.forEach(function(e){if("keys"in e&&e.label===t)for(var r in e.keys){var o=e.keys[r];n.push(o)}}),n}(n).filter(function(t){return t.label===i})[0],a=e[i];if(!(i in r))throw new nt(n,i);if(!1===o.validateOptionName(c))throw new nt(n,i);var u=o.validateOptionType(a,c);if(!1===u.valid)throw new rt(i,u.type);if(!1===o.validateOptionValue(a,c))throw new it(i,a);if("keys"in c){var f=e[i];t(i,f,c.keys)}};for(var c in e)i(c)}(n,r,c)}};for(var e in t)n(e);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new at("The “from” option must always have a “ref” sub-option");"templates"in t&&t.templates.forEach(function(t){!function(t){try{if(!("ref"in t))throw new ht("");for(var n in t){if(U.indexOf(n)>-1)throw new J(n);gt(t)}}catch(t){throw t}}(t)}),"childNodes"in t&&t.childNodes.forEach(function(t){gt(t)})}catch(t){throw t}}var jt=function(t,n){return null!=n.filter(function(n){return n.hierarchy.ref===t.from.ref&&_t(t)!==_t(n.hierarchy)})[0]};function Pt(t){try{C.forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];Et(t[n.label],r)}}else t[n.label]=n.default}),t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort(),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){Pt(t)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(function(t){!function(t){try{C.filter(function(t){return-1===U.indexOf(t.label)}).forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];Et(t[n.label],r)}}else t[n.label]=n.default})}catch(t){throw t}}(t)})}catch(t){throw t}}function Et(t,n){try{if(n.label in t||(t[n.label]=n.default),"keys"in n)for(var e in n.keys){Et(t[n.label],n.keys[e])}}catch(t){throw t}}function At(t){try{var n=function t(n,e){void 0===e&&(e=0);var r=[];e++;""!==n.ref&&r.push({depth:e,hierarchy:n});"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){r.push.apply(r,t(n,e))});"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){r.push.apply(r,t(n,e-1))});return r}(t);!function t(n,e){try{if("@"===n.ref[0])throw new ft("");if("@"===n.from.ref[0]){var r=n.from.ref.substring(1);if(null==document.querySelector(r))throw new ft("No outer element corresponds to the selector “"+r+"”")}else if(!1===jt(n,e)&&""!==n.from.ref)throw new pt(n.from.ref);"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e){try{var r=n.templates;r.length>0&&r.forEach(function(t){if(t.from.ref.length>0&&!1==(4===_t(e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0].hierarchy).length))throw new mt(t.ref,t.from.ref)}),n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e,r){void 0===r&&(r=0);try{var o=n.from.ref;if(r++,""!==o&&"@"!==o[0]&&null==e.filter(function(t){return t.hierarchy.ref===o&&r>=t.depth})[0])throw new Ot("");"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e,r)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e,r)})}catch(t){throw t}}(t,n),function t(n,e){try{"templates"in n&&n.templates.length>0&&n.templates.forEach(function(t){if(""!==t.from.ref){var n=function(n){var r=C.filter(function(t){return t.label===n})[0],o=e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];r.inherit(t,o.hierarchy[n])};for(var r in t)n(r)}}),"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n.filter(function(t){return Nt(t.hierarchy)})),function t(n,e){try{if("childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),""!==n.from.ref)if("@"===n.from.ref[0]){var r=n.from.ref.substring(1),o=document.querySelector(r),i=function(t){var e=C.filter(function(n){return n.label===t})[0],r=e.getKeyFromElement(o);null!=r&&e.inherit(n,r)};for(var c in n)i(c)}else{var a=e.filter(function(t){return t.hierarchy.ref===n.from.ref})[0],u=function(t){var e=C.filter(function(n){return n.label===t})[0];e.inherit(n,a.hierarchy[t])};for(var c in n)u(c)}}catch(t){throw t}}(t,n)}catch(t){throw t}}var Nt=function(t){return 4===_t(t).length};function Tt(t,n,e,r){void 0===r&&(r=!1);try{var o=function(t,n,e){void 0===e&&(e=!1);try{var r=!0===e?n:document.createElement(t.name);return C.forEach(function(n){"function"==typeof n.parse&&n.parse(r,t)}),!1===e&&n.appendChild(r),r}catch(t){throw t}}(t,n,r);e(_t(t),t),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){Tt(t,o,e)})}catch(t){throw t}}var kt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),It=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidHierarchyError",e.message="The hierarchy object is not valid",e.message=n.length>0?n:e.message,e}return kt(n,t),n}(D),Ft=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Kt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTargetError",e.message="The target is not a valid HTML element",e.message=n.length>0?n:e.message,e}return Ft(n,t),n}(D);function xt(t,n,e,r){void 0===e&&(e=function(t){}),void 0===r&&(r=function(){});try{if(!bt(n))throw new Kt("");if(!wt(t))throw new It("");return gt(t),Pt(t),yt(t),At(t),Tt(t,n,r,!0),e(t),t}catch(t){throw t.message="[Temme]: "+t.message+".",t}}e.d(n,"parse",function(){return xt})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZW1tZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9tb2RlbHMvT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvUmVmT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvTmFtZU9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0lkT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvVmFsdWVTdWJPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9zdWItb3B0aW9ucy9Db250ZW50VHlwZVN1Yk9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0NvbnRlbnRPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9UZW1tZUlkc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL1RlbXBsYXRlc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0NsYXNzZXNPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9DaGlsZHJlbk5vZGVzT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvQXR0cmlidXRlc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0RhdGFzZXRPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9zdWItb3B0aW9ucy9Nb2RlU3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvUGxhY2VtZW50U3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL3N1Yi1vcHRpb25zL0NoaWxkcmVuU3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvRnJvbU9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL21vZGVscy9UZW1teUVycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvbk5hbWVFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvblR5cGVFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvblZhbHVlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRSZWZlcmVuY2VFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZFRlbXBsYXRlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvaWRmaWVyLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9SZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvdmFsaWRhdG9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL3Nhbml0aXplci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9yZWZlcmVuY2VyLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL3BhcnNlci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZEhpZXJhcmNoeUVycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkVGFyZ2V0RXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL3RlbW1lLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibW9kZWxzX09wdGlvbiIsIk9wdGlvbiIsImxhYmVsIiwidHlwZSIsInZhbHVlcyIsImRlZmF1bHRWYWx1ZSIsInRoaXMiLCJkZWZhdWx0IiwidmFsaWRhdGVPcHRpb25UeXBlIiwibWF0Y2hpbmdPcHRpb24iLCJvcHRpb25UeXBlIiwidmFsaWQiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWxpZGF0ZU9wdGlvblZhbHVlIiwibGVuZ3RoIiwiaW5kZXhPZiIsInZhbGlkYXRlT3B0aW9uTmFtZSIsIl9zdXBlciIsIlJlZk9wdGlvbiIsIl90aGlzIiwiZ2V0S2V5RnJvbUVsZW1lbnQiLCJlbGVtZW50IiwiX19leHRlbmRzIiwiaW5oZXJpdCIsImhpZXJhcmNoeSIsInJlZiIsIk5hbWVPcHRpb24iLCJOYW1lT3B0aW9uX2V4dGVuZHMiLCJJZE9wdGlvbiIsImlkIiwiSWRPcHRpb25fZXh0ZW5kcyIsInBhcnNlIiwiVmFsdWVTdWJPcHRpb24iLCJWYWx1ZVN1Yk9wdGlvbl9leHRlbmRzIiwiQ29udGVudFR5cGVTdWJPcHRpb24iLCJDb250ZW50VHlwZVN1Yk9wdGlvbl9leHRlbmRzIiwiQ29udGVudE9wdGlvbiIsInN1Yl9vcHRpb25zX0NvbnRlbnRUeXBlU3ViT3B0aW9uIiwic3ViX29wdGlvbnNfVmFsdWVTdWJPcHRpb24iLCJrZXlzIiwiQ29udGVudE9wdGlvbl9leHRlbmRzIiwiY29udGVudCIsImN0IiwiZnJvbSIsImlubmVySFRNTCIsInRleHRDb250ZW50IiwiVGVtbWVJZHNPcHRpb24iLCJUZW1tZUlkc09wdGlvbl9leHRlbmRzIiwidGVtbWVJZHMiLCJUZW1wbGF0ZXNPcHRpb24iLCJUZW1wbGF0ZXNPcHRpb25fZXh0ZW5kcyIsInRlbXBsYXRlcyIsIkNsYXNzZXNPcHRpb24iLCJDbGFzc2VzT3B0aW9uX2V4dGVuZHMiLCJjbGFzc2VzIiwiX2EiLCJwdXNoIiwiYXBwbHkiLCJmaWx0ZXIiLCJjbHMiLCJpbmRleCIsInNvcnQiLCJjbGFzc0xpc3QiLCJmb3JFYWNoIiwiYWRkIiwiQ2hpbGROb2Rlc09wdGlvbiIsIkNoaWxkcmVuTm9kZXNPcHRpb25fZXh0ZW5kcyIsImNoaWxkTm9kZXMiLCJjaGlsZHJlbiIsInNsaWNlIiwiYWxsb3ciLCJwbGFjZW1lbnQiLCJ1bnNoaWZ0IiwiQXR0cmlidXRlc09wdGlvbiIsIkF0dHJpYnV0ZXNPcHRpb25fZXh0ZW5kcyIsImF0dHJpYnV0ZXMiLCJhdHRyIiwiX19hc3NpZ24iLCJhdHRyS2V5IiwiaXNOYU4iLCJwYXJzZUludCIsIm5vZGVOYW1lIiwic3Vic3RyaW5nIiwibm9kZVZhbHVlIiwiZGF0YUtleSIsInNldEF0dHJpYnV0ZSIsIkRhdGFzZXRPcHRpb24iLCJEYXRhc2V0T3B0aW9uX2V4dGVuZHMiLCJkYXRhc2V0IiwiZHQiLCJEYXRhc2V0T3B0aW9uX2Fzc2lnbiIsIk1vZGVTdWJPcHRpb24iLCJNb2RlU3ViT3B0aW9uX2V4dGVuZHMiLCJQbGFjZW1lbnRTdWJPcHRpb24iLCJQbGFjZW1lbnRTdWJPcHRpb25fZXh0ZW5kcyIsIkNoaWxkcmVuQWxsb3dTdWJPcHRpb24iLCJDaGlsZHJlbkFsbG93U3ViT3B0aW9uX2V4dGVuZHMiLCJDaGlsZHJlblN1Yk9wdGlvbiIsInN1Yl9vcHRpb25zX0NoaWxkcmVuQWxsb3dTdWJPcHRpb24iLCJzdWJfb3B0aW9uc19QbGFjZW1lbnRTdWJPcHRpb24iLCJDaGlsZHJlblN1Yk9wdGlvbl9leHRlbmRzIiwiRnJvbU9wdGlvbiIsIm9wdGlvbnNfUmVmT3B0aW9uIiwic3ViX29wdGlvbnNfTW9kZVN1Yk9wdGlvbiIsInN1Yl9vcHRpb25zX0NoaWxkcmVuU3ViT3B0aW9uIiwiRnJvbU9wdGlvbl9leHRlbmRzIiwib3B0aW9ucyIsIm9wdGlvbnNfTmFtZU9wdGlvbiIsIm9wdGlvbnNfSWRPcHRpb24iLCJvcHRpb25zX0NvbnRlbnRPcHRpb24iLCJvcHRpb25zX1RlbW1lSWRzT3B0aW9uIiwib3B0aW9uc19UZW1wbGF0ZXNPcHRpb24iLCJvcHRpb25zX0NsYXNzZXNPcHRpb24iLCJDaGlsZHJlbk5vZGVzT3B0aW9uIiwib3B0aW9uc19BdHRyaWJ1dGVzT3B0aW9uIiwib3B0aW9uc19EYXRhc2V0T3B0aW9uIiwib3B0aW9uc19Gcm9tT3B0aW9uIiwiYWxsT3B0aW9ucyIsIm9wdCIsInN1Yk9wdGlvbnMiLCJnZXRBbGxTdWJPcHRpb25zIiwib3B0aW9uIiwiYWxsU3ViT3B0aW9ucyIsInN1Yk9wdGlvbiIsIm9wdHMiLCJjb25jYXQiLCJnZXRBbGxPcHRpb25zIiwiZm9yYmlkZGVuT3B0aW9ucyIsIlRlbW15RXJyb3IiLCJtZXNzYWdlIiwiVGVtbXlFcnJvcl9leHRlbmRzIiwiRXJyb3IiLCJJbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvciIsIkludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yX2V4dGVuZHMiLCJtb2RlbHNfVGVtbXlFcnJvciIsIkludmFsaWRPcHRpb25OYW1lRXJyb3IiLCJJbnZhbGlkT3B0aW9uTmFtZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkT3B0aW9uVHlwZUVycm9yIiwiSW52YWxpZE9wdGlvblR5cGVFcnJvcl9leHRlbmRzIiwiSW52YWxpZE9wdGlvblZhbHVlRXJyb3IiLCJJbnZhbGlkT3B0aW9uVmFsdWVFcnJvcl9leHRlbmRzIiwiSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvciIsIkludmFsaWRTdWJPcHRpb25OYW1lRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IiLCJJbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvciIsIkludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvciIsIkludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yX2V4dGVuZHMiLCJJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvciIsIkludmFsaWRSZWZlcmVuY2VPcHRpb25WYWx1ZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkUmVmZXJlbmNlRXJyb3IiLCJyZWZlcmVuY2UiLCJJbnZhbGlkUmVmZXJlbmNlRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRUZW1wbGF0ZUVycm9yIiwiSW52YWxpZFRlbXBsYXRlRXJyb3JfZXh0ZW5kcyIsImlkZnkiLCJ0ZW1tZUlkIiwiY2hhcnMiLCJtYXgiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ1cHBlcmNhc2UiLCJ0b1VwcGVyQ2FzZSIsImdlbmVyYXRlVGVtbWVJZCIsImNoaWxkIiwidGVtcGxhdGUiLCJlIiwiZ2V0VGVtbWVJZCIsIkludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3IiLCJ0YXJnZXQiLCJJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yX2V4dGVuZHMiLCJSZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3IiLCJSZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3JfZXh0ZW5kcyIsImlzVmFsaWRIaWVyYXJjaHkiLCJpc1ZhbGlkSFRNTEVsZW1lbnQiLCJIVE1MRWxlbWVudCIsInZhbGlkYXRlT3B0aW9ucyIsIm9wdGlvblZhbHVlIiwiZXJyb3JzX0ludmFsaWRPcHRpb25OYW1lRXJyb3IiLCJ0eXBlVmFsaWRhdGlvbiIsImVycm9yc19JbnZhbGlkT3B0aW9uVHlwZUVycm9yIiwiZXJyb3JzX0ludmFsaWRPcHRpb25WYWx1ZUVycm9yIiwidmFsaWRhdGVTdWJPcHRpb25zIiwib3B0aW9uTmFtZSIsIm1hdGNoaW5nU3ViT3B0aW9uIiwiZ2V0U3ViT3B0aW9ucyIsInN1Yk9wdGlvblZhbHVlIiwiZXJyb3JzX0ludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IiLCJlcnJvcnNfSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvciIsImVycm9yc19JbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvciIsInN1Yk9wdGlvblZhbHVlXzEiLCJ2YWxpZGF0ZVJlZmVyZW5jaW5nT3B0aW9uIiwiZXJyb3JzX0ludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yIiwiZXJyb3JzX0ludmFsaWRUZW1wbGF0ZUVycm9yIiwiZXJyb3JzX0ludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yIiwidmFsaWRhdGVUZW1wbGF0ZXMiLCJ2YWxpZGF0ZVJlZmVyZW5jZSIsInJlZmVyZW5jZXMiLCJzYW5pdGl6ZSIsInNhbml0aXplT3B0aW9uIiwic2FuaXRpemVUZW1wbGF0ZSIsInByb2Nlc3MiLCJnZXRSZWZlcmVuY2VzIiwiZGVwdGgiLCJ2YWxpZGF0ZVJlZmVyZW5jZXMiLCJlcnJvcnNfSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3IiLCJzZWxlY3RvciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImVycm9yc19JbnZhbGlkUmVmZXJlbmNlRXJyb3IiLCJ2YWxpZGF0ZVRlbXBsYXRlUmVmZXJlbmNlIiwiZXJyb3JzX0ludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3IiLCJ2YWxpZGF0ZVBhcmVudFRvQ2hpbGRSZWZlcmVuY2UiLCJyZWZfMSIsInJlZk9iamVjdCIsImVycm9yc19SZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3IiLCJwcm9jZXNzVGVtcGxhdGVzIiwicmVmZXJlbmNlZEhpZXJhcmNoeSIsInJlZmVyZW5jZXJfaXNUZW1wbGF0ZSIsInByb2Nlc3NIaWVyYXJjaGllcyIsInBhcmVudCIsIm5vZGVDYWxsYmFjayIsInRvcFBhcmVudCIsImVsZW1lbnRfMSIsImVsZW1lbnRfMiIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInBhcnNlRWxlbWVudCIsIkludmFsaWRIaWVyYXJjaHlFcnJvciIsIkludmFsaWRIaWVyYXJjaHlFcnJvcl9leHRlbmRzIiwiSW52YWxpZFRhcmdldEVycm9yIiwiSW52YWxpZFRhcmdldEVycm9yX2V4dGVuZHMiLCJ0ZW1tZV9wYXJzZSIsImVuZENhbGxiYWNrIiwiZXJyb3JzX0ludmFsaWRUYXJnZXRFcnJvciIsImVycm9yc19JbnZhbGlkSGllcmFyY2h5RXJyb3IiLCJfX3dlYnBhY2tfZXhwb3J0c19fIl0sIm1hcHBpbmdzIjoic0JBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQTBEQSxPQXJEQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFBQVYsRUFHQUMsRUFBQVUsRUFBQSxTQUFBUixFQUFBUyxF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eVEsRUFBQSwwQkFBQUoiLCJmaWxlIjoidGVtbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCIvKipcclxuICogVGhlIGhpZXJhcmNoeSdzIG9wdGlvbiBtb2RlbC5cclxuICogV2hhdCBkZWZpbmVzIGEgdmFsaWQgb3B0aW9uLlxyXG4gKi9cclxuXHJcblxyXG4gaW1wb3J0IHsgSGllcmFyY2h5IH0gZnJvbSBcIi4vSGllcmFyY2h5XCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBpbnRlcmZhY2UgdGhhdCBpbmRpY2F0ZXNcclxuICogc3ViLW9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElLZXlzIHtcclxuXHJcbiAgICBrZXlzOiBhbnk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhlIGludGVyZmFjZSBmb3Igb3B0aW9ucyB0aGF0IGhhdmUgdG8gcGFyc2UgdGhlaXJcclxuICogcmVzcGVjdGl2ZSB2YWx1ZXMgaW50byBhIHNwZWNpZmljIEhUTUwgZWxlbWVudC5cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBhcnNlciB7XHJcblxyXG4gICAgcGFyc2U6IChlbGVtZW50OiBIVE1MRWxlbWVudCwgaGllcmFyY2h5OiBIaWVyYXJjaHkpID0+IHZvaWRcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgb3B0aW9uJ3MgY2xhc3MuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGF0YSB0eXBlIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyB2YWx1ZXM6IEFycmF5PGFueT47XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZGVmYXVsdDogYW55O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbGFiZWwgVGhlIG5hbWUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqIEBwYXJhbSB0eXBlIFRoZSBkYXRhIHR5cGUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqIEBwYXJhbSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqIEBwYXJhbSB2YWx1ZXMgVGhlIHBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihsYWJlbDogc3RyaW5nLCB0eXBlOiBzdHJpbmcsIHZhbHVlczogQXJyYXk8YW55PiwgZGVmYXVsdFZhbHVlOiBhbnkpIHtcclxuXHJcbiAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXM7XHJcbiAgICAgICAgdGhpcy5kZWZhdWx0ID0gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgaW5oZXJpdCAoaGllcmFyY2h5OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkXHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0IGFuIG9wdGlvbiB2YWx1ZSBmcm9tIGFuIGV4aXN0aW5nIEhUTUwgZWxlbWVudC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGdldEtleUZyb21FbGVtZW50IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZhbGlkYXRlcyB0aGUgb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1hdGNoaW5nT3B0aW9uIFRoZSBvcHRpb24gb2JqZWN0IHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZU9wdGlvbk5hbWUgPSAobWF0Y2hpbmdPcHRpb246IE9wdGlvbik6IGJvb2xlYW4gPT4gbWF0Y2hpbmdPcHRpb24gIT0gbnVsbDtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIGRhdGEgdHlwZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKiBAcGFyYW0gbWF0Y2hpbmdPcHRpb24gVGhlIG9wdGlvbiBvYmplY3Qgd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZS5cclxuICAgICAqIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIHZhbGlkYXRlT3B0aW9uVHlwZSh2YWx1ZTogYW55LCBtYXRjaGluZ09wdGlvbjogT3B0aW9uKTogeyB2YWxpZDogYm9vbGVhbiwgdHlwZTogc3RyaW5nIH0ge1xyXG5cclxuICAgICAgICBsZXQgb3B0aW9uVHlwZTogc3RyaW5nID0gXCJcIjtcclxuXHJcbiAgICAgICAgLy8gR2V0dGluZyB0aGUgYXBwcm9wcmlhdGUgZGF0YSB0eXBlLlxyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICBvcHRpb25UeXBlID0gXCJhcnJheVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG9wdGlvblR5cGUgPSB0eXBlb2YgdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2YWxpZDogb3B0aW9uVHlwZSA9PT0gbWF0Y2hpbmdPcHRpb24udHlwZSxcclxuICAgICAgICAgICAgdHlwZTogb3B0aW9uVHlwZVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIG9wdGlvbidzIHZhbHVlLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxyXG4gICAgICogQHBhcmFtIG1hdGNoaW5nT3B0aW9uIFRoZSBvcHRpb24gb2JqZWN0IHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZU9wdGlvblZhbHVlKHZhbHVlOiBhbnksIG1hdGNoaW5nT3B0aW9uOiBPcHRpb24pOiBib29sZWFuIHtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgbWF0Y2hpbmcgb2JqZWN0IGlzIHZhbGlkLlxyXG4gICAgICAgIGlmIChtYXRjaGluZ09wdGlvbiAhPSBudWxsICYmIG1hdGNoaW5nT3B0aW9uLnZhbHVlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgdmFsdWUgaXMgbm90IGEgdmFsaWQgb25lLlxyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hpbmdPcHRpb24udmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgcmVmZXJlbmNlIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlZk9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ3JlZicsICdzdHJpbmcnLCBbXSwgJycpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gcmVmIFRoZSByZWYgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHJlZjogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIG5hbWUgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmFtZU9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ25hbWUnLCAnc3RyaW5nJywgW10sICdkaXYnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgbmFtZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKG5hbWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaGllcmFyY2h5Lm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBub3RoaW5nIGZyb20gYSBnaXZlbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0LiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEtleUZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55ID0+IG51bGw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBJRCBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSVBhcnNlciB9IGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCB7IEhpZXJhcmNoeSB9IGZyb20gXCIuLi9tb2RlbHMvSGllcmFyY2h5XCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRPcHRpb24gZXh0ZW5kcyBPcHRpb24gaW1wbGVtZW50cyBJUGFyc2VyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignaWQnLCAnc3RyaW5nJywgW10sICcnKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBpZCB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgaWQ6IGFueSk6IHZvaWQge1xyXG5cclxuICAgICAgICBoaWVyYXJjaHkuaWQgPSBpZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBpZCBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBlbGVtZW50LmlkO1xyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGlkIGZvciBhbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gc2V0IHRoZSBpZCBmb3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnNlIChlbGVtZW50OiBIVE1MRWxlbWVudCwgaGllcmFyY2h5OiBIaWVyYXJjaHkpIHtcclxuXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5pZCAhPSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LmlkID0gaGllcmFyY2h5LmlkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIHZhbHVlIHN1YiBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uLy4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYWx1ZVN1Yk9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ3ZhbHVlJywgJ3N0cmluZycsIFtdLCAnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQgeyB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBub3RoaW5nIGZyb20gYSBnaXZlbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0LiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEtleUZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55ID0+IG51bGw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBjb250ZW50IHR5cGUgc3ViIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnRUeXBlU3ViT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcigndHlwZScsICdzdHJpbmcnLCBbJ3RleHQnLCAnaHRtbCddLCAndGV4dCcpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIHRleHQgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uLCB7IElLZXlzLCBJUGFyc2VyIH0gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuaW1wb3J0IHsgSGllcmFyY2h5IH0gZnJvbSAnLi4vbW9kZWxzL0hpZXJhcmNoeSc7XHJcbmltcG9ydCBWYWx1ZVN1Yk9wdGlvbiBmcm9tIFwiLi9zdWItb3B0aW9ucy9WYWx1ZVN1Yk9wdGlvblwiO1xyXG5pbXBvcnQgQ29udGVudFR5cGVTdWJPcHRpb24gZnJvbSBcIi4vc3ViLW9wdGlvbnMvQ29udGVudFR5cGVTdWJPcHRpb25cIjtcclxuXHJcblxyXG4vKipcclxuICogVGhlIGNvbnRlbnQgb3B0aW9uIGNsYXNzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudE9wdGlvbiBleHRlbmRzIE9wdGlvbiBpbXBsZW1lbnRzIElLZXlzLCBJUGFyc2VyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBrZXlzIG9mIHRoZSBgY29udGVudGAgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMga2V5czogQ29udGVudEtleXMgPSB7XHJcbiAgICAgICAgdHlwZTogbmV3IENvbnRlbnRUeXBlU3ViT3B0aW9uKCksXHJcbiAgICAgICAgdmFsdWU6IG5ldyBWYWx1ZVN1Yk9wdGlvbigpXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdjb250ZW50JywgJ29iamVjdCcsIFtdLCB7XHJcbiAgICAgICAgICAgIHR5cGU6IChuZXcgQ29udGVudFR5cGVTdWJPcHRpb24oKSkuZGVmYXVsdCxcclxuICAgICAgICAgICAgdmFsdWU6IChuZXcgVmFsdWVTdWJPcHRpb24oKSkuZGVmYXVsdFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgY29udGVudCB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgY29udGVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGN0OiBzdHJpbmcgPSBjb250ZW50LnZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoY29udGVudC52YWx1ZSAhPT0gXCJcIikge1xyXG5cclxuICAgICAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLm1vZGUgPT09ICdhcHBlbmQnKSB7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGN0ID0gYCR7aGllcmFyY2h5LmNvbnRlbnQudmFsdWV9JHtjdC5sZW5ndGggPiAwID8gJyAnIDogJyd9JHtjdH1gO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHkuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICBoaWVyYXJjaHkuY29udGVudC52YWx1ZSA9IGN0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGNvbnRlbnQgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgeyBcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogXCJodG1sXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBlbGVtZW50LmlubmVySFRNTFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY29udGVudCBmb3IgYW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHNldCB0aGUgY29udGVudCBmb3JcclxuICAgICAqL1xyXG4gICAgcHVibGljIHBhcnNlIChlbGVtZW50OiBIVE1MRWxlbWVudCwgaGllcmFyY2h5OiBIaWVyYXJjaHkpIHtcclxuXHJcbiAgICAgICAgaWYgKCg8YW55PmhpZXJhcmNoeSkuY29udGVudC52YWx1ZSAhPSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoKDxhbnk+aGllcmFyY2h5KS5jb250ZW50LnR5cGUgPT09ICd0ZXh0Jykge1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSAoPGFueT5oaWVyYXJjaHkpLmNvbnRlbnQudmFsdWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5pbm5lckhUTUwgPSAoPGFueT5oaWVyYXJjaHkpLmNvbnRlbnQudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhlIENvbnRlbnRLZXlzIHR5cGUuXHJcbiAqL1xyXG50eXBlIENvbnRlbnRLZXlzID0ge1xyXG5cclxuICAgIHR5cGU6IENvbnRlbnRUeXBlU3ViT3B0aW9uO1xyXG4gICAgdmFsdWU6IFZhbHVlU3ViT3B0aW9uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgcmVmZXJlbmNlIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbW1lSWRzT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcigndGVtbWVJZHMnLCAnYXJyYXknLCBbXSwgW10pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdGVtbWVJZHMgVGhlIHRlbW1lSWRzIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB0ZW1tZUlkczogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIHRlbXBsYXRlcyBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1wbGF0ZXNPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCd0ZW1wbGF0ZXMnLCAnYXJyYXknLCBbXSwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZXMgVGhlIHRlbXBsYXRlcyB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdGVtcGxhdGVzOiBhbnkpOiB2b2lkIHsgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgbm90aGluZyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBudWxsO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgY2xhc3NlcyBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSVBhcnNlciB9IGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCB7IEhpZXJhcmNoeSB9IGZyb20gJy4uL21vZGVscy9IaWVyYXJjaHknO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsYXNzZXNPcHRpb24gZXh0ZW5kcyBPcHRpb24gaW1wbGVtZW50cyBJUGFyc2VyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignY2xhc3NlcycsICdhcnJheScsIFtdLCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGNsYXNzZXMgVGhlIGNsYXNzZXMgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGNsYXNzZXM6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5tb2RlID09PSAnYXBwZW5kJykge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMucHVzaCguLi5jbGFzc2VzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMgPSBjbGFzc2VzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBSZW1vdmluZyBkdXBsaWNhdGVzLlxyXG4gICAgICAgIGhpZXJhcmNoeS5jbGFzc2VzID0gaGllcmFyY2h5LmNsYXNzZXMuZmlsdGVyKChjbHM6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4gaGllcmFyY2h5LmNsYXNzZXMuaW5kZXhPZihjbHMpID09PSBpbmRleCk7XHJcblxyXG4gICAgICAgIC8vIFNvcnRpbmcgdGhlIGNsYXNzZXMuXHJcbiAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMuc29ydCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgY2xhc3NlcyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSB7XHJcbiAgICAgIFxyXG4gICAgICAgIGxldCBjbGFzc2VzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmZvckVhY2goKGNsczogc3RyaW5nKSA9PiBjbGFzc2VzLnB1c2goY2xzKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBjbGFzc2VzIGZvciBhbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gc2V0IHRoZSBjbGFzc2VzIGZvclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFyc2UgKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBoaWVyYXJjaHk6IEhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICBpZiAoaGllcmFyY2h5LmNsYXNzZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKC4uLmhpZXJhcmNoeS5jbGFzc2VzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBjaGlsZHJlbiBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGlsZE5vZGVzT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignY2hpbGROb2RlcycsICdhcnJheScsIFtdLCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGNoaWxkTm9kZXMgVGhlIGNoaWxkTm9kZXMgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGNoaWxkTm9kZXM6IGFueSk6IHZvaWQge1xyXG5cclxuICAgICAgICBsZXQgY2hpbGRyZW46IGFueSA9IFsgLi4uaGllcmFyY2h5LmNoaWxkTm9kZXMgXTtcclxuXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLmNoaWxkcmVuLmFsbG93ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoaGllcmFyY2h5LmZyb20ubW9kZSA9PT0gJ2FwcGVuZCcpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLmNoaWxkcmVuLnBsYWNlbWVudCA9PT0gJ2JlZm9yZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbi51bnNoaWZ0KC4uLmNoaWxkTm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCguLi5jaGlsZE5vZGVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IGNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzID0gY2hpbGRyZW47XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBjaGlsZHJlbiBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBlbGVtZW50LmlubmVySFRNTDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGF0dHJpYnV0ZXMgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uLCB7IElQYXJzZXIgfSBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgeyBIaWVyYXJjaHkgfSBmcm9tIFwiLi4vbW9kZWxzL0hpZXJhcmNoeVwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0dHJpYnV0ZXNPcHRpb24gZXh0ZW5kcyBPcHRpb24gaW1wbGVtZW50cyBJUGFyc2VyIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignYXR0cmlidXRlcycsICdvYmplY3QnLCBbXSwge30pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlcyBUaGUgYXR0cmlidXRlcyB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgYXR0cmlidXRlczogYW55KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGNvbnN0IGF0dHI6IGFueSA9IHsgLi4uYXR0cmlidXRlcyB9O1xyXG5cclxuICAgICAgICBpZiAoaGllcmFyY2h5LmZyb20ubW9kZSA9PT0gJ2FwcGVuZCcpIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgYXR0cktleSBpbiBoaWVyYXJjaHkuYXR0cmlidXRlcykge1xyXG5cclxuICAgICAgICAgICAgICAgIGF0dHJbYXR0cktleV0gPSBoaWVyYXJjaHkuYXR0cmlidXRlc1thdHRyS2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dHJLZXkgaW4gaGllcmFyY2h5LmF0dHJpYnV0ZXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIShhdHRyS2V5IGluIGF0dHIpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJbYXR0cktleV0gPSBoaWVyYXJjaHkuYXR0cmlidXRlc1thdHRyS2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGllcmFyY2h5LmF0dHJpYnV0ZXMgPSBhdHRyO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgYXR0cmlidXRlcyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSB7XHJcblxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzOiBhbnkgPSB7fTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBhdHRyS2V5IGluIGVsZW1lbnQuYXR0cmlidXRlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChhdHRyS2V5KSkgJiYgWydpZCcsICdjbGFzcyddLmluZGV4T2YoZWxlbWVudC5hdHRyaWJ1dGVzW2F0dHJLZXldLm5vZGVOYW1lKSA9PT0gLTEgJiYgZWxlbWVudC5hdHRyaWJ1dGVzW2F0dHJLZXldLm5vZGVOYW1lLnN1YnN0cmluZygwLCA1KSAhPT0gJ2RhdGEtJykge1xyXG5cclxuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbZWxlbWVudC5hdHRyaWJ1dGVzW2F0dHJLZXldLm5vZGVOYW1lXSA9IGVsZW1lbnQuYXR0cmlidXRlc1thdHRyS2V5XS5ub2RlVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBhdHRyaWJ1dGVzO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldHMgdGhlIGF0dHJpYnV0ZXMgZm9yIGFuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byBzZXQgdGhlIGF0dHJpYnV0ZXMgZm9yXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwYXJzZSAoZWxlbWVudDogSFRNTEVsZW1lbnQsIGhpZXJhcmNoeTogSGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZGF0YUtleSBpbiBoaWVyYXJjaHkuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZGF0YUtleSwgKDxhbnk+aGllcmFyY2h5KS5hdHRyaWJ1dGVzW2RhdGFLZXldKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBkYXRhc2V0IG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiwgeyBJUGFyc2VyIH0gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuaW1wb3J0IHsgSGllcmFyY2h5IH0gZnJvbSAnLi4vbW9kZWxzL0hpZXJhcmNoeSc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YXNldE9wdGlvbiBleHRlbmRzIE9wdGlvbiBpbXBsZW1lbnRzIElQYXJzZXIge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdkYXRhc2V0JywgJ29iamVjdCcsIFtdLCB7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGRhdGFzZXQgVGhlIGRhdGFzZXQgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGRhdGFzZXQ6IGFueSk6IHZvaWQge1xyXG5cclxuICAgICAgICBjb25zdCBkdDogYW55ID0geyAuLi5kYXRhc2V0IH07XHJcblxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5tb2RlID09PSAnYXBwZW5kJykge1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBkYXRhS2V5IGluIGhpZXJhcmNoeS5kYXRhc2V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgZHRbZGF0YUtleV0gPSBoaWVyYXJjaHkuZGF0YXNldFtkYXRhS2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGFLZXkgaW4gaGllcmFyY2h5LmRhdGFzZXQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIShkYXRhS2V5IGluIGR0KSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkdFtkYXRhS2V5XSA9IGhpZXJhcmNoeS5kYXRhc2V0W2RhdGFLZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoaWVyYXJjaHkuZGF0YXNldCA9IGR0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgZGF0YXRzZXQgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkge1xyXG5cclxuICAgICAgICBsZXQgZGF0YXNldDogYW55ID0ge307XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZGF0YUtleSBpbiBlbGVtZW50LmRhdGFzZXQpIHtcclxuXHJcbiAgICAgICAgICAgIGRhdGFzZXRbZGF0YUtleV0gPSBlbGVtZW50LmRhdGFzZXRbZGF0YUtleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0YXNldDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXRzIHRoZSBkYXRhc2V0IGZvciBhbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gc2V0IHRoZSBkYXRhc2V0IGZvclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGFyc2UgKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBoaWVyYXJjaHk6IEhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGRhdGFLZXkgaW4gaGllcmFyY2h5LmRhdGFzZXQpIHtcclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnQuZGF0YXNldFtkYXRhS2V5XSA9ICg8YW55PmhpZXJhcmNoeSkuZGF0YXNldFtkYXRhS2V5XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBtb2RlIHN1YiBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uLy4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RlU3ViT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignbW9kZScsICdzdHJpbmcnLCBbJ2FwcGVuZCcsICdvdmVycmlkZSddLCAnYXBwZW5kJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQgeyB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBub3RoaW5nIGZyb20gYSBnaXZlbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0LiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEtleUZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55ID0+IG51bGw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBwbGFjZW1lbnQgc3ViIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYWNlbWVudFN1Yk9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ3BsYWNlbWVudCcsICdzdHJpbmcnLCBbJ2FmdGVyJywgJ2JlZm9yZSddLCAnYWZ0ZXInKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGFsbG93IHN1YiBvcHRpb24gbW9kZWwgZm9yIHRoZSBmcm9tLWNoaWxkcmVuIG9wdGlvbi5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoaWxkcmVuQWxsb3dTdWJPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdhbGxvdycsICdib29sZWFuJywgW10sIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkIHsgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgbm90aGluZyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBudWxsO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgY2hpbGRyZW4gc3ViIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiwgeyBJS2V5cyB9IGZyb20gXCIuLi8uLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCBQbGFjZW1lbnRTdWJPcHRpb24gZnJvbSBcIi4vUGxhY2VtZW50U3ViT3B0aW9uXCI7XHJcbmltcG9ydCBDaGlsZHJlbkFsbG93U3ViT3B0aW9uIGZyb20gXCIuL0NoaWxkcmVuQWxsb3dTdWJPcHRpb25cIjtcclxuXHJcblxyXG4vKipcclxuICogVGhlIGNoaWxkcmVuIHN1YiBvcHRpb24gY2xhc3NcclxuICogb2YgdGhlIGZyb20gb3B0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hpbGRyZW5TdWJPcHRpb24gZXh0ZW5kcyBPcHRpb24gaW1wbGVtZW50cyBJS2V5cyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUga2V5cyBvZiB0aGUgYGNoaWxkcmVuYCBzdWIgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMga2V5czogRnJvbUNoaWxkcmVuS2V5cyA9IHtcclxuICAgICAgICBhbGxvdzogbmV3IENoaWxkcmVuQWxsb3dTdWJPcHRpb24oKSxcclxuICAgICAgICBwbGFjZW1lbnQ6IG5ldyBQbGFjZW1lbnRTdWJPcHRpb24oKVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignY2hpbGRyZW4nLCAnb2JqZWN0JywgW10sIHtcclxuICAgICAgICAgICAgYWxsb3c6IChuZXcgQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbigpKS5kZWZhdWx0LFxyXG4gICAgICAgICAgICBwbGFjZW1lbnQ6IChuZXcgUGxhY2VtZW50U3ViT3B0aW9uKCkpLmRlZmF1bHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgRnJvbUNoaWxkcmVuS2V5cyB0eXBlLlxyXG4gKi9cclxudHlwZSBGcm9tQ2hpbGRyZW5LZXlzID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogV2hldGhlciBvciBub3QgdG8gYWxsb3cgY2hpbGRyZW4gaW5oZXJpdGFuY2UuXHJcbiAgICAgKi9cclxuICAgIGFsbG93OiBDaGlsZHJlbkFsbG93U3ViT3B0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGluaGVyaXRhbmNlIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIHBsYWNlbWVudDogUGxhY2VtZW50U3ViT3B0aW9uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZnJvbSBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uLCB7IElLZXlzIH0gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuaW1wb3J0IFJlZk9wdGlvbiBmcm9tIFwiLi9SZWZPcHRpb25cIjtcclxuaW1wb3J0IE1vZGVTdWJPcHRpb24gZnJvbSBcIi4vc3ViLW9wdGlvbnMvTW9kZVN1Yk9wdGlvblwiO1xyXG5pbXBvcnQgQ2hpbGRyZW5TdWJPcHRpb24gZnJvbSBcIi4vc3ViLW9wdGlvbnMvQ2hpbGRyZW5TdWJPcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGcm9tT3B0aW9uIGV4dGVuZHMgT3B0aW9uIGltcGxlbWVudHMgSUtleXMge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGtleXMgb2YgdGhlIGBmcm9tYCBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBrZXlzOiBGcm9tS2V5cyA9IHtcclxuICAgICAgICByZWY6IG5ldyBSZWZPcHRpb24oKSxcclxuICAgICAgICBtb2RlOiBuZXcgTW9kZVN1Yk9wdGlvbigpLFxyXG4gICAgICAgIGNoaWxkcmVuOiBuZXcgQ2hpbGRyZW5TdWJPcHRpb24oKVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignZnJvbScsICdvYmplY3QnLCBbXSwge1xyXG4gICAgICAgICAgICByZWY6IChuZXcgUmVmT3B0aW9uKCkpLmRlZmF1bHQsXHJcbiAgICAgICAgICAgIG1vZGU6IChuZXcgTW9kZVN1Yk9wdGlvbigpKS5kZWZhdWx0LFxyXG4gICAgICAgICAgICBjaGlsZHJlbjogKG5ldyBDaGlsZHJlblN1Yk9wdGlvbigpKS5kZWZhdWx0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGZyb20gVGhlIGZyb20gdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGZyb206IGFueSk6IHZvaWQgeyB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBub3RoaW5nIGZyb20gYSBnaXZlbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0LiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEtleUZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55ID0+IG51bGw7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhlIEZyb21LZXlzIHR5cGUuXHJcbiAqL1xyXG50eXBlIEZyb21LZXlzID0ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHJlZmVyZW5jZSBzdWIgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICByZWY6IFJlZk9wdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbmhlcml0YW5jZSBtb2RlLlxyXG4gICAgICovXHJcbiAgICBtb2RlOiBNb2RlU3ViT3B0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGluaGVyaXRhbmNlIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIGNoaWxkcmVuOiBDaGlsZHJlblN1Yk9wdGlvbjtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGxpc3Qgb2Ygc3VwcG9ydGVkIG9wdGlvbnMuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCBSZWZPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9SZWZPcHRpb25cIjtcclxuaW1wb3J0IE5hbWVPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9OYW1lT3B0aW9uXCI7XHJcbmltcG9ydCBJZE9wdGlvbiBmcm9tIFwiLi9vcHRpb25zL0lkT3B0aW9uXCI7XHJcbmltcG9ydCBDb250ZW50T3B0aW9uIGZyb20gXCIuL29wdGlvbnMvQ29udGVudE9wdGlvblwiO1xyXG5pbXBvcnQgVGVtbWVJZHNPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9UZW1tZUlkc09wdGlvblwiO1xyXG5pbXBvcnQgVGVtcGxhdGVzT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvVGVtcGxhdGVzT3B0aW9uXCI7XHJcbmltcG9ydCBDbGFzc2VzT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvQ2xhc3Nlc09wdGlvblwiO1xyXG5pbXBvcnQgQ2hpbGROb2Rlc09wdGlvbiBmcm9tIFwiLi9vcHRpb25zL0NoaWxkcmVuTm9kZXNPcHRpb25cIjtcclxuaW1wb3J0IEF0dHJpYnV0ZXNPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9BdHRyaWJ1dGVzT3B0aW9uXCI7XHJcbmltcG9ydCBEYXRhc2V0T3B0aW9uIGZyb20gXCIuL29wdGlvbnMvRGF0YXNldE9wdGlvblwiO1xyXG5pbXBvcnQgRnJvbU9wdGlvbiBmcm9tIFwiLi9vcHRpb25zL0Zyb21PcHRpb25cIjtcclxuXHJcblxyXG4vKipcclxuICogQWxsIHRoZSBnbG9iYWwgb3B0aW9ucy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBvcHRpb25zOiBBcnJheTxPcHRpb24+ID0gW1xyXG4gICAgbmV3IFJlZk9wdGlvbigpLFxyXG4gICAgbmV3IE5hbWVPcHRpb24oKSxcclxuICAgIG5ldyBJZE9wdGlvbigpLFxyXG4gICAgbmV3IENvbnRlbnRPcHRpb24oKSxcclxuICAgIG5ldyBUZW1tZUlkc09wdGlvbigpLFxyXG4gICAgbmV3IFRlbXBsYXRlc09wdGlvbigpLFxyXG4gICAgbmV3IENsYXNzZXNPcHRpb24oKSxcclxuICAgIG5ldyBDaGlsZE5vZGVzT3B0aW9uKCksXHJcbiAgICBuZXcgQXR0cmlidXRlc09wdGlvbigpLFxyXG4gICAgbmV3IERhdGFzZXRPcHRpb24oKSxcclxuICAgIG5ldyBGcm9tT3B0aW9uKClcclxuXTtcclxuXHJcblxyXG4vKipcclxuICogVGhlIG9mIHRoZSBvcHRpb25zIGF2YWlsYWJsZSAoaW5jbHVkaW5nIHN1Yi1vcHRpb25zKS5cclxuICovXHJcbmV4cG9ydCBjb25zdCBhbGxPcHRpb25zID0gZ2V0QWxsT3B0aW9ucygpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgb3B0aW9ucyB0aGF0IGFyZSBub3QgYWxsb3dlZCBmb3IgdGVtcGxhdGVzLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGZvcmJpZGRlbk9wdGlvbnM6IEFycmF5PHN0cmluZz4gPSBbJ25hbWUnLCAnY2hpbGROb2RlcycsICd0ZW1wbGF0ZXMnXTtcclxuXHJcblxyXG4vKipcclxuICogR2V0cyBhbGwgdGhlIHN1Yi1vcHRpb25zIG9mIGFuIG9wdGlvbi5cclxuICogXHJcbiAqIEBwYXJhbSBvcHRpb24gVGhlIHBhcmVudCBvcHRpb24ncyBuYW1lLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN1Yk9wdGlvbnMob3B0aW9uOiBzdHJpbmcpOiBBcnJheTxPcHRpb24+IHtcclxuXHJcbiAgICBjb25zdCBzdWJPcHRpb25zOiBBcnJheTxhbnk+ID0gW107XHJcblxyXG4gICAgLy8gTG9vcGluZyB0aHJvdWdoIGFsbCBvZiB0aGUgb3B0aW9ucy5cclxuICAgIGFsbE9wdGlvbnMuZm9yRWFjaCgob3B0OiBPcHRpb24pID0+IHtcclxuXHJcbiAgICAgICAgaWYgKCdrZXlzJyBpbiBvcHQgJiYgKDxPcHRpb24+b3B0KS5sYWJlbCA9PT0gb3B0aW9uKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiAoPElLZXlzPm9wdCkua2V5cykge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWJPcHRpb24gPSAoPElLZXlzPm9wdCkua2V5c1trZXldO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFB1c2hpbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICBzdWJPcHRpb25zLnB1c2goc3ViT3B0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIFJldHVybmluZyB0aGUgZm91bmQgc3ViLW9wdGlvbnMuXHJcbiAgICByZXR1cm4gc3ViT3B0aW9ucztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGFsbCBvZiB0aGUgb3B0aW9ucyBhbmQgc3ViLW9wdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBbGxPcHRpb25zKCk6IEFycmF5PE9wdGlvbj4ge1xyXG5cclxuICAgIGxldCBhbGxPcHRpb25zOiBBcnJheTxPcHRpb24+ID0gW107XHJcblxyXG4gICAgb3B0aW9ucy5mb3JFYWNoKChvcHQ6IE9wdGlvbikgPT4ge1xyXG5cclxuICAgICAgICBhbGxPcHRpb25zLnB1c2gob3B0KTtcclxuXHJcbiAgICAgICAgaWYgKCdrZXlzJyBpbiBvcHQpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEdldHRpbmcgYWxsIG9mIHRoZSBzdWItb3B0aW9ucy5cclxuICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9uczogQXJyYXk8T3B0aW9uPiA9IGdldEFsbFN1Yk9wdGlvbnMob3B0KTtcclxuXHJcbiAgICAgICAgICAgIGFsbE9wdGlvbnMgPSBhbGxPcHRpb25zLmNvbmNhdChzdWJPcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gYWxsT3B0aW9ucztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGFsbCB0aGUgc3ViLW9wdGlvbnMgb2YgYW4gb3B0aW9uLlxyXG4gKiBcclxuICogQHBhcmFtIG9wdCBUaGUgb3B0aW9uIHRvIGdldCB0aGUgc3ViLW9wdGlvbnMgb2YuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBbGxTdWJPcHRpb25zKG9wdGlvbjogT3B0aW9uKTogQXJyYXk8T3B0aW9uPiB7XHJcblxyXG4gICAgbGV0IGFsbFN1Yk9wdGlvbnM6IEFycmF5PE9wdGlvbj4gPSBbXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiAoPGFueT5vcHRpb24pLmtleXMpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgc3ViT3B0aW9uOiBPcHRpb24gPSAoPGFueT5vcHRpb24pLmtleXNba2V5XTtcclxuXHJcbiAgICAgICAgYWxsU3ViT3B0aW9ucy5wdXNoKHN1Yk9wdGlvbik7XHJcblxyXG4gICAgICAgIGlmICgna2V5cycgaW4gc3ViT3B0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvcHRzOiBBcnJheTxPcHRpb24+ID0gZ2V0QWxsU3ViT3B0aW9ucyhzdWJPcHRpb24pO1xyXG5cclxuICAgICAgICAgICAgYWxsU3ViT3B0aW9ucyA9IGFsbFN1Yk9wdGlvbnMuY29uY2F0KG9wdHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWxsU3ViT3B0aW9ucztcclxufVxyXG4iLCIvKipcclxuICogVGVtbWUncyBlcnJvciBpbnRlcmZhY2UuXHJcbiAqL1xyXG5pbnRlcmZhY2UgSVRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICByZWFkb25seSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIG1lc3NhZ2U6IHN0cmluZztcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBUZW1tZSdzIGN1c3RvbSBlcnJvcnMuXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1teUVycm9yIGV4dGVuZHMgRXJyb3IgaW1wbGVtZW50cyBJVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcgPSAnVGVtbXlFcnJvcic7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIlRlbW1lIGlzbid0IGZlZWxpbmcgZ29vZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKCk7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgdGVtcGxhdGVcclxuICogaGFzIGEgZm9yYmlkZGVuIG9wdGlvbi5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQSB0ZW1wbGF0ZSBoYXMgYW4gaW52YWxpZCBvcHRpb25cIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG9wdGlvbiBUaGUgaW52YWxpZCBvcHRpb24ncyBuYW1lLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb246IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYOKAnCR7b3B0aW9ufeKAnSBpcyBub3QgYSB2YWxpZCBvcHRpb24gdG8gdXNlIGluIHRlbXBsYXRlc2A7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gb3B0aW9uLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYW4gb3B0aW9uXHJcbiAqIGlzIG5vdCB2YWxpZC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZE9wdGlvbk5hbWVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkT3B0aW9uTmFtZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkFuIG9wdGlvbiBpcyBub3QgdmFsaWRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG9wdGlvbiBUaGUgaW52YWxpZCBvcHRpb24ncyBuYW1lLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb246IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYOKAnCR7b3B0aW9ufeKAnSBpcyBub3QgYSB2YWxpZCBvcHRpb25gO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbi5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGFuIG9wdGlvblxyXG4gKiBpcyBub3Qgb2YgYSB2YWxpZCBkYXRhIHR5cGUuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRPcHRpb25UeXBlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZE9wdGlvblR5cGVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBbiBvcHRpb24gZG9lc24ndCBoYXZlIGEgdmFsaWQgdmFsdWUgdHlwZVwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uIFRoZSBpbnZhbGlkIG9wdGlvbidzIG5hbWUuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGludmFsaWQgb3B0aW9uJ3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbjogc3RyaW5nLCB0eXBlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGBUaGUg4oCcJHtvcHRpb2594oCdIG9wdGlvbiBkb2Vzbid0IGFjY2VwdCB2YWx1ZXMgb2YgdHlwZSDigJwke3R5cGV94oCdYDtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb24ubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhbiBvcHRpb25cclxuICogaXMgbm90IG9mIGEgdmFsaWQgdmFsdWUuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRPcHRpb25WYWx1ZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRPcHRpb25WYWx1ZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkFuIG9wdGlvbiBkb2Vzbid0IGhhdmUgYSB2YWxpZCB2YWx1ZVwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uIFRoZSBpbnZhbGlkIG9wdGlvbidzIG5hbWUuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGludmFsaWQgb3B0aW9uJ3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIENvbnN0cnVjdGluZyB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBgVGhlIOKAnCR7b3B0aW9ufeKAnSBvcHRpb24gZG9lc24ndCBhY2NlcHQg4oCcJHt2YWx1ZX3igJ0gYXMgYSB2YWx1ZWA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gb3B0aW9uLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBzdWItb3B0aW9uXHJcbiAqIGlzIG5vdCB2YWxpZC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkEgc3ViLW9wdGlvbiBpcyBub3QgdmFsaWRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG9wdGlvbiBUaGUgcGFyZW50IG9wdGlvbidzIG5hbWUuXHJcbiAgICAgKiBAcGFyYW0gc3ViT3B0aW9uIFRoZSBpbnZhbGlkIHN1Yi1vcHRpb24ncyBuYW1lLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb246IHN0cmluZywgc3ViT3B0aW9uOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGBUaGUg4oCcJHtvcHRpb2594oCdIG9wdGlvbiBkb2Vzbid0IG5vdCByZWNvZ25pemUg4oCcJHtzdWJPcHRpb2594oCdIGFzIGEgdmFsaWQgc3ViLW9wdGlvbmA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gb3B0aW9uLmxlbmd0aCA+IDAgfHwgc3ViT3B0aW9uLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBzdWItcHRpb25cclxuICogaXMgbm90IG9mIGEgdmFsaWQgZGF0YSB0eXBlLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRTdWJPcHRpb25UeXBlRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQSBzdWItb3B0aW9uIGRvZXNuJ3QgaGF2ZSBhIHZhbGlkIHZhbHVlIHR5cGVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHN1Yk9wdGlvbiBUaGUgaW52YWxpZCBzdWItb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgaW52YWxpZCBzdWItb3B0aW9uJ3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHN1Yk9wdGlvbjogc3RyaW5nLCB0eXBlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGBUaGUg4oCcJHtzdWJPcHRpb2594oCdIHN1Yi1vcHRpb24gZG9lc24ndCBhY2NlcHQgdmFsdWVzIG9mIHR5cGUg4oCcJHt0eXBlfeKAnWA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gc3ViT3B0aW9uLmxlbmd0aCA+IDAgfHwgdHlwZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgc3ViLW9wdGlvblxyXG4gKiBpcyBub3Qgb2YgYSB2YWxpZCB2YWx1ZS5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQSBzdWItb3B0aW9uIGRvZXNuJ3QgaGF2ZSBhIHZhbGlkIHZhbHVlXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBzdWJPcHRpb24gVGhlIGludmFsaWQgc3ViLW9wdGlvbidzIG5hbWUuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGludmFsaWQgc3ViLW9wdGlvbidzIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzdWJPcHRpb246IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSDigJwke3N1Yk9wdGlvbn3igJ0gc3ViLW9wdGlvbiBkb2Vzbid0IGFjY2VwdCDigJwke3ZhbHVlfeKAnSBhcyBhIHZhbHVlYDtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBzdWJPcHRpb24ubGVuZ3RoID4gMCB8fCB2YWx1ZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgXHJcbiAqIGZyb20gb3B0aW9uIGlzIG5vdCB2YWxpZFxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBIHJlZmVyZW5jaW5nIG9wdGlvbiBpcyBub3QgdmFsaWRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgXHJcbiAqIHJlZiBvcHRpb24gc3RhcnRzIHdpdGggdGhlIHN5bWJvbGUg4oCcQOKAnS5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwi4oCccmVm4oCdIG9wdGlvbnMgbXVzdCBub3QgYmVnaW4gd2l0aCB0aGUg4oCcQOKAnSBzeW1ib2xcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgcmVmIG9wdGlvblxyXG4gKiByZWZlcmVuY2VzIGFuIGludmFsaWQgb2JqZWN0LlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkUmVmZXJlbmNlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFJlZmVyZW5jZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkEgcmVmZXJlbmNlIGlzIGludmFsaWRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZSBUaGUgaW52YWxpZCByZWZlcmVuY2UuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJlZmVyZW5jZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gcmVmZXJlbmNlLmxlbmd0aCA+IDAgPyBg4oCcJHtyZWZlcmVuY2V94oCdIGlzIGFuIGludmFsaWQgcmVmZXJlbmNlYCA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgdGVtcGxhdGVcclxuICogaXMgaW52YWxpZCAoZG9lc24ndCBoYXZlIGEg4oCccmVm4oCdIG9wdGlvbikuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRUZW1wbGF0ZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRUZW1wbGF0ZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkEgdGVtcGxhdGUgZG9lcyBub3QgaGF2ZSBhIOKAnHJlZuKAnSBvcHRpb25cIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBIZXJlIGdvZXMncyBldmVyeXRoaW5nIHRoYXQgSUQtZmllc1xyXG4gKiBhbnl0aGluZyB0byBkbyB3aXRoIHRoZSBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgeyBIaWVyYXJjaHkgfSBmcm9tIFwiLi9tb2RlbHMvSGllcmFyY2h5XCI7XHJcbmltcG9ydCB7IFRlbXBsYXRlIH0gZnJvbSBcIi4vbW9kZWxzL1RlbXBsYXRlXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIEFzc2lnbnMgdGVtbWVJZHMgdG8gYSBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0byBhc3NpbmcgYSB0ZW1tZUlkIHRvLlxyXG4gKiBAcGFyYW0gdGVtbWVJZHMgVGhlIHNlcmllcyBvZiB0ZW1tZUlkcyBsZWFkaW5nIHRvIHRoZSBjdXJyZW50IGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqIEBwYXJhbSBtb2RlIFRoZSBtb2RlIG9mIHRoZSB0ZW1tZUlkLCBpZiBpdCdzIGZhbHNlLCB0aGUgdGVtbWVJZCB3aWxsIGJlIG9mIDYgY2hhcmFjdGVyc1xyXG4gKiBpbmRpY2F0aW5nIGl0J3MgYSBoaWVyYXJjaHkgb2JqZWN0LCBpZiBpdCdzIHRydWUsIGl0J2xsIGhhdmUgNCBjaGFyYWN0ZXJzIGluZGljYXRpbmcgaXQnc1xyXG4gKiBhIHRlbXBsYXRlLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlkZnkoaGllcmFyY2h5OiBhbnksIHRlbW1lSWRzOiBBcnJheTxzdHJpbmc+ID0gW10sIG1vZGU6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG4gICAgXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBHZW5lcmF0aW5nIGEgdGVtbWUgSWQuXHJcbiAgICAgICAgY29uc3QgdGVtbWVJZDogc3RyaW5nID0gZ2VuZXJhdGVUZW1tZUlkKG1vZGUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFzc2lnbmluZyBhIHRlbW1lSWQuXHJcbiAgICAgICAgaGllcmFyY2h5LnRlbW1lSWRzID0gWy4uLnRlbW1lSWRzLCB0ZW1tZUlkXTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVja2luZyBvZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5KSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBoaWVyYXJjaHkuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZDogT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlkZnkoY2hpbGQsIGhpZXJhcmNoeS50ZW1tZUlkcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIC8vIENoZWNraW5nIG9mIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgdGVtcGxhdGVzLlxyXG4gICAgICAgIGlmICgndGVtcGxhdGVzJyBpbiBoaWVyYXJjaHkpIHtcclxuICAgIFxyXG4gICAgICAgICAgICBoaWVyYXJjaHkudGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBPYmplY3QpID0+IHtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaWRmeSh0ZW1wbGF0ZSwgaGllcmFyY2h5LnRlbW1lSWRzLCB0cnVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2goZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIHRlbW1lSWQgb2YgYSBoaWVyYXJjaHkgb3IgdGVtcGxhdGUgb2JqZWN0LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IHRvIGdldCB0aGUgdGVtbWVJZCBvZi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW1tZUlkIChoaWVyYXJjaHk6IEhpZXJhcmNoeSB8IFRlbXBsYXRlKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBoaWVyYXJjaHkudGVtbWVJZHNbaGllcmFyY2h5LnRlbW1lSWRzLmxlbmd0aCAtIDFdO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHVuaXF1ZSB0ZW1tZUlkLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVUZW1tZUlkKG1vZGU6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG5cclxuICAgIGNvbnN0XHJcbiAgICAgICAgY2hhcnMgPSBcIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLFxyXG4gICAgICAgIG1heCA9IChtb2RlID09PSBmYWxzZSkgPyA2IDogNDtcclxuXHJcbiAgICBsZXQga2V5ID0gJyc7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGk8bWF4OyBpKyspIHtcclxuXHJcbiAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgaW5kZXggPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogY2hhcnMubGVuZ3RoKSksXHJcbiAgICAgICAgICAgIHVwcGVyY2FzZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xyXG5cclxuICAgICAgICBrZXkgKz0gdXBwZXJjYXNlID09PSAxID8gY2hhcnNbaW5kZXhdLnRvVXBwZXJDYXNlKCkgOiBjaGFyc1tpbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGtleTtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgdGVtcGxhdGVcclxuICogaGFzIGlzIHJlZmVyZW5jaW5nIGEgbm9uLXRlbXBsYXRlIG9iamVjdC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFRlbXBsYXRlUmVmZXJlbmNpbmdFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIlRlbXBsYXRlcyBjYW4gb25seSByZWZlcmVuY2Ugb3RoZXIgdGVtcGxhdGVzLlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gcmVmIFRoZSB0ZW1wbGF0ZSdzIHJlZmVyZW5jZS5cclxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHJlZmVyZW5jZSB0YXJnZXQuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJlZjogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSB0ZW1wbGF0ZSB3aXRoIHRoZSByZWZlcmVuY2Ug4oCcJHtyZWZ94oCdIGlzIHRyeWluZyB0byByZWZlcmVuY2Ug4oCcJHt0YXJnZXR94oCdIGEgbm9uLXRlbXBsYXRlIG9iamVjdGA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gcmVmLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBhIGhpZXJhcmNoeSBvYmplY3lcclxuICogaXMgcmVmZXJlbmNpbmcgYW4gZWxlbWVudCBvdXQgb2YgaXRzIHNjb3BlLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiUmVmZXJlbmNlT3V0T2ZTY29wZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkFuIG9iamVjdCBpcyByZWZlcmVuY2luZyBhbiBlbGVtZW50IG91dCBvZiBpdHMgc2NvcGVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIG1vZHVsZSByZXNwb25zaWJsZSBmb3IgdmFsaWRhdGluZyB0aGUgaW5wdXQuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCB7IG9wdGlvbnMsIGZvcmJpZGRlbk9wdGlvbnMsIGdldFN1Yk9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcbmltcG9ydCBJbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRPcHRpb25OYW1lRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRPcHRpb25OYW1lRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRPcHRpb25UeXBlRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRPcHRpb25UeXBlRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRPcHRpb25WYWx1ZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRSZWZlcmVuY2VPcHRpb25WYWx1ZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFJlZmVyZW5jZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkUmVmZXJlbmNlRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRUZW1wbGF0ZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVFcnJvclwiO1xyXG5pbXBvcnQgeyBSZWZlcmVuY2VUeXBlIH0gZnJvbSBcIi4vcmVmZXJlbmNlclwiO1xyXG5pbXBvcnQgeyBnZXRUZW1tZUlkIH0gZnJvbSBcIi4vaWRmaWVyXCI7XHJcbmltcG9ydCB7IEhpZXJhcmNoeSB9IGZyb20gXCIuL21vZGVscy9IaWVyYXJjaHlcIjtcclxuaW1wb3J0IEludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3JcIjtcclxuaW1wb3J0IFJlZmVyZW5jZU91dE9mUmFuZ2VFcnJvciBmcm9tIFwiLi9lcnJvcnMvUmVmZXJlbmNlT3V0T2ZTY29wZUVycm9yXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhbiBvYmplY3QgaXMgYSB2YWxpZCBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgb2JqZWN0IHRvIGNoZWNrLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzVmFsaWRIaWVyYXJjaHkgPSAoaGllcmFyY2h5OiBPYmplY3QpOiBib29sZWFuID0+IGhpZXJhcmNoeSAhPSBudWxsICYmIHR5cGVvZiBoaWVyYXJjaHkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGhpZXJhcmNoeSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhbiBvYmplY3QgaXMgYSB2YWxpZCBIVE1MIGVsZW1lbnQuXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSBvYmplY3QgdG8gY2hlY2suXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNWYWxpZEhUTUxFbGVtZW50ID0gKHRhcmdldDogSFRNTEVsZW1lbnQpOiBib29sZWFuID0+IHRhcmdldCAhPSBudWxsICYmIHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIG9wdGlvbnMgaW4gYSBoaWVyYXJjaHkgb2JqZWN0IGZvciBhbnlcclxuICogb3B0aW9ucyBpdCBoYXMgb3IgdmFsdWVzIGl0IGNvbnRhaW5zLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0byB2YWxpZGF0ZSB0aGUgb3B0aW9ucyBmb3IuXHJcbiAqIFxyXG4gKiBAdGhyb3dzIEludmFsaWRPcHRpb25OYW1lRXJyb3IsIEludmFsaWRPcHRpb25UeXBlRXJyb3IsIEludmFsaWRPcHRpb25WYWx1ZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvciwgSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoaGllcmFyY2h5OiBhbnkpOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBMb29waW5nIHRocm91Z2ggdGhlIGhpZXJhcmNoeSdzIG9wdGlvbnMuXHJcbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gaW4gaGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdPcHRpb246IE9wdGlvbiA9IDxPcHRpb24+b3B0aW9ucy5maWx0ZXIoKG9wdDogT3B0aW9uKSA9PiBvcHQubGFiZWwgPT09IG9wdGlvbilbMF0sXHJcbiAgICAgICAgICAgICAgICBvcHRpb25WYWx1ZTogYW55ID0gaGllcmFyY2h5W29wdGlvbl07XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBvcHRpb24ncyBuYW1lLlxyXG4gICAgICAgICAgICBpZiAoT3B0aW9uLnZhbGlkYXRlT3B0aW9uTmFtZShtYXRjaGluZ09wdGlvbikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wdGlvbk5hbWVFcnJvcihvcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBvcHRpb24ncyB0eXBlLlxyXG4gICAgICAgICAgICBjb25zdCB0eXBlVmFsaWRhdGlvbjogeyB2YWxpZDogYm9vbGVhbiwgdHlwZTogc3RyaW5nIH0gPSBPcHRpb24udmFsaWRhdGVPcHRpb25UeXBlKG9wdGlvblZhbHVlLCBtYXRjaGluZ09wdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZVZhbGlkYXRpb24udmFsaWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wdGlvblR5cGVFcnJvcihvcHRpb24sIHR5cGVWYWxpZGF0aW9uLnR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBvcHRpb24ncyB2YWx1ZS5cclxuICAgICAgICAgICAgaWYgKE9wdGlvbi52YWxpZGF0ZU9wdGlvblZhbHVlKG9wdGlvblZhbHVlLCBtYXRjaGluZ09wdGlvbikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wdGlvblZhbHVlRXJyb3Iob3B0aW9uLCBvcHRpb25WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlcGVhdGluZyB0aGUgc2FtZSBjaGVjayBmb3Igb3B0aW9ucyB0aGF0IGhhdmUga2V5cy5cclxuICAgICAgICAgICAgaWYgKCdrZXlzJyBpbiBtYXRjaGluZ09wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIG9wdGlvbidzIHN1Yi1vcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9ucyA9ICg8SUtleXM+bWF0Y2hpbmdPcHRpb24pLmtleXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgc3ViLW9wdGlvbnMuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN1Yk9wdGlvbnMob3B0aW9uLCBvcHRpb25WYWx1ZSwgc3ViT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZhbGlkYXRpbmcgcmVmZXJlbmNlcy5cclxuICAgICAgICBpZiAodmFsaWRhdGVSZWZlcmVuY2luZ09wdGlvbihoaWVyYXJjaHkpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3IoXCJUaGUg4oCcZnJvbeKAnSBvcHRpb24gbXVzdCBhbHdheXMgaGF2ZSBhIOKAnHJlZuKAnSBzdWItb3B0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgY29udGFpbnMgYW55IHRlbXBsYXRlcy5cclxuICAgICAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkudGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBPYmplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlVGVtcGxhdGVzKHRlbXBsYXRlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXBlYXRpbmcgdGhlIHNhbWUgY2hlY2sgZm9yIHRoZSBoaWVyYXJjaHkncyBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoJ2NoaWxkTm9kZXMnIGluIGhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IE9iamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVPcHRpb25zKGNoaWxkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHRlbXBsYXRlcyBpbiBhIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGVtcGxhdGUgVGhlIHRlbXBsYXRlIG9iamVjdCB0byB2YWxpZGF0ZS5cclxuICogXHJcbiAqIEB0aHJvd3MgSW52YWxpZE9wdGlvbk5hbWVFcnJvciwgSW52YWxpZE9wdGlvblR5cGVFcnJvciwgSW52YWxpZE9wdGlvblZhbHVlRXJyb3IsIEludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IsIEludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IsIEludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yLCBJbnZhbGlkVGVtcGxhdGVFcnJvciwgSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRlbXBsYXRlcyh0ZW1wbGF0ZTogYW55KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgaWYgKCEoJ3JlZicgaW4gdGVtcGxhdGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkVGVtcGxhdGVFcnJvcihcIlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb3BpbmcgdGhyb3VnaCB0aGUgb3B0aW9ucyBvZiB0aGUgdGVtcGxhdGUuXHJcbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gaW4gdGVtcGxhdGUpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSB0ZW1wbGF0ZSBjb250YWlucyBhbnkgaW52YWxpZCBvcHRpb25zLlxyXG4gICAgICAgICAgICBpZiAoZm9yYmlkZGVuT3B0aW9ucy5pbmRleE9mKG9wdGlvbikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yKG9wdGlvbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbnModGVtcGxhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHJlZmVyZW5jZXMgaW4gdGhlIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIHZhbGlkYXRlIHRoZSByZWZlcmVuY2VzIGZvci5cclxuICogQHBhcmFtIHJlZmVyZW5jZXMgVGhlIHZhbGlkIHJlZmVybmNlcy5cclxuICogXHJcbiAqIEB0aHJvd3MgSW52YWxpZFJlZmVyZW5jZUVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSZWZlcmVuY2VzKGhpZXJhcmNoeTogYW55LCByZWZlcmVuY2VzOiBBcnJheTxSZWZlcmVuY2VUeXBlPik6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSDigJxyZWbigJ0gb3B0aW9uIHN0YXJ0cyB3aXRoIHRoZSDigJxA4oCdIHN5bWJvbC5cclxuICAgICAgICBpZiAoaGllcmFyY2h5LnJlZlswXSA9PT0gJ0AnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvcihcIlwiKTtcclxuICAgICAgICB9IFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBvYmplY3QgaXMgcmVmZXJlbmNpbmcgYW4gb3V0ZXIgZWxlbWVudC5cclxuICAgICAgICBpZiAoaGllcmFyY2h5LmZyb20ucmVmWzBdID09PSAnQCcpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rvcjogc3RyaW5nID0gKDxzdHJpbmc+aGllcmFyY2h5LmZyb20ucmVmKS5zdWJzdHJpbmcoMSksXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvcihgTm8gb3V0ZXIgZWxlbWVudCBjb3JyZXNwb25kcyB0byB0aGUgc2VsZWN0b3Ig4oCcJHtzZWxlY3Rvcn3igJ1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVja2luZyBvZiB0aGUgcmVmZXJlbmNlIGV4aXN0cy5cclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUmVmZXJlbmNlKGhpZXJhcmNoeSwgcmVmZXJlbmNlcykgPT09IGZhbHNlICYmIGhpZXJhcmNoeS5mcm9tLnJlZiAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZWZlcmVuY2VFcnJvcihoaWVyYXJjaHkuZnJvbS5yZWYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBIaWVyYXJjaHkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJlZmVyZW5jZXMoY2hpbGQsIHJlZmVyZW5jZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgdGVtcGxhdGVzLlxyXG4gICAgICAgIGlmICgndGVtcGxhdGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LnRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkudGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJlZmVyZW5jZXModGVtcGxhdGUsIHJlZmVyZW5jZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyBhIHBhc3NlZCByZWZlcmVuY2UuXHJcbiAqIFxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgdG8gdmFsaWRhdGUuXHJcbiAqIEBwYXJhbSByZWZlcmVuY2VzIFRoZSB2YWxpZCByZWZlcmVuY2VzLlxyXG4gKi9cclxuY29uc3QgdmFsaWRhdGVSZWZlcmVuY2UgPSAoaGllcmFyY2h5OiBhbnksIHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+KTogYm9vbGVhbiA9PiByZWZlcmVuY2VzLmZpbHRlcigocmVmOiBSZWZlcmVuY2VUeXBlKSA9PiByZWYuaGllcmFyY2h5LnJlZiA9PT0gaGllcmFyY2h5LmZyb20ucmVmICYmIGdldFRlbW1lSWQoaGllcmFyY2h5KSAhPT0gZ2V0VGVtbWVJZChyZWYuaGllcmFyY2h5KSlbMF0gIT0gbnVsbDtcclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHdoZXRoZXIgdGVtcGxhdGVzIGFyZSByZWZlcmVuY2luZyBub24tdGVtcGxhdGUgZWxlbWVudFxyXG4gKiBvciBub3QsIGluIHdoaWNoIGNhc2UsIGFuIGVycm9yIGlzIHRocm93bi5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSB0byB2YWxpZGF0ZSB0aGUgdGVtcGxhdGUgaW5oZXJpdGFuY2UgZm9yLlxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlcyBUaGVyZSB2YWxpZCByZWZlcmVuY2VzLlxyXG4gKiBcclxuICogQHRocm93cyBJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUZW1wbGF0ZVJlZmVyZW5jZShoaWVyYXJjaHk6IGFueSwgcmVmZXJlbmNlczogQXJyYXk8UmVmZXJlbmNlVHlwZT4pOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBHZXR0aW5nIHRoZSB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGVzID0gaGllcmFyY2h5LnRlbXBsYXRlcztcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlcmUgYXJlIGFueSB2YWxpZCB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKHRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICB0ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSB0ZW1wbGF0ZSdzIHJlZmVyZW5jaW5nIHZhbHVlIGlzIHZhbGlkLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmZyb20ucmVmLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlZEVsZW1lbnQ6IGFueSA9IHJlZmVyZW5jZXMuZmlsdGVyKChyZWY6IFJlZmVyZW5jZVR5cGUpID0+ICg8SGllcmFyY2h5PnJlZi5oaWVyYXJjaHkpLnJlZiA9PT0gdGVtcGxhdGUuZnJvbS5yZWYpWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RlbXBsYXRlOiBib29sZWFuID0gZ2V0VGVtbWVJZChyZWZlcmVuY2VkRWxlbWVudC5oaWVyYXJjaHkpLmxlbmd0aCA9PT0gNDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RlbXBsYXRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yKHRlbXBsYXRlLnJlZiwgdGVtcGxhdGUuZnJvbS5yZWYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoaWVyYXJjaHkuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZDogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICB2YWxpZGF0ZVRlbXBsYXRlUmVmZXJlbmNlKGNoaWxkLCByZWZlcmVuY2VzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhdGNoKGUpXHJcbiAgICB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHdoZXRoZXIgYSBoaWVyYXJjaHkgb2JqZWN0IGlzIHJlZmVyZW5jaW5nIGl0cyBjaGlsZC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSB0byB2YWxpZGF0ZS5cclxuICogQHBhcmFtIHJlZmVyZW5jZXMgVGhlcmUgdmFsaWQgcmVmZXJlbmNlcy5cclxuICogQHBhcmFtIGRlcHRoIFRoZSBkZXB0aCBvZiB0aGUgdmFsaWRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVBhcmVudFRvQ2hpbGRSZWZlcmVuY2UoaGllcmFyY2h5OiBhbnksIHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+LCBkZXB0aDogbnVtYmVyID0gMCk6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZjogc3RyaW5nID0gaGllcmFyY2h5LmZyb20ucmVmO1xyXG5cclxuICAgICAgICAvLyBJbmNyZW1lbnRpbmcgdGhlIGRlcHRoXHJcbiAgICAgICAgZGVwdGgrKztcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIHJlZmVyZW5jZSBpcyB2YWxpZC5cclxuICAgICAgICBpZiAocmVmICE9PSBcIlwiICYmIHJlZlswXSAhPT0gJ0AnKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSByZWZlcmVuY2VkIGhpZXJhcmNoeS5cclxuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlZEhpZXJhcmNoeTogUmVmZXJlbmNlVHlwZSA9IHJlZmVyZW5jZXMuZmlsdGVyKChyZWZPYmplY3Q6IFJlZmVyZW5jZVR5cGUpID0+ICg8SGllcmFyY2h5PnJlZk9iamVjdC5oaWVyYXJjaHkpLnJlZiA9PT0gcmVmICYmIGRlcHRoID49IHJlZk9iamVjdC5kZXB0aClbMF07XHJcblxyXG4gICAgICAgICAgICBpZiAocmVmZXJlbmNlZEhpZXJhcmNoeSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlT3V0T2ZSYW5nZUVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBIaWVyYXJjaHkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVBhcmVudFRvQ2hpbGRSZWZlcmVuY2UoY2hpbGQsIHJlZmVyZW5jZXMsIGRlcHRoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IHRlbXBsYXRlcy5cclxuICAgICAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS50ZW1wbGF0ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LnRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZTogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVQYXJlbnRUb0NoaWxkUmVmZXJlbmNlKHRlbXBsYXRlLCByZWZlcmVuY2VzLCBkZXB0aCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuICAgIGNhdGNoKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHN1Yi1vcHRpb25zIG9mIGFub3RoZXIgb3B0aW9uLlxyXG4gKiBAcGFyYW0gb3B0aW9uTmFtZSBUaGUgbmFtZSBvZiB0aGUgb3B0aW9uIHRvIHZhbGlkYXRlIHRoZSBzdWItb3B0aW9ucyBmb3IuIFxyXG4gKiBAcGFyYW0gb3B0aW9uVmFsdWUgVGhlIHN1Yi1vcHRpb25zIHRvIHZhbGlkYXRlLlxyXG4gKiBAcGFyYW0gc3ViT3B0aW9ucyBUaGUgZXhwZWN0ZWQgc3ViLW9wdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZVN1Yk9wdGlvbnMob3B0aW9uTmFtZTogc3RyaW5nLCBvcHRpb25WYWx1ZTogYW55LCBzdWJPcHRpb25zOiBJS2V5cyk6IHZvaWQge1xyXG5cclxuICAgIC8vIExvb3BpbmcgdGhyb3VnaCB0aGUgZXhwZWN0ZWQgc3ViLW9wdGlvbnMuXHJcbiAgICBmb3IgKGNvbnN0IHN1Yk9wdGlvbiBpbiBvcHRpb25WYWx1ZSkge1xyXG5cclxuICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICBtYXRjaGluZ1N1Yk9wdGlvbjogT3B0aW9uID0gZ2V0U3ViT3B0aW9ucyhvcHRpb25OYW1lKS5maWx0ZXIoKHN1Yk9wdGlvbnM6IE9wdGlvbikgPT4gc3ViT3B0aW9ucy5sYWJlbCA9PT0gc3ViT3B0aW9uKVswXSxcclxuICAgICAgICAgICAgc3ViT3B0aW9uVmFsdWU6IGFueSA9IG9wdGlvblZhbHVlW3N1Yk9wdGlvbl07XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIGEgc3ViLW9wdGlvbiBpcyBpbiB0aGUgcGFyZW50IG9wdGlvbi5cclxuICAgICAgICBpZiAoc3ViT3B0aW9uIGluIHN1Yk9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFZhbGlkYXRpbmcgdGhlIHN1Yi1vcHRpb24ncyBuYW1lLlxyXG4gICAgICAgICAgICBpZiAoT3B0aW9uLnZhbGlkYXRlT3B0aW9uTmFtZShtYXRjaGluZ1N1Yk9wdGlvbikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvcihvcHRpb25OYW1lLCBzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBzdWItb3B0aW9ucydzIGRhdGEgdHlwZS5cclxuICAgICAgICAgICAgY29uc3QgdHlwZVZhbGlkYXRpb246IHsgdmFsaWQ6IGJvb2xlYW4sIHR5cGU6IHN0cmluZyB9ID0gT3B0aW9uLnZhbGlkYXRlT3B0aW9uVHlwZShzdWJPcHRpb25WYWx1ZSwgbWF0Y2hpbmdTdWJPcHRpb24pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVWYWxpZGF0aW9uLnZhbGlkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTdWJPcHRpb25UeXBlRXJyb3Ioc3ViT3B0aW9uLCB0eXBlVmFsaWRhdGlvbi50eXBlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgc3ViLW9wdGlvbidzIHZhbHVlLlxyXG4gICAgICAgICAgICBpZiAoT3B0aW9uLnZhbGlkYXRlT3B0aW9uVmFsdWUoc3ViT3B0aW9uVmFsdWUsIG1hdGNoaW5nU3ViT3B0aW9uKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvcihzdWJPcHRpb24sIHN1Yk9wdGlvblZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCdrZXlzJyBpbiBtYXRjaGluZ1N1Yk9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIG9wdGlvbidzIHN1Yi1vcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9uVmFsdWUgPSBvcHRpb25WYWx1ZVtzdWJPcHRpb25dO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlU3ViT3B0aW9ucyhzdWJPcHRpb24sIHN1Yk9wdGlvblZhbHVlLCAoPElLZXlzPm1hdGNoaW5nU3ViT3B0aW9uKS5rZXlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTdWJPcHRpb25OYW1lRXJyb3Iob3B0aW9uTmFtZSwgc3ViT3B0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSByZWZlcmVuY2VzIGluIGEgaGllcmFyY2h5IG9iamVjdC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gdmFsaWRhdGUgdGhlIHJlZmVyZW5jZXMgZm9yLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVSZWZlcmVuY2luZ09wdGlvbihoaWVyYXJjaHk6IGFueSk6IGJvb2xlYW4ge1xyXG5cclxuICAgIGlmICgnZnJvbScgaW4gaGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgIHJldHVybiAncmVmJyBpbiBoaWVyYXJjaHkuZnJvbTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iLCIvKipcclxuICogV2hhdCdzIHJlc3BvbnNpYmxlIGZvciBzYW5pdGl6aW5nIHRoZSBpbnB1dFxyXG4gKiBhbmQgcG9wdWxhdGluZyB0aGUgZGVmYXVsdHMuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCB7IG9wdGlvbnMsIGZvcmJpZGRlbk9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFNhbml0aXplcyBhIGhpZXJhcmNoeSBvYmplY3QgaW50byBhbiBhcHJvcHJpYXRlIG9uZS5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gc2FuaXRpemUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemUoaGllcmFyY2h5OiBhbnkpOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBMb29waW5nIHRocm91Z2ggdGhlIGF2YWlsYWJsZSBvcHRpb25zLlxyXG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaCgob3B0OiBPcHRpb24pID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmICghKG9wdC5sYWJlbCBpbiBoaWVyYXJjaHkpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUG9wdWxhdGluZyBhIGRlZmF1bHQuXHJcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHlbb3B0LmxhYmVsXSA9IG9wdC5kZWZhdWx0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNhbml0aXppbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICBpZiAoJ2tleXMnIGluIG9wdCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiAoPElLZXlzPm9wdCkua2V5cykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9uOiBPcHRpb24gPSAoPElLZXlzPm9wdCkua2V5c1trZXldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FuaXRpemluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FuaXRpemVPcHRpb24oaGllcmFyY2h5Wyg8T3B0aW9uPm9wdCkubGFiZWxdLCBzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZpbmcgZHVwbGljYXRlcy5cclxuICAgICAgICBoaWVyYXJjaHkuY2xhc3NlcyA9IGhpZXJhcmNoeS5jbGFzc2VzLmZpbHRlcigoY2xzOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IGhpZXJhcmNoeS5jbGFzc2VzLmluZGV4T2YoY2xzKSA9PT0gaW5kZXgpO1xyXG5cclxuICAgICAgICAvLyBTb3J0aW5nIHRoZSBjbGFzc2VzLlxyXG4gICAgICAgIGhpZXJhcmNoeS5jbGFzc2VzLnNvcnQoKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBoYXMgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHNhbml0aXplKGNoaWxkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IGhhcyB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkudGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHNhbml0aXplVGVtcGxhdGUodGVtcGxhdGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFNhbml0aXplcyBhbiBvcHRpb24uXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIHNhbml0aXplIHRoZSBvcHRpb24gZm9yLlxyXG4gKiBAcGFyYW0gb3B0aW9uIFRoZSBvcHRpb24gdG8gc2FuaXRpemUuXHJcbiAqL1xyXG5mdW5jdGlvbiBzYW5pdGl6ZU9wdGlvbihoaWVyYXJjaHk6IGFueSwgb3B0aW9uOiBPcHRpb24pOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICBpZiAoIShvcHRpb24ubGFiZWwgaW4gaGllcmFyY2h5KSkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5W29wdGlvbi5sYWJlbF0gPSBvcHRpb24uZGVmYXVsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgna2V5cycgaW4gb3B0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiAoPElLZXlzPm9wdGlvbikua2V5cykge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViSGllcmFyY2h5OiBhbnkgPSBoaWVyYXJjaHlbKDxPcHRpb24+b3B0aW9uKS5sYWJlbF0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViT3B0aW9uID0gKDxJS2V5cz5vcHRpb24pLmtleXNba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICBzYW5pdGl6ZU9wdGlvbihzdWJIaWVyYXJjaHksIHN1Yk9wdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFNhbml0aXplcyB0ZW1wbGF0ZXMuXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGVtcGxhdGUgVGhlIHRlbXBsYXRlIHRvIHNhbml0aXplLlxyXG4gKi9cclxuZnVuY3Rpb24gc2FuaXRpemVUZW1wbGF0ZSh0ZW1wbGF0ZTogYW55KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gTG9vcGluZyB0aHJvdWdoIHRoZSBhbGxvd2VkIG9wdGlvbnMgaW4gdGVtcGxhdGVzLlxyXG4gICAgICAgIG9wdGlvbnNcclxuICAgICAgICAgICAgLmZpbHRlcigob3B0OiBPcHRpb24pID0+IGZvcmJpZGRlbk9wdGlvbnMuaW5kZXhPZihvcHQubGFiZWwpID09PSAtMSlcclxuICAgICAgICAgICAgLmZvckVhY2goKG9wdDogT3B0aW9uKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2tpbmcgb2YgdGhlIHRlbXBsYXRlIGRvZXNuJ3QgaGF2ZSBhIHNhaWQgb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgaWYgKCEob3B0LmxhYmVsIGluIHRlbXBsYXRlKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0aW5nIGEgZGVmYXVsdC5cclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVtvcHQubGFiZWxdID0gb3B0LmRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTYW5pdGl6aW5nIHRoZSBzdWItb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgna2V5cycgaW4gb3B0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiAoPElLZXlzPm9wdCkua2V5cykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJPcHRpb246IE9wdGlvbiA9ICg8SUtleXM+b3B0KS5rZXlzW2tleV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FuaXRpemluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbml0aXplT3B0aW9uKHRlbXBsYXRlWyg8T3B0aW9uPm9wdCkubGFiZWxdLCBzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFdoYXQgcHJvY2Vzc2VzIGFsbCBvZiB0aGUgcmVmZXJlbmNlcy5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IHsgSGllcmFyY2h5IH0gZnJvbSBcIi4vbW9kZWxzL0hpZXJhcmNoeVwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuL21vZGVscy9UZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZVJlZmVyZW5jZXMsIHZhbGlkYXRlVGVtcGxhdGVSZWZlcmVuY2UsIHZhbGlkYXRlUGFyZW50VG9DaGlsZFJlZmVyZW5jZSB9IGZyb20gXCIuL3ZhbGlkYXRvclwiO1xyXG5pbXBvcnQgeyBnZXRUZW1tZUlkIH0gZnJvbSBcIi4vaWRmaWVyXCI7XHJcbmltcG9ydCB7IG9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVmZXJlbmNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZWZlcmVuY2VUeXBlID0geyBkZXB0aDogbnVtYmVyLCBoaWVyYXJjaHk6IGFueSB9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUYWtlcyBjYXJlIG9mIGFsbCB0aGUgaW5oZXJpdGFuY2UgYW5kIHJlZmVyZW5jZXMgc3R1ZmYuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdG8gcHJvY2VzcyB0aGUgcmVmZXJlbmNlcyBmb3IuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcHJvY2VzcyhoaWVyYXJjaHk6IGFueSk6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+ID0gZ2V0UmVmZXJlbmNlcyhoaWVyYXJjaHkpO1xyXG5cclxuICAgICAgICAvLyBWYWxpZGF0aW5nIGFsbCBvZiB0aGUgcmVmZXJlY2VzLlxyXG4gICAgICAgIHZhbGlkYXRlUmVmZXJlbmNlcyhoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0ZW1wbGF0ZXMgYXJlIGluaGVyaXRpbmcgaGllcmFyY2h5IG9iamVjdHMuXHJcbiAgICAgICAgdmFsaWRhdGVUZW1wbGF0ZVJlZmVyZW5jZShoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiBhIHBhcmVudCBpcyB0cnlpbmcgdG8gcmVmZXJlbmNlIHRoZWlyIGNoaWxkZXJuLlxyXG4gICAgICAgIHZhbGlkYXRlUGFyZW50VG9DaGlsZFJlZmVyZW5jZShoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG5cclxuICAgICAgICAvLyBQcm9jZXNzaW5nIHRlbXBsYXRlIHJlZmVyZW5jZXMuXHJcbiAgICAgICAgcHJvY2Vzc1RlbXBsYXRlcyhoaWVyYXJjaHksIHJlZmVyZW5jZXMuZmlsdGVyKChyZWY6IFJlZmVyZW5jZVR5cGUpID0+IGlzVGVtcGxhdGUocmVmLmhpZXJhcmNoeSkpKTtcclxuXHJcbiAgICAgICAgLy8gUHJvY2Vzc2luZyBoaWVyYXJjaGllcyAobm9uLXRlbXBsYXRlKSByZWZlcmVuY2VzLlxyXG4gICAgICAgIHByb2Nlc3NIaWVyYXJjaGllcyhoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBoaWVyYXJjaHkgaXMgYSB0ZW1wbGF0ZSBvciBub3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdG8gY2hlY2suXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZSA9IChoaWVyYXJjaHk6IGFueSk6IGJvb2xlYW4gPT4gZ2V0VGVtbWVJZChoaWVyYXJjaHkpLmxlbmd0aCA9PT0gNDtcclxuXHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIGFsbCBvZiB0aGUgcmVmZXJlbmNlcyBmb3IgdGVtcGxhdGUgaGllcmFyY2hpZXMuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdGhhdCBjb250YWluIHRlbXBsYXRlcyB0byByZWZlcmVuY2UuXHJcbiAqIEBwYXJhbSByZWZlcmVuY2VzIFRoZSB2YWxpZCByZWZlcmVuY2VzLlxyXG4gKi9cclxuZnVuY3Rpb24gcHJvY2Vzc1RlbXBsYXRlcyhoaWVyYXJjaHk6IGFueSwgcmVmZXJlbmNlczogQXJyYXk8UmVmZXJlbmNlVHlwZT4pOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IHRlbXBsYXRlcy5cclxuICAgICAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS50ZW1wbGF0ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LnRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZTogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmZyb20ucmVmICE9PSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRlbXBsYXRlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSBwcm9wZXIgb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiBhbnkgPSBvcHRpb25zLmZpbHRlcigob3B0OiBPcHRpb24pID0+IG9wdC5sYWJlbCA9PT0ga2V5KVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZWRIaWVyYXJjaHk6IFJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VzLmZpbHRlcigocmVmOiBSZWZlcmVuY2VUeXBlKSA9PiByZWYuaGllcmFyY2h5LnJlZiA9PT0gdGVtcGxhdGUuZnJvbS5yZWYpWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5oZXJpdGluZyB0aGUgdmFsdWUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi5pbmhlcml0KHRlbXBsYXRlLCByZWZlcmVuY2VkSGllcmFyY2h5LmhpZXJhcmNoeVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoJ2NoaWxkTm9kZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZDogSGllcmFyY2h5KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1RlbXBsYXRlcyhjaGlsZCwgcmVmZXJlbmNlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIGFsbCBvZiB0aGUgcmVmZXJlbmNlcyBmb3IgaGllcmFyY2h5IG9iamVjdHMgKG5vbi10ZW1wbGF0ZXMpLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2hpZXMgdG8gcmVmZXJlbmNlLlxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlIFRoZSB2YWxpZCByZWZlcmVuY2VzLlxyXG4gKi9cclxuZnVuY3Rpb24gcHJvY2Vzc0hpZXJhcmNoaWVzKGhpZXJhcmNoeTogYW55LCByZWZlcmVuY2VzOiBBcnJheTxSZWZlcmVuY2VUeXBlPik6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IEhpZXJhcmNoeSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHByb2Nlc3NIaWVyYXJjaGllcyhjaGlsZCwgcmVmZXJlbmNlcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLnJlZiAhPT0gXCJcIikge1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgYW4gb3V0ZXIgZWxlbWVudCBpcyByZWZlcmVuY2VkLlxyXG4gICAgICAgICAgICBpZiAoaGllcmFyY2h5LmZyb20ucmVmWzBdID09PSBcIkBcIikge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3IgPSBoaWVyYXJjaHkuZnJvbS5yZWYuc3Vic3RyaW5nKDEpLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoaWVyYXJjaHkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgcHJvcGVyIG9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb246IGFueSA9IG9wdGlvbnMuZmlsdGVyKChvcHQ6IE9wdGlvbikgPT4gb3B0LmxhYmVsID09PSBrZXkpWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9wdGlvbi5nZXRLZXlGcm9tRWxlbWVudChlbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluaGVyaXRpbmcgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uaW5oZXJpdChoaWVyYXJjaHksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlZEhpZXJhcmNoeTogUmVmZXJlbmNlVHlwZSA9IHJlZmVyZW5jZXMuZmlsdGVyKChyZWY6IFJlZmVyZW5jZVR5cGUpID0+IHJlZi5oaWVyYXJjaHkucmVmID09PSBoaWVyYXJjaHkuZnJvbS5yZWYpWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSBwcm9wZXIgb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wdGlvbjogT3B0aW9uID0gb3B0aW9ucy5maWx0ZXIoKG9wdDogT3B0aW9uKSA9PiBvcHQubGFiZWwgPT09IGtleSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEluaGVyaXRpbmcgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbi5pbmhlcml0KGhpZXJhcmNoeSwgcmVmZXJlbmNlZEhpZXJhcmNoeS5oaWVyYXJjaHlba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldHRpbmcgYWxsIHRoZSByZWZlcmVuY2VzIGluIGEgc2FpZCBoaWVyYXJjaHkuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIGdldCB0aGUgcmVmZXJlbmNlcyBmcm9tLlxyXG4gKiBAcGFyYW0gZGVwdGggVGhlIGN1cnJlbnQgZGVwdGggaW4gdGhlIHNhaWQgaGllcmFyY2h5IG9iamVjdC5cclxuICovXHJcbmZ1bmN0aW9uIGdldFJlZmVyZW5jZXMoaGllcmFyY2h5OiBhbnksIGRlcHRoOiBudW1iZXIgPSAwKTogQXJyYXk8UmVmZXJlbmNlVHlwZT4ge1xyXG5cclxuICAgIGNvbnN0IHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+ID0gW107XHJcblxyXG4gICAgLy8gSW5jcmVtZW50aW5nIHRoZSBkZXB0aC5cclxuICAgIGRlcHRoKys7XHJcblxyXG4gICAgLy8gQ2hlY2tpbmcgaWYgdGhlIHJlZmVyZW5jZSBpcyB2YWxpZC5cclxuICAgIGlmIChoaWVyYXJjaHkucmVmICE9PSBcIlwiKSB7XHJcblxyXG4gICAgICAgIHJlZmVyZW5jZXMucHVzaCh7XHJcbiAgICAgICAgICAgIGRlcHRoOiBkZXB0aCxcclxuICAgICAgICAgICAgaGllcmFyY2h5OiBoaWVyYXJjaHlcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICBoaWVyYXJjaHkuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZDogSGllcmFyY2h5KSA9PiB7XHJcblxyXG4gICAgICAgICAgICByZWZlcmVuY2VzLnB1c2goLi4uZ2V0UmVmZXJlbmNlcyhjaGlsZCwgZGVwdGgpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IHRlbXBsYXRlcy5cclxuICAgIGlmICgndGVtcGxhdGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LnRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgIGhpZXJhcmNoeS50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IFRlbXBsYXRlKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAvLyBTdWJzdHJhY3RpbmcgMSB0byBtYWtlIHRlbXBsYXRlcyBvbiB0aGUgc2FtZSBkZXB0aCBsZXZlbFxyXG4gICAgICAgICAgICAvLyBhcyB0aGVpciBoaWVyYXJjaHkgcGFyZW50LlxyXG4gICAgICAgICAgICByZWZlcmVuY2VzLnB1c2goLi4uZ2V0UmVmZXJlbmNlcyh0ZW1wbGF0ZSwgZGVwdGggLSAxKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuaW5nIGFsbCBmb3VuZCByZWZlcmVuY2VzLlxyXG4gICAgcmV0dXJuIHJlZmVyZW5jZXM7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFdoYXQgcGFyc2VzIHRoZSBoaWVyYXJjaHkgdG8gYW4gSFRNTCB0cmVlLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgeyBIaWVyYXJjaHkgfSBmcm9tICcuL21vZGVscy9IaWVyYXJjaHknXHJcbmltcG9ydCB7IGdldFRlbW1lSWQgfSBmcm9tICcuL2lkZmllcic7XHJcbmltcG9ydCB7IG9wdGlvbnMgfSBmcm9tICcuL29wdGlvbnMnO1xyXG5pbXBvcnQgT3B0aW9uLCB7IElQYXJzZXIgfSBmcm9tICcuL21vZGVscy9PcHRpb24nO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgdGhlIGhpZXJhcmNoeSBvYmplY3QgaW50byBhbiBIVE1MIGVsZW1lbnQuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIHBhcnNlLlxyXG4gKiBAcGFyYW0gcGFyZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gaG9zdCB0aGUgcGFyc2VkIGVsZW1lbnQuXHJcbiAqIEBwYXJhbSBub2RlQ2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRoYXQgZXhlY3V0ZXMgd2hlbmV2ZXIgYW4gSFRNTCBlbGVtZW50IGhhcyBiZWVuIGNyZWF0ZWQuXHJcbiAqIEBwYXJhbSB0b3BQYXJlbnQgV2hldGhlciBvciBub3Qgd2UncmUgcGFyc2luZyB0aGUgdG9wIHBhcmVudC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShoaWVyYXJjaHk6IGFueSwgcGFyZW50OiBIVE1MRWxlbWVudCwgbm9kZUNhbGxiYWNrOiAodGVtbWVJZDogc3RyaW5nLCBjdXJyZW50SGllcmFyY2h5OiBhbnkpID0+IHZvaWQsIHRvcFBhcmVudDogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gUGFyc2luZyB0aGUgZWxlbWVudC5cclxuICAgICAgICBjb25zdCBlbGVtZW50OiBIVE1MRWxlbWVudCA9IHBhcnNlRWxlbWVudChoaWVyYXJjaHksIHBhcmVudCwgdG9wUGFyZW50KTtcclxuXHJcbiAgICAgICAgLy8gRXhlY3V0aW5nIHRoZSBub2RlIGNhbGxiYWNrLlxyXG4gICAgICAgIG5vZGVDYWxsYmFjayhnZXRUZW1tZUlkKGhpZXJhcmNoeSksIGhpZXJhcmNoeSk7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IEhpZXJhcmNoeSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHBhcnNlKGNoaWxkLCBlbGVtZW50LCBub2RlQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnRzIGEgaGllcmFyY2h5IGludG8gYW4gSFRNTCBlbGVtZW50LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IHRvIHBhcnNlLlxyXG4gKiBAcGFyYW0gcGFyZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gaG9zdCB0aGUgcGFyc2VkIGhpZXJhcmNoeS5cclxuICogQHBhcmFtIHRvcFBhcmVudCBXaGV0aGVyIG9yIG5vdCB0aGUgcGFyc2VkIGVsZW1lbnQgaXMgdGhlIHRvcCBwYXJlbnQuXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZUVsZW1lbnQoaGllcmFyY2h5OiBIaWVyYXJjaHksIHBhcmVudDogSFRNTEVsZW1lbnQsIHRvcFBhcmVudDogYm9vbGVhbiA9IGZhbHNlKTogSFRNTEVsZW1lbnQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIC8vIENyZWF0aW5nIGFuIEhUTUwgdGFnIG91dCBvZiB0aGUgaGllcmFyY2h5LlxyXG4gICAgICAgIGNvbnN0IGVsZW1lbnQ6IEhUTUxFbGVtZW50ID0gKHRvcFBhcmVudCA9PT0gdHJ1ZSkgPyBwYXJlbnQgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGhpZXJhcmNoeS5uYW1lKTtcclxuXHJcbiAgICAgICAgLy8gQXBwZW5kaW5nIHRoZSBhcHByb3ByaWF0ZSB2YWx1ZXMuXHJcbiAgICAgICAgb3B0aW9ucy5mb3JFYWNoKChvcHQ6IE9wdGlvbiB8IElQYXJzZXIpID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgKDxJUGFyc2VyPm9wdCkucGFyc2UgPT09ICdmdW5jdGlvbicpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAoPElQYXJzZXI+b3B0KS5wYXJzZShlbGVtZW50LCBoaWVyYXJjaHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7ICAgICAgICBcclxuXHJcbiAgICAgICAgLy8gQXBwZW5kaW5nIHRoZSBjcmVhdGVkIGVsZW1lbnQuXHJcbiAgICAgICAgaWYgKHRvcFBhcmVudCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmV0dXJuaW5nIHRoZSBwYXJzZWQgZWxlbWVudC5cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxuICAgIGNhdGNoKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgaGllcmFyY2h5IG9iamVjdFxyXG4gKiBpcyBub3QgdmFsaWQuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRIaWVyYXJjaHlFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkSGllcmFyY2h5RXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiVGhlIGhpZXJhcmNoeSBvYmplY3QgaXMgbm90IHZhbGlkXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgdGFyZ2V0IGlzIG5vdCBhIHZhbGlkXHJcbiAqIEhUTUwgZWxlbWVudC5cclxuICovXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRUYXJnZXRFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkVGFyZ2V0RXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiVGhlIHRhcmdldCBpcyBub3QgYSB2YWxpZCBIVE1MIGVsZW1lbnRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBcclxuICogQG5hbWU6ICAgICAgIHRlbW1lanNcclxuICogQHZlcnNpb246ICAgIDEuMC4wXHJcbiAqIEBhdXRob3I6ICAgICBFT3Vzc2FtYVxyXG4gKiBAbGljZW5zZSAgICAgTUlUXHJcbiAqIEBzb3VyY2U6ICAgICBodHRwczovL2dpdGh1Yi5jb20vRU91c3NhbWEvdGVtbWVqc1xyXG4gKiBcclxuICogVGVtbWUgKG9yIEVtbWV0IGluIHJldmVyc2UpIGlzIHRvIGphdmFzY3JpcHQgd2hhdCBFbW1ldCBpcyB0byBIVE1MIGFuZCBDU1MsXHJcbiAqIHdpdGggbm8gZG91YnRzLCBFbW1ldCBzYXZlZCB1cyBmcm9tIHRoZSBoZWFkYWNoZSBvZiB3b3JraW5nIHdpdGggSFRNTCBhbmQgQ1NTLCBcclxuICogYW5kIG5vdywgVGVtbWUgaXMgZG9pbmcgSmF2YXNjcmlwdCB0aGUgc2FtZSBmYXZvdXIgdG9vLlxyXG4gKiBcclxuICovXHJcblxyXG4gXHJcbmltcG9ydCAqIGFzIFZhbGlkYXRvciBmcm9tIFwiLi9tb2R1bGVzL3ZhbGlkYXRvclwiO1xyXG5pbXBvcnQgKiBhcyBTYW5pdGl6ZXIgZnJvbSBcIi4vbW9kdWxlcy9zYW5pdGl6ZXJcIjtcclxuaW1wb3J0ICogYXMgUmVmZXJlbmNlciBmcm9tIFwiLi9tb2R1bGVzL3JlZmVyZW5jZXJcIjtcclxuaW1wb3J0ICogYXMgUGFyc2VyIGZyb20gJy4vbW9kdWxlcy9wYXJzZXInO1xyXG5pbXBvcnQgKiBhcyBJZGZpZXIgZnJvbSBcIi4vbW9kdWxlcy9pZGZpZXJcIjtcclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4vbW9kdWxlcy9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZEhpZXJhcmNoeUVycm9yIGZyb20gXCIuL21vZHVsZXMvZXJyb3JzL0ludmFsaWRIaWVyYXJjaHlFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFRhcmdldEVycm9yIGZyb20gXCIuL21vZHVsZXMvZXJyb3JzL0ludmFsaWRUYXJnZXRFcnJvclwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgZW50cnkgcG9pbnQgb2YgVGVtbWUsIGl0J3Mgd2hhdCBpbml0aWF0ZXMgZXZlcnl0aGluZ1xyXG4gKiBmcm9tIHNhbml0aXppbmcsIHRvIHBhcnNpbmcsIGxpa2UgYSBib3NzLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IG1hcHMgdGhlIEhUTUwgc2tlbGV0b24uXHJcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIEhUTUwgZWxlbWVudCB0aGF0IHdpbGwgaG9zdCB0aGUgcGFyc2VkIHNrZWxldG9uLlxyXG4gKiBAcGFyYW0gZW5kQ2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZSB3aGVuIHRoZSBza2VsZXRvbiBoYXMgYmVlbiBwYXJzZWQuXHJcbiAqIEBwYXJhbSBub2RlQ2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZXMgd2hlbmV2ZXIgYW4gZWxlbWVudCBoYXMgYmVlbiBwYXJzZWQuXHJcbiAqIFxyXG4gKiBAdGhyb3dzIEludmFsaWRUYXJnZXRFcnJvciwgSW52YWxpZEhpZXJhcmNoeUVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaGllcmFyY2h5OiBPYmplY3QsIHRhcmdldDogSFRNTEVsZW1lbnQsIGVuZENhbGxiYWNrOiAocmVzdWx0ZWRIaWVyYXJjaHk6IGFueSkgPT4gdm9pZCA9IChoaWVyYXJjaHkpID0+IHt9LCBub2RlQ2FsbGJhY2s6ICh0ZW1tZUlkOiBzdHJpbmcsIGN1cnJlbnRIaWVyYXJjaHk6IGFueSkgPT4gdm9pZCA9ICgpID0+IHt9KTogT2JqZWN0IHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgdGFyZ2V0IGlzIGEgdmFsaWQgSFRNTCBlbGVtZW50IGFuZCB0aHJvd2luZ1xyXG4gICAgICAgIC8vIGFuIGVycm9yIGlmIGl0J3Mgbm90LlxyXG4gICAgICAgIGlmICghVmFsaWRhdG9yLmlzVmFsaWRIVE1MRWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkVGFyZ2V0RXJyb3IoXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBpcyBhbmQgdGhyb3dpbmdcclxuICAgICAgICAvLyBhbiBlcnJvciBpZiBpdCdzIG5vdC5cclxuICAgICAgICBpZiAoIVZhbGlkYXRvci5pc1ZhbGlkSGllcmFyY2h5KGhpZXJhcmNoeSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRIaWVyYXJjaHlFcnJvcihcIlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGNvbnRhaW5zXHJcbiAgICAgICAgLy8gdmFsaWQgb3B0aW9ucy5cclxuICAgICAgICBWYWxpZGF0b3IudmFsaWRhdGVPcHRpb25zKGhpZXJhcmNoeSk7XHJcblxyXG4gICAgICAgIC8vIFNhbml0aXppbmcgdGhlIGhpZXJhcmNoeS5cclxuICAgICAgICBTYW5pdGl6ZXIuc2FuaXRpemUoaGllcmFyY2h5KTtcclxuXHJcbiAgICAgICAgLy8gQXNzaWduaW5nIHRlbW1lSWRzIHRvIHRoZSBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gICAgICAgIElkZmllci5pZGZ5KGhpZXJhcmNoeSk7XHJcblxyXG4gICAgICAgIC8vIFByb2Nlc3NpbmcgYWxsIG9mIHRoZSByZWZlcmVuY2VzLlxyXG4gICAgICAgIFJlZmVyZW5jZXIucHJvY2VzcyhoaWVyYXJjaHkpO1xyXG5cclxuICAgICAgICAvLyBQYXJzaW5nIHRoZSBoaWVyYXJjaHkgaW50byBhbiBIVE1MIHRyZWUuXHJcbiAgICAgICAgUGFyc2VyLnBhcnNlKGhpZXJhcmNoeSwgdGFyZ2V0LCBub2RlQ2FsbGJhY2ssIHRydWUpO1xyXG5cclxuICAgICAgICAvLyBFeGVjdXRpbmcgdGhlIGVuZCBjYWxsYmFjay5cclxuICAgICAgICBlbmRDYWxsYmFjayhoaWVyYXJjaHkpO1xyXG5cclxuICAgICAgICAvLyBSZXR1cm5pbmcgdGhlIHJlc3VsdGVkIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAgICAgICAgcmV0dXJuIGhpZXJhcmNoeTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIC8vIEFwcGVuZGluZyBhIHRhZyBpbiBmcm9udCBvZiB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgICg8VGVtbXlFcnJvcj5lKS5tZXNzYWdlID0gYFtUZW1tZV06ICR7ZS5tZXNzYWdlfS5gO1xyXG5cclxuICAgICAgICAvLyBUaHJvd2luZyB0aGUgZXJyb3IuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9