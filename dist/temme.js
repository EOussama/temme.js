var Temme=function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";r.r(n);var e,o=function(){function t(t,n,r,e){this.label=t,this.type=n,this.values=r,this.default=e}return t.validateOptionType=function(t,n){var r="";return{valid:(r=Array.isArray(t)?"array":typeof t)===n.type,type:r}},t.validateOptionValue=function(t,n){return!(null!=n&&n.values.length>0)||-1!==n.values.indexOf(t)},t.validateOptionName=function(t){return null!=t},t}(),i=(e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),c=function(t){function n(){return t.call(this,"ref","string",[],"")||this}return i(n,t),n}(o),u=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),a=function(t){function n(){return t.call(this,"name","string",[],"div")||this}return u(n,t),n}(o),f=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),s=function(t){function n(){return t.call(this,"id","string",[],"")||this}return f(n,t),n}(o),p=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),l=function(t){function n(){return t.call(this,"value","string",[],"")||this}return p(n,t),n}(o),h=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),y=function(t){function n(){return t.call(this,"type","string",["text","html"],"text")||this}return h(n,t),n}(o),_=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new y).default,value:(new l).default})||this;return n.keys={type:new y,value:new l},n}return _(n,t),n}(o),O=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),m=function(t){function n(){return t.call(this,"temmeIds","array",[],[])||this}return O(n,t),n}(o),d=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),w=function(t){function n(){return t.call(this,"templates","array",[],[])||this}return d(n,t),n}(o),b=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),g=function(t){function n(){return t.call(this,"classes","array",[],[])||this}return b(n,t),n}(o),j=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),P=function(t){function n(){return t.call(this,"childNodes","array",[],[])||this}return j(n,t),n}(o),A=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),E=function(t){function n(){return t.call(this,"attributes","object",[],{})||this}return A(n,t),n}(o),T=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),k=function(t){function n(){return t.call(this,"dataset","object",[],{})||this}return T(n,t),n}(o),N=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),I=function(t){function n(){return t.call(this,"mode","string",["append","override"],"append")||this}return N(n,t),n}(o),x=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),M=function(t){function n(){return t.call(this,"placement","string",["after","before"],"after")||this}return x(n,t),n}(o),S=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),V=function(t){function n(){return t.call(this,"allow","boolean",[],!1)||this}return S(n,t),n}(o),R=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),H=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new V).default,placement:(new M).default})||this;return n.keys={allow:new V,placement:new M},n}return R(n,t),n}(o),z=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),L=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new I).default,children:(new H).default})||this;return n.keys={ref:new c,mode:new I,children:new H},n}return z(n,t),n}(o),q=[new c,new a,new s,new v,new m,new w,new g,new P,new E,new k,new L],C=function(){var t=[];return q.forEach(function(n){if(t.push(n),"keys"in n){var r=function t(n){var r=[];for(var e in n.keys){var o=n.keys[e];if(r.push(o),"keys"in o){var i=t(o);r=r.concat(i)}}return r}(n);t=t.concat(r)}}),t}(),U=["name","childNodes","templates"];var B=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),D=function(t){function n(n){var r=t.call(this)||this;return r.name="TemmyError",r.message="Temme isn't feeling good",r.message=n.length>0?n:r.message,r}return B(n,t),n}(Error),F=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),G=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidTemplateOptionError",r.message="A template has an invalid option";var e="“"+n+"” is not a valid option to use in templates";return r.message=n.length>0?e:r.message,r}return F(n,t),n}(D),J=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),K=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidOptionNameError",r.message="An option is not valid";var e="“"+n+"” is not a valid option";return r.message=n.length>0?e:r.message,r}return J(n,t),n}(D),Q=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),W=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidOptionTypeError",e.message="An option doesn't have a valid value type";var o="The “"+n+"” option doesn't accept values of type “"+r+"”";return e.message=n.length>0?o:e.message,e}return Q(n,t),n}(D),X=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),Y=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidOptionValueError",e.message="An option doesn't have a valid value";var o="The “"+n+"” option doesn't accept “"+r+"” as a value";return e.message=n.length>0?o:e.message,e}return X(n,t),n}(D),Z=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),$=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidSubOptionNameError",e.message="A sub-option is not valid";var o="The “"+n+"” option doesn't not recognize “"+r+"” as a valid sub-option";return e.message=n.length>0||r.length>0?o:e.message,e}return Z(n,t),n}(D),tt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),nt=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidSubOptionTypeError",e.message="A sub-option doesn't have a valid value type";var o="The “"+n+"” sub-option doesn't accept values of type “"+r+"”";return e.message=n.length>0||r.length>0?o:e.message,e}return tt(n,t),n}(D),rt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),et=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidSubOptionValueError",e.message="A sub-option doesn't have a valid value";var o="The “"+n+"” sub-option doesn't accept “"+r+"” as a value";return e.message=n.length>0||r.length>0?o:e.message,e}return rt(n,t),n}(D),ot=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),it=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferencingOptionError",r.message="A referencing option is not valid",r.message=n.length>0?n:r.message,r}return ot(n,t),n}(D),ct=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),ut=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferenceOptionValueError",r.message="“ref” options must not begin with the “@” symbol",r.message=n.length>0?n:r.message,r}return ct(n,t),n}(D),at=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),ft=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferenceError",r.message="A reference is invalid",r.message=n.length>0?"“"+n+"” is an invalid reference":r.message,r}return at(n,t),n}(D),st=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),pt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTemplateError",r.message="A template does not have a “ref” option",r.message=n.length>0?n:r.message,r}return st(n,t),n}(D);function lt(t,n,r){void 0===n&&(n=[]),void 0===r&&(r=!1);try{var e=function(t){void 0===t&&(t=!1);for(var n="0123456789abcdefghijklmnopqrstuvwxyz",r=!1===t?6:4,e="",o=0;o<r;o++){var i=Math.floor(Math.random()*n.length),c=Math.floor(2*Math.random());e+=1===c?n[i].toUpperCase():n[i]}return e}(r);t.temmeIds=n.concat([e]),"childNodes"in t&&t.childNodes.forEach(function(n){lt(n,t.temmeIds)}),"templates"in t&&t.templates.forEach(function(n){lt(n,t.temmeIds,!0)})}catch(t){throw t}}var ht=function(t){return t.temmeIds[t.temmeIds.length-1]};var yt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),_t=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidTemplateReferencingError",e.message="Templates can only reference other templates.";var o="The template with the reference “"+n+"” is trying to reference “"+r+"” a non-template object";return e.message=n.length>0?o:e.message,e}return yt(n,t),n}(D),vt=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},Ot=function(t){return null!=t&&t instanceof HTMLElement};function mt(t){try{var n=function(n){var r=q.filter(function(t){return t.label===n})[0],e=t[n];if(!1===o.validateOptionName(r))throw new K(n);var i=o.validateOptionType(e,r);if(!1===i.valid)throw new W(n,i.type);if(!1===o.validateOptionValue(e,r))throw new Y(n,e);if("keys"in r){var c=r.keys;!function t(n,r,e){var i=function(i){var c=function(t){var n=[];return C.forEach(function(r){if("keys"in r&&r.label===t)for(var e in r.keys){var o=r.keys[e];n.push(o)}}),n}(n).filter(function(t){return t.label===i})[0],u=r[i];if(!(i in e))throw new $(n,i);if(!1===o.validateOptionName(c))throw new $(n,i);var a=o.validateOptionType(u,c);if(!1===a.valid)throw new nt(i,a.type);if(!1===o.validateOptionValue(u,c))throw new et(i,u);if("keys"in c){var f=r[i];t(i,f,c.keys)}};for(var c in r)i(c)}(n,e,c)}};for(var r in t)n(r);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new it("The “from” option must always have a “ref” sub-option");"templates"in t&&t.templates.forEach(function(t){!function(t){try{if(!("ref"in t))throw new pt("");for(var n in t){if(U.indexOf(n)>-1)throw new G(n);mt(t)}}catch(t){throw t}}(t)}),"childNodes"in t&&t.childNodes.forEach(function(t){mt(t)})}catch(t){throw t}}var dt=function(t,n){return null!=n.filter(function(n){return n.hierarchy.ref===t.from.ref&&ht(t)!==ht(n.hierarchy)})[0]};function wt(t){try{q.forEach(function(n){if(n.label in t){if("keys"in n)for(var r in n.keys){var e=n.keys[r];bt(t[n.label],e)}}else t[n.label]=n.default}),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){wt(t)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(function(t){!function(t){try{q.filter(function(t){return-1===U.indexOf(t.label)}).forEach(function(n){if(n.label in t){if("keys"in n)for(var r in n.keys){var e=n.keys[r];bt(t[n.label],e)}}else t[n.label]=n.default})}catch(t){throw t}}(t)})}catch(t){throw t}}function bt(t,n){try{if(n.label in t||(t[n.label]=n.default),"keys"in n)for(var r in n.keys){bt(t[n.label],n.keys[r])}}catch(t){throw t}}function gt(t){try{var n=function t(n,r){void 0===r&&(r=0);var e=[];""!==n.ref&&e.push({depth:r,hierarchy:n});"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){e.push.apply(e,t(n,r))});"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){e.push.apply(e,t(n,r))});return e}(t);!function t(n,r){try{if("@"===n.ref[0])throw new ut("");if(!1===dt(n,r)&&""!==n.from.ref)throw new ft(n.from.ref);"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,r)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,r)})}catch(t){throw t}}(t,n),function t(n,r){try{var e=n.templates;e.length>0&&e.forEach(function(t){if(t.from.ref.length>0){var n=r.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];if(!1==(4===ht(n.hierarchy).length))throw new _t(t.ref,t.from.ref)}}),n.childNodes.forEach(function(n){t(n,r)})}catch(t){throw t}}(t,n)}catch(t){throw t}}var jt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),Pt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidHierarchyError",r.message="The hierarchy object is not valid",r.message=n.length>0?n:r.message,r}return jt(n,t),n}(D),At=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),Et=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTargetError",r.message="The target is not a valid HTML element",r.message=n.length>0?n:r.message,r}return At(n,t),n}(D);function Tt(t,n,r,e){try{if(!Ot(n))throw new Et("");if(!vt(t))throw new Pt("");return mt(t),wt(t),lt(t),gt(t),function(t,n){try{console.log("parsing...")}catch(t){throw t}}(),r(t),t}catch(t){throw t.message="[Temme]: "+t.message+".",t}}r.d(n,"parse",function(){return Tt})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,