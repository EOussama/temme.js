var Temme=function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r,o=function(){function t(t,n,e,r,o){void 0===o&&(o=!1),this.label=t,this.type=n,this.values=e,this.default=r,this.inherited=o}return t.validateOptionType=function(t,n){var e="";return{valid:(e=Array.isArray(t)?"array":typeof t)===n.type,type:e}},t.validateOptionValue=function(t,n){if(null!=n&&n.values.length>0){if("include"!==n.label&&"exclude"!==n.label)return-1!==n.values.indexOf(t);for(var e=0,r=t;e<r.length;e++){var o=r[e];if(-1===n.values.indexOf(o))return!1}}return!0},t.validateOptionName=function(t){return null!=t},t}(),i=(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),c=function(t){function n(){var n=t.call(this,"ref","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return i(n,t),n.prototype.inherit=function(t,n){},n}(o),u=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),a=function(t){function n(){var n=t.call(this,"name","string",[],"div",!0)||this;return n.getKeyFromElement=function(t){return null},n}return u(n,t),n.prototype.inherit=function(t,n){null!=n&&"override"===t.from.mode&&(t.name=n)},n}(o),f=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),s=function(t){function n(){var n=t.call(this,"id","string",[],"",!0)||this;return n.getKeyFromElement=function(t){return t.id},n}return f(n,t),n.prototype.inherit=function(t,n){""!==n&&("append"===t.from.mode?""===t.id&&(t.id=n):t.id=n)},n.prototype.parse=function(t,n){""!=n.id&&(t.id=n.id)},n}(o),p=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),l=function(t){function n(){var n=t.call(this,"value","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return p(n,t),n.prototype.inherit=function(t,n){},n}(o),h=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),y=function(t){function n(){var n=t.call(this,"type","string",["text","html"],"text")||this;return n.getKeyFromElement=function(t){return null},n}return h(n,t),n.prototype.inherit=function(t,n){},n}(o),_=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new y).default,value:(new l).default},!0)||this;return n.keys={type:new y,value:new l},n}return _(n,t),n.prototype.inherit=function(t,n){var e=n.value;""!==n.value&&("append"===t.from.mode?e=t.content.value+(e.length>0?" ":"")+e:t.content=n,t.content.value=e)},n.prototype.getKeyFromElement=function(t){return{type:"html",value:t.innerHTML}},n.prototype.parse=function(t,n){""!=n.content.value&&("text"===n.content.type?t.textContent=n.content.value:t.innerHTML=n.content.value)},n}(o),d=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),m=function(t){function n(){var n=t.call(this,"temmeIds","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return d(n,t),n.prototype.inherit=function(t,n){},n}(o),O=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),w=function(t){function n(){var n=t.call(this,"templates","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return O(n,t),n.prototype.inherit=function(t,n){},n}(o),b=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),g=function(t){function n(){return t.call(this,"classes","array",[],[],!0)||this}return b(n,t),n.prototype.inherit=function(t,n){var e;"append"===t.from.mode?(e=t.classes).push.apply(e,n):t.classes=n,t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort()},n.prototype.getKeyFromElement=function(t){var n=[];return t.classList.forEach(function(t){return n.push(t)}),n},n.prototype.parse=function(t,n){var e;n.classes.length>0&&(e=t.classList).add.apply(e,n.classes)},n}(o),j=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),P=function(t){function n(){var n=t.call(this,"childNodes","array",[],[],!0)||this;return n.getKeyFromElement=function(t){return t.innerHTML},n}return j(n,t),n.prototype.inherit=function(t,n){var e=t.childNodes.slice();!0===t.from.children.allow&&("append"===t.from.mode?"before"===t.from.children.placement?e.unshift.apply(e,n):e.push.apply(e,n):e=n),t.childNodes=e},n}(o),E=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),A=function(){return(A=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},N=function(t){function n(){return t.call(this,"attributes","object",[],{},!0)||this}return E(n,t),n.prototype.inherit=function(t,n){var e=A({},n);if("append"===t.from.mode)for(var r in t.attributes)e[r]=t.attributes[r];else for(var r in t.attributes)r in e||(e[r]=t.attributes[r]);t.attributes=e},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.attributes)isNaN(parseInt(e))||-1!==["id","class"].indexOf(t.attributes[e].nodeName)||"data-"===t.attributes[e].nodeName.substring(0,5)||(n[t.attributes[e].nodeName]=t.attributes[e].nodeValue);return n},n.prototype.parse=function(t,n){for(var e in n.attributes)t.setAttribute(e,n.attributes[e])},n}(o),T=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),x=function(){return(x=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var o in n=arguments[e])Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o]);return t}).apply(this,arguments)},k=function(t){function n(){return t.call(this,"dataset","object",[],{},!0)||this}return T(n,t),n.prototype.inherit=function(t,n){var e=x({},n);if("append"===t.from.mode)for(var r in t.dataset)e[r]=t.dataset[r];else for(var r in t.dataset)r in e||(e[r]=t.dataset[r]);t.dataset=e},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.dataset)n[e]=t.dataset[e];return n},n.prototype.parse=function(t,n){for(var e in n.dataset)t.dataset[e]=n.dataset[e]},n}(o),I=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),F=function(t){function n(){var n=t.call(this,"mode","string",["append","override"],"append")||this;return n.getKeyFromElement=function(t){return null},n}return I(n,t),n.prototype.inherit=function(t,n){},n}(o),K=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),M=function(t){function n(){var n=t.call(this,"placement","string",["after","before"],"after")||this;return n.getKeyFromElement=function(t){return null},n}return K(n,t),n.prototype.inherit=function(t,n){},n}(o),S=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),L=function(t){function n(){var n=t.call(this,"allow","boolean",[],!1)||this;return n.getKeyFromElement=function(t){return null},n}return S(n,t),n.prototype.inherit=function(t,n){},n}(o),V=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),H=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new L).default,placement:(new M).default})||this;return n.keys={allow:new L,placement:new M},n.getKeyFromElement=function(t){return null},n}return V(n,t),n.prototype.inherit=function(t,n){},n}(o),R=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),q=function(t){function n(){var n=t.call(this,"include","array",["name","id","classes","attributes","dataset","content","childNodes"],["name","id","classes","attributes","dataset","content","childNodes"])||this;return n.getKeyFromElement=function(t){return null},n}return R(n,t),n.prototype.inherit=function(t,n){},n}(o),C=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),z=function(t){function n(){var n=t.call(this,"exclude","array",["name","id","classes","attributes","dataset","content","childNodes"],[])||this;return n.getKeyFromElement=function(t){return null},n}return C(n,t),n.prototype.inherit=function(t,n){},n}(o),U=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),B=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new F).default,children:(new H).default,include:(new q).default,exclude:(new z).default})||this;return n.keys={ref:new c,mode:new F,children:new H,include:new q,exclude:new z},n.getKeyFromElement=function(t){return null},n}return U(n,t),n.prototype.inherit=function(t,n){},n}(o),D=[new c,new a,new s,new v,new m,new w,new g,new P,new N,new k,new B],G=function(){var t=[];return D.forEach(function(n){if(t.push(n),"keys"in n){var e=function t(n){var e=[];for(var r in n.keys){var o=n.keys[r];if(e.push(o),"keys"in o){var i=t(o);e=e.concat(i)}}return e}(n);t=t.concat(e)}}),t}(),J=["name","childNodes","templates"];var Q=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),W=function(t){function n(n){var e=t.call(this)||this;return e.name="TemmyError",e.message="Temme isn't feeling good",e.message=n.length>0?n:e.message,e}return Q(n,t),n}(Error),X=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Y=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidTemplateOptionError",e.message="A template has an invalid option";var r="“"+n+"” is not a valid option to use in templates";return e.message=n.length>0?r:e.message,e}return X(n,t),n}(W),Z=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),$=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidOptionNameError",e.message="An option is not valid";var r="“"+n+"” is not a valid option";return e.message=n.length>0?r:e.message,e}return Z(n,t),n}(W),tt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),nt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionTypeError",r.message="An option doesn't have a valid value type";var o="The “"+n+"” option doesn't accept values of type “"+e+"”";return r.message=n.length>0?o:r.message,r}return tt(n,t),n}(W),et=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),rt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionValueError",r.message="An option doesn't have a valid value";var o="The “"+n+"” option doesn't accept “"+e+"” as a value";return r.message=n.length>0?o:r.message,r}return et(n,t),n}(W),ot=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),it=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionNameError",r.message="A sub-option is not valid";var o="The “"+n+"” option doesn't not recognize “"+e+"” as a valid sub-option";return r.message=n.length>0||e.length>0?o:r.message,r}return ot(n,t),n}(W),ct=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ut=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionTypeError",r.message="A sub-option doesn't have a valid value type";var o="The “"+n+"” sub-option doesn't accept values of type “"+e+"”";return r.message=n.length>0||e.length>0?o:r.message,r}return ct(n,t),n}(W),at=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ft=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionValueError",r.message="A sub-option doesn't have a valid value";var o="The “"+n+"” sub-option doesn't accept “"+e+"” as a value";return r.message=n.length>0||e.length>0?o:r.message,r}return at(n,t),n}(W),st=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),pt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferencingOptionError",e.message="A referencing option is not valid",e.message=n.length>0?n:e.message,e}return st(n,t),n}(W),lt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ht=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceOptionValueError",e.message="“ref” options must not begin with the “@” symbol",e.message=n.length>0?n:e.message,e}return lt(n,t),n}(W),yt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),_t=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceError",e.message="A reference is invalid",e.message=n.length>0?"“"+n+"” is an invalid reference":e.message,e}return yt(n,t),n}(W),vt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),dt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTemplateError",e.message="A template does not have a “ref” option",e.message=n.length>0?n:e.message,e}return vt(n,t),n}(W);function mt(t,n,e){void 0===n&&(n=[]),void 0===e&&(e=!1);try{var r=function(t){void 0===t&&(t=!1);for(var n="0123456789abcdefghijklmnopqrstuvwxyz",e=!1===t?6:4,r="",o=0;o<e;o++){var i=Math.floor(Math.random()*n.length),c=Math.floor(2*Math.random());r+=1===c?n[i].toUpperCase():n[i]}return r}(e);t.temmeIds=n.concat([r]),"childNodes"in t&&t.childNodes.forEach(function(n){mt(n,t.temmeIds)}),"templates"in t&&t.templates.forEach(function(n){mt(n,t.temmeIds,!0)})}catch(t){throw t}}function Ot(t){return t.temmeIds[t.temmeIds.length-1]}var wt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),bt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidTemplateReferencingError",r.message="Templates can only reference other templates.";var o="The template with the reference “"+n+"” is trying to reference “"+e+"” a non-template object";return r.message=n.length>0?o:r.message,r}return wt(n,t),n}(W),gt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),jt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="ReferenceOutOfScopeError",e.message="An object is referencing an element out of its scope",e.message=n.length>0?n:e.message,e}return gt(n,t),n}(W),Pt=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},Et=function(t){return null!=t&&t instanceof HTMLElement};function At(t){try{var n=function(n){var e=D.filter(function(t){return t.label===n})[0],r=t[n];if(!1===o.validateOptionName(e))throw new $(n);var i=o.validateOptionType(r,e);if(!1===i.valid)throw new nt(n,i.type);if(!1===o.validateOptionValue(r,e))throw new rt(n,r);if("keys"in e){var c=e.keys;!function t(n,e,r){var i=function(i){var c=function(t){var n=[];return G.forEach(function(e){if("keys"in e&&e.label===t)for(var r in e.keys){var o=e.keys[r];n.push(o)}}),n}(n).filter(function(t){return t.label===i})[0],u=e[i];if(!(i in r))throw new it(n,i);if(!1===o.validateOptionName(c))throw new it(n,i);var a=o.validateOptionType(u,c);if(!1===a.valid)throw new ut(i,a.type);if(!1===o.validateOptionValue(u,c))throw new ft(i,u);if("keys"in c){var f=e[i];t(i,f,c.keys)}};for(var c in e)i(c)}(n,r,c)}};for(var e in t)n(e);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new pt("The “from” option must always have a “ref” sub-option");if(!1===function(t){if("from"in t)return!("include"in t.from&&"exclude"in t.from);return!0}(t))throw new pt("The “from” option can't have both the “include” and “exclude” sub-options at the same time");"templates"in t&&t.templates.forEach(function(t){!function(t){try{if(!("ref"in t))throw new dt("");for(var n in t){if(J.indexOf(n)>-1)throw new Y(n);At(t)}}catch(t){throw t}}(t)}),"childNodes"in t&&t.childNodes.forEach(function(t){At(t)})}catch(t){throw t}}var Nt=function(t,n){return null!=n.filter(function(n){return n.hierarchy.ref===t.from.ref&&Ot(t)!==Ot(n.hierarchy)})[0]};function Tt(t){try{D.forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];xt(t[n.label],r)}}else t[n.label]=n.default}),t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort(),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){Tt(t)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(function(t){!function(t){try{D.filter(function(t){return-1===J.indexOf(t.label)}).forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];xt(t[n.label],r)}}else t[n.label]=n.default})}catch(t){throw t}}(t)})}catch(t){throw t}}function xt(t,n){try{if(n.label in t?"include"!==n.label&&"exclude"!==n.label||(t[n.label]=t[n.label].filter(function(e,r){return t[n.label].indexOf(e)===r}),t[n.label].sort()):t[n.label]=n.default,"keys"in n)for(var e in n.keys){xt(t[n.label],n.keys[e])}}catch(t){throw t}}function kt(t){try{var n=function t(n,e){void 0===e&&(e=0);var r=[];e++;""!==n.ref&&r.push({depth:e,hierarchy:n});"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){r.push.apply(r,t(n,e))});"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){r.push.apply(r,t(n,e-1))});return r}(t);!function t(n,e){try{if("@"===n.ref[0])throw new ht("");if("@"===n.from.ref[0]){var r=n.from.ref.substring(1);if(null==document.querySelector(r))throw new ht("No outer element corresponds to the selector “"+r+"”")}else if(!1===Nt(n,e)&&""!==n.from.ref)throw new _t(n.from.ref);"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e){try{var r=n.templates;r.length>0&&r.forEach(function(t){if(t.from.ref.length>0&&!1==(4===Ot(e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0].hierarchy).length))throw new bt(t.ref,t.from.ref)}),n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e,r){void 0===r&&(r=0);try{var o=n.from.ref;if(r++,""!==o&&"@"!==o[0]&&null==e.filter(function(t){return t.hierarchy.ref===o&&r>=t.depth})[0])throw new jt("");"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e,r)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e,r)})}catch(t){throw t}}(t,n),function t(n,e){try{"templates"in n&&n.templates.length>0&&n.templates.forEach(function(t){if(""!==t.from.ref){var n=function(n){var r=D.filter(function(t){return t.label===n})[0],o=e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];r.inherit(t,o.hierarchy[n])};for(var r in t)n(r)}}),"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n.filter(function(t){return It(t.hierarchy)})),function t(n,e){try{if("childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),""!==n.from.ref)if("@"===n.from.ref[0]){var r=n.from.ref.substring(1),o=document.querySelector(r),i=function(t){var e=D.filter(function(n){return n.label===t})[0],r=e.getKeyFromElement(o);null!=r&&e.inherit(n,r)};for(var c in n)i(c)}else{var u=e.filter(function(t){return t.hierarchy.ref===n.from.ref})[0],a=n.from.include.filter(function(t){return-1===n.from.exclude.indexOf(t)});a.forEach(function(t){var e=D.filter(function(n){return n.label===t})[0];e.inherit(n,u.hierarchy[t])})}}catch(t){throw t}}(t,n)}catch(t){throw t}}var It=function(t){return 4===Ot(t).length};function Ft(t,n,e,r){void 0===r&&(r=!1);try{var o=function(t,n,e){void 0===e&&(e=!1);try{var r=!0===e?n:document.createElement(t.name);return D.forEach(function(n){"function"==typeof n.parse&&n.parse(r,t)}),!1===e&&n.appendChild(r),r}catch(t){throw t}}(t,n,r);e(Ot(t),t),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){Ft(t,o,e)})}catch(t){throw t}}var Kt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Mt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidHierarchyError",e.message="The hierarchy object is not valid",e.message=n.length>0?n:e.message,e}return Kt(n,t),n}(W),St=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Lt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTargetError",e.message="The target is not a valid HTML element",e.message=n.length>0?n:e.message,e}return St(n,t),n}(W);function Vt(t,n,e,r){void 0===e&&(e=function(t){}),void 0===r&&(r=function(){});try{if(!Et(n))throw new Lt("");if(!Pt(t))throw new Mt("");return At(t),Tt(t),mt(t),kt(t),Ft(t,n,r,!0),e(t),t}catch(t){throw t.message="[Temme]: "+t.message+".",t}}e.d(n,"parse",function(){return Vt})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,