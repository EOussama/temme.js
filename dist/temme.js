var Temme=function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r,o=function(){function t(t,n,e,r){this.label=t,this.type=n,this.values=e,this.default=r}return t.validateOptionType=function(t,n){var e="";return{valid:(e=Array.isArray(t)?"array":typeof t)===n.type,type:e}},t.validateOptionValue=function(t,n){return!(null!=n&&n.values.length>0)||-1!==n.values.indexOf(t)},t.validateOptionName=function(t){return null!=t},t}(),i=(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),c=function(t){function n(){var n=t.call(this,"ref","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return i(n,t),n.prototype.inherit=function(t,n){},n}(o),a=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),u=function(t){function n(){var n=t.call(this,"name","string",[],"div")||this;return n.getKeyFromElement=function(t){return null},n}return a(n,t),n.prototype.inherit=function(t,n){null!=n&&(t.name=n)},n}(o),f=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),s=function(t){function n(){var n=t.call(this,"id","string",[],"")||this;return n.getKeyFromElement=function(t){return t.id},n}return f(n,t),n.prototype.inherit=function(t,n){t.id=n},n.prototype.parse=function(t,n){""!=n.id&&(t.id=n.id)},n}(o),p=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),l=function(t){function n(){var n=t.call(this,"value","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return p(n,t),n.prototype.inherit=function(t,n){},n}(o),h=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),y=function(t){function n(){var n=t.call(this,"type","string",["text","html"],"text")||this;return n.getKeyFromElement=function(t){return null},n}return h(n,t),n.prototype.inherit=function(t,n){},n}(o),_=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new y).default,value:(new l).default})||this;return n.keys={type:new y,value:new l},n}return _(n,t),n.prototype.inherit=function(t,n){var e=n.value;"append"===t.from.mode?e=t.content.value+(e.length>0?" ":"")+e:t.content=n,t.content.value=e},n.prototype.getKeyFromElement=function(t){return{type:"html",value:t.innerHTML}},n.prototype.parse=function(t,n){""!=n.content.value&&("text"===n.content.type?t.textContent=n.content.value:t.innerHTML=n.content.value)},n}(o),m=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),d=function(t){function n(){var n=t.call(this,"temmeIds","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return m(n,t),n.prototype.inherit=function(t,n){},n}(o),O=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),w=function(t){function n(){var n=t.call(this,"templates","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return O(n,t),n.prototype.inherit=function(t,n){},n}(o),b=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),g=function(t){function n(){return t.call(this,"classes","array",[],[])||this}return b(n,t),n.prototype.inherit=function(t,n){var e;"append"===t.from.mode?(e=t.classes).push.apply(e,n):t.classes=n,t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort()},n.prototype.getKeyFromElement=function(t){var n=[];return t.classList.forEach(function(t){return n.push(t)}),n},n.prototype.parse=function(t,n){var e;n.classes.length>0&&(e=t.classList).add.apply(e,n.classes)},n}(o),j=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),P=function(t){function n(){var n=t.call(this,"childNodes","array",[],[])||this;return n.getKeyFromElement=function(t){return t.innerHTML},n}return j(n,t),n.prototype.inherit=function(t,n){var e,r;!0===t.from.children.allow&&("append"===t.from.mode?"before"===t.from.children.placement?(e=t.childNodes).unshift.apply(e,n):(r=t.childNodes).push.apply(r,n):t.childNodes=n)},n}(o),E=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),A=function(t){function n(){return t.call(this,"attributes","object",[],{})||this}return E(n,t),n.prototype.inherit=function(t,n){var e=n;if("append"===t.from.mode)for(var r in t.attributes)e[r]=t.attributes[r];else for(var r in t.attributes)r in e||(e[r]=t.attributes[r]);t.attributes=e},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.attributes)isNaN(parseInt(e))||-1!==["id","class"].indexOf(t.attributes[e].nodeName)||"data-"===t.attributes[e].nodeName.substring(0,5)||(n[t.attributes[e].nodeName]=t.attributes[e].nodeValue);return n},n.prototype.parse=function(t,n){for(var e in n.attributes)t.setAttribute(e,n.attributes[e])},n}(o),N=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),T=function(t){function n(){return t.call(this,"dataset","object",[],{})||this}return N(n,t),n.prototype.inherit=function(t,n){var e=n;if("append"===t.from.mode)for(var r in t.dataset)e[r]=t.dataset[r];else for(var r in t.dataset)r in e||(e[r]=t.dataset[r]);t.dataset=e},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.dataset)n[e]=t.dataset[e];return n},n.prototype.parse=function(t,n){for(var e in n.dataset)t.dataset[e]=n.dataset[e]},n}(o),k=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),I=function(t){function n(){var n=t.call(this,"mode","string",["append","override"],"append")||this;return n.getKeyFromElement=function(t){return null},n}return k(n,t),n.prototype.inherit=function(t,n){},n}(o),F=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),K=function(t){function n(){var n=t.call(this,"placement","string",["after","before"],"after")||this;return n.getKeyFromElement=function(t){return null},n}return F(n,t),n.prototype.inherit=function(t,n){},n}(o),x=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),M=function(t){function n(){var n=t.call(this,"allow","boolean",[],!1)||this;return n.getKeyFromElement=function(t){return null},n}return x(n,t),n.prototype.inherit=function(t,n){},n}(o),S=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),L=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new M).default,placement:(new K).default})||this;return n.keys={allow:new M,placement:new K},n.getKeyFromElement=function(t){return null},n}return S(n,t),n.prototype.inherit=function(t,n){},n}(o),V=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),H=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new I).default,children:(new L).default})||this;return n.keys={ref:new c,mode:new I,children:new L},n.getKeyFromElement=function(t){return null},n}return V(n,t),n.prototype.inherit=function(t,n){},n}(o),R=[new c,new u,new s,new v,new d,new w,new g,new P,new A,new T,new H],q=function(){var t=[];return R.forEach(function(n){if(t.push(n),"keys"in n){var e=function t(n){var e=[];for(var r in n.keys){var o=n.keys[r];if(e.push(o),"keys"in o){var i=t(o);e=e.concat(i)}}return e}(n);t=t.concat(e)}}),t}(),C=["name","childNodes","templates"];var z=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),U=function(t){function n(n){var e=t.call(this)||this;return e.name="TemmyError",e.message="Temme isn't feeling good",e.message=n.length>0?n:e.message,e}return z(n,t),n}(Error),B=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),D=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidTemplateOptionError",e.message="A template has an invalid option";var r="“"+n+"” is not a valid option to use in templates";return e.message=n.length>0?r:e.message,e}return B(n,t),n}(U),G=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),J=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidOptionNameError",e.message="An option is not valid";var r="“"+n+"” is not a valid option";return e.message=n.length>0?r:e.message,e}return G(n,t),n}(U),Q=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),W=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionTypeError",r.message="An option doesn't have a valid value type";var o="The “"+n+"” option doesn't accept values of type “"+e+"”";return r.message=n.length>0?o:r.message,r}return Q(n,t),n}(U),X=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Y=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionValueError",r.message="An option doesn't have a valid value";var o="The “"+n+"” option doesn't accept “"+e+"” as a value";return r.message=n.length>0?o:r.message,r}return X(n,t),n}(U),Z=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),$=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionNameError",r.message="A sub-option is not valid";var o="The “"+n+"” option doesn't not recognize “"+e+"” as a valid sub-option";return r.message=n.length>0||e.length>0?o:r.message,r}return Z(n,t),n}(U),tt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),nt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionTypeError",r.message="A sub-option doesn't have a valid value type";var o="The “"+n+"” sub-option doesn't accept values of type “"+e+"”";return r.message=n.length>0||e.length>0?o:r.message,r}return tt(n,t),n}(U),et=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),rt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionValueError",r.message="A sub-option doesn't have a valid value";var o="The “"+n+"” sub-option doesn't accept “"+e+"” as a value";return r.message=n.length>0||e.length>0?o:r.message,r}return et(n,t),n}(U),ot=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),it=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferencingOptionError",e.message="A referencing option is not valid",e.message=n.length>0?n:e.message,e}return ot(n,t),n}(U),ct=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),at=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceOptionValueError",e.message="“ref” options must not begin with the “@” symbol",e.message=n.length>0?n:e.message,e}return ct(n,t),n}(U),ut=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ft=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceError",e.message="A reference is invalid",e.message=n.length>0?"“"+n+"” is an invalid reference":e.message,e}return ut(n,t),n}(U),st=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),pt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTemplateError",e.message="A template does not have a “ref” option",e.message=n.length>0?n:e.message,e}return st(n,t),n}(U);function lt(t,n,e){void 0===n&&(n=[]),void 0===e&&(e=!1);try{var r=function(t){void 0===t&&(t=!1);for(var n="0123456789abcdefghijklmnopqrstuvwxyz",e=!1===t?6:4,r="",o=0;o<e;o++){var i=Math.floor(Math.random()*n.length),c=Math.floor(2*Math.random());r+=1===c?n[i].toUpperCase():n[i]}return r}(e);t.temmeIds=n.concat([r]),"childNodes"in t&&t.childNodes.forEach(function(n){lt(n,t.temmeIds)}),"templates"in t&&t.templates.forEach(function(n){lt(n,t.temmeIds,!0)})}catch(t){throw t}}function ht(t){return t.temmeIds[t.temmeIds.length-1]}var yt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),_t=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidTemplateReferencingError",r.message="Templates can only reference other templates.";var o="The template with the reference “"+n+"” is trying to reference “"+e+"” a non-template object";return r.message=n.length>0?o:r.message,r}return yt(n,t),n}(U),vt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),mt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="ReferenceOutOfScopeError",e.message="An object is referencing an element out of its scope",e.message=n.length>0?n:e.message,e}return vt(n,t),n}(U),dt=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},Ot=function(t){return null!=t&&t instanceof HTMLElement};function wt(t){try{var n=function(n){var e=R.filter(function(t){return t.label===n})[0],r=t[n];if(!1===o.validateOptionName(e))throw new J(n);var i=o.validateOptionType(r,e);if(!1===i.valid)throw new W(n,i.type);if(!1===o.validateOptionValue(r,e))throw new Y(n,r);if("keys"in e){var c=e.keys;!function t(n,e,r){var i=function(i){var c=function(t){var n=[];return q.forEach(function(e){if("keys"in e&&e.label===t)for(var r in e.keys){var o=e.keys[r];n.push(o)}}),n}(n).filter(function(t){return t.label===i})[0],a=e[i];if(!(i in r))throw new $(n,i);if(!1===o.validateOptionName(c))throw new $(n,i);var u=o.validateOptionType(a,c);if(!1===u.valid)throw new nt(i,u.type);if(!1===o.validateOptionValue(a,c))throw new rt(i,a);if("keys"in c){var f=e[i];t(i,f,c.keys)}};for(var c in e)i(c)}(n,r,c)}};for(var e in t)n(e);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new it("The “from” option must always have a “ref” sub-option");"templates"in t&&t.templates.forEach(function(t){!function(t){try{if(!("ref"in t))throw new pt("");for(var n in t){if(C.indexOf(n)>-1)throw new D(n);wt(t)}}catch(t){throw t}}(t)}),"childNodes"in t&&t.childNodes.forEach(function(t){wt(t)})}catch(t){throw t}}var bt=function(t,n){return null!=n.filter(function(n){return n.hierarchy.ref===t.from.ref&&ht(t)!==ht(n.hierarchy)})[0]};function gt(t){try{R.forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];jt(t[n.label],r)}}else t[n.label]=n.default}),t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort(),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){gt(t)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(function(t){!function(t){try{R.filter(function(t){return-1===C.indexOf(t.label)}).forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];jt(t[n.label],r)}}else t[n.label]=n.default})}catch(t){throw t}}(t)})}catch(t){throw t}}function jt(t,n){try{if(n.label in t||(t[n.label]=n.default),"keys"in n)for(var e in n.keys){jt(t[n.label],n.keys[e])}}catch(t){throw t}}function Pt(t){try{var n=function t(n,e){void 0===e&&(e=0);var r=[];e++;""!==n.ref&&r.push({depth:e,hierarchy:n});"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){r.push.apply(r,t(n,e))});"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){r.push.apply(r,t(n,e-1))});return r}(t);!function t(n,e){try{if("@"===n.ref[0])throw new at("");if("@"===n.from.ref[0]){var r=n.from.ref.substring(1);if(null==document.querySelector(r))throw new at("No outer element corresponds to the selector “"+r+"”")}else if(!1===bt(n,e)&&""!==n.from.ref)throw new ft(n.from.ref);"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e){try{var r=n.templates;r.length>0&&r.forEach(function(t){if(t.from.ref.length>0&&!1==(4===ht(e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0].hierarchy).length))throw new _t(t.ref,t.from.ref)}),n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e,r){void 0===r&&(r=0);try{var o=n.from.ref;if(r++,""!==o&&"@"!==o[0]&&null==e.filter(function(t){return t.hierarchy.ref===o&&r>=t.depth})[0])throw new mt("");"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e,r)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e,r)})}catch(t){throw t}}(t,n),function t(n,e){try{"templates"in n&&n.templates.length>0&&n.templates.forEach(function(t){if(""!==t.from.ref){var n=function(n){var r=R.filter(function(t){return t.label===n})[0],o=e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];r.inherit(t,o.hierarchy[n])};for(var r in t)n(r)}}),"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n.filter(function(t){return Et(t.hierarchy)})),function t(n,e){try{if("childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),""!==n.from.ref)if("@"===n.from.ref[0]){var r=n.from.ref.substring(1),o=document.querySelector(r),i=function(t){var e=R.filter(function(n){return n.label===t})[0],r=e.getKeyFromElement(o);null!=r&&e.inherit(n,r)};for(var c in n)i(c)}else{var a=e.filter(function(t){return t.hierarchy.ref===n.from.ref})[0],u=function(t){var e=R.filter(function(n){return n.label===t})[0];e.inherit(n,a.hierarchy[t])};for(var c in n)u(c)}}catch(t){throw t}}(t,n)}catch(t){throw t}}var Et=function(t){return 4===ht(t).length};function At(t,n,e){try{var r=function(t,n){try{var e=document.createElement(t.name);return R.forEach(function(n){"function"==typeof n.parse&&n.parse(e,t)}),n.appendChild(e),e}catch(t){throw t}}(t,n);e(ht(t),t),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){At(t,r,e)})}catch(t){throw t}}var Nt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Tt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidHierarchyError",e.message="The hierarchy object is not valid",e.message=n.length>0?n:e.message,e}return Nt(n,t),n}(U),kt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),It=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTargetError",e.message="The target is not a valid HTML element",e.message=n.length>0?n:e.message,e}return kt(n,t),n}(U);function Ft(t,n,e,r){void 0===e&&(e=function(t){}),void 0===r&&(r=function(){});try{if(!Ot(n))throw new It("");if(!dt(t))throw new Tt("");return wt(t),gt(t),lt(t),Pt(t),At(t,n,r),e(t),t}catch(t){throw t.message="[Temme]: "+t.message+".",t}}e.d(n,"parse",function(){return Ft})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,