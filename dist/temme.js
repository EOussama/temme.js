var Temme=function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";e.r(n);var r,o=function(){function t(t,n,e,r){this.label=t,this.type=n,this.values=e,this.default=r}return t.validateOptionType=function(t,n){var e="";return{valid:(e=Array.isArray(t)?"array":typeof t)===n.type,type:e}},t.validateOptionValue=function(t,n){return!(null!=n&&n.values.length>0)||-1!==n.values.indexOf(t)},t.validateOptionName=function(t){return null!=t},t}(),i=(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),c=function(t){function n(){var n=t.call(this,"ref","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return i(n,t),n.prototype.inherit=function(t,n){},n}(o),u=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),a=function(t){function n(){var n=t.call(this,"name","string",[],"div")||this;return n.getKeyFromElement=function(t){return null},n}return u(n,t),n.prototype.inherit=function(t,n){t.name=n},n}(o),f=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),s=function(t){function n(){var n=t.call(this,"id","string",[],"")||this;return n.getKeyFromElement=function(t){return t.id},n}return f(n,t),n.prototype.inherit=function(t,n){t.id=n},n}(o),p=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),l=function(t){function n(){var n=t.call(this,"value","string",[],"")||this;return n.getKeyFromElement=function(t){return null},n}return p(n,t),n.prototype.inherit=function(t,n){},n}(o),h=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),y=function(t){function n(){var n=t.call(this,"type","string",["text","html"],"text")||this;return n.getKeyFromElement=function(t){return null},n}return h(n,t),n.prototype.inherit=function(t,n){},n}(o),_=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new y).default,value:(new l).default})||this;return n.keys={type:new y,value:new l},n}return _(n,t),n.prototype.inherit=function(t,n){"append"===t.from.mode?t.content.value+=" "+n.value:t.content=n},n.prototype.getKeyFromElement=function(t){return{type:"html",value:t.innerHTML}},n}(o),m=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),d=function(t){function n(){var n=t.call(this,"temmeIds","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return m(n,t),n.prototype.inherit=function(t,n){},n}(o),O=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),w=function(t){function n(){var n=t.call(this,"templates","array",[],[])||this;return n.getKeyFromElement=function(t){return null},n}return O(n,t),n.prototype.inherit=function(t,n){},n}(o),g=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),b=function(t){function n(){return t.call(this,"classes","array",[],[])||this}return g(n,t),n.prototype.inherit=function(t,n){var e;"append"===t.from.mode?(e=t.classes).push.apply(e,n):t.classes=n,t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort()},n.prototype.getKeyFromElement=function(t){var n=[];return t.classList.forEach(function(t){return n.push(t)}),n},n}(o),j=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),P=function(t){function n(){var n=t.call(this,"childNodes","array",[],[])||this;return n.getKeyFromElement=function(t){return t.innerHTML},n}return j(n,t),n.prototype.inherit=function(t,n){var e,r;!0===t.from.children.allow&&("append"===t.from.mode?"before"===t.from.children.placement?(e=t.childNodes).unshift.apply(e,n):(r=t.childNodes).push.apply(r,n):t.childNodes=n)},n}(o),E=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),A=function(t){function n(){return t.call(this,"attributes","object",[],{})||this}return E(n,t),n.prototype.inherit=function(t,n){if("append"===t.from.mode)for(var e in n)e in t.attributes||(t.attributes[e]=n[e]);else for(var e in n)t.attributes[e]=n[e]},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.attributes)isNaN(parseInt(e))||-1!==["id","class"].indexOf(t.attributes[e].nodeName)||"data-"===t.attributes[e].nodeName.substring(0,5)||(n[t.attributes[e].nodeName]=t.attributes[e].nodeValue);return n},n}(o),N=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),T=function(t){function n(){return t.call(this,"dataset","object",[],{})||this}return N(n,t),n.prototype.inherit=function(t,n){if("append"===t.from.mode)for(var e in n)e in t.dataset||(t.dataset[e]=n[e]);else for(var e in n)t.dataset[e]=n[e]},n.prototype.getKeyFromElement=function(t){var n={};for(var e in t.dataset)n[e]=t.dataset[e];return n},n}(o),k=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),I=function(t){function n(){var n=t.call(this,"mode","string",["append","override"],"append")||this;return n.getKeyFromElement=function(t){return null},n}return k(n,t),n.prototype.inherit=function(t,n){},n}(o),F=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),K=function(t){function n(){var n=t.call(this,"placement","string",["after","before"],"after")||this;return n.getKeyFromElement=function(t){return null},n}return F(n,t),n.prototype.inherit=function(t,n){},n}(o),x=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),M=function(t){function n(){var n=t.call(this,"allow","boolean",[],!1)||this;return n.getKeyFromElement=function(t){return null},n}return x(n,t),n.prototype.inherit=function(t,n){},n}(o),S=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),V=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new M).default,placement:(new K).default})||this;return n.keys={allow:new M,placement:new K},n.getKeyFromElement=function(t){return null},n}return S(n,t),n.prototype.inherit=function(t,n){},n}(o),H=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),L=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new I).default,children:(new V).default})||this;return n.keys={ref:new c,mode:new I,children:new V},n.getKeyFromElement=function(t){return null},n}return H(n,t),n.prototype.inherit=function(t,n){},n}(o),R=[new c,new a,new s,new v,new d,new w,new b,new P,new A,new T,new L],q=function(){var t=[];return R.forEach(function(n){if(t.push(n),"keys"in n){var e=function t(n){var e=[];for(var r in n.keys){var o=n.keys[r];if(e.push(o),"keys"in o){var i=t(o);e=e.concat(i)}}return e}(n);t=t.concat(e)}}),t}(),z=["name","childNodes","templates"];var C=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),U=function(t){function n(n){var e=t.call(this)||this;return e.name="TemmyError",e.message="Temme isn't feeling good",e.message=n.length>0?n:e.message,e}return C(n,t),n}(Error),B=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),D=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidTemplateOptionError",e.message="A template has an invalid option";var r="“"+n+"” is not a valid option to use in templates";return e.message=n.length>0?r:e.message,e}return B(n,t),n}(U),G=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),J=function(t){function n(n){var e=t.call(this,"")||this;e.name="InvalidOptionNameError",e.message="An option is not valid";var r="“"+n+"” is not a valid option";return e.message=n.length>0?r:e.message,e}return G(n,t),n}(U),Q=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),W=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionTypeError",r.message="An option doesn't have a valid value type";var o="The “"+n+"” option doesn't accept values of type “"+e+"”";return r.message=n.length>0?o:r.message,r}return Q(n,t),n}(U),X=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Y=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidOptionValueError",r.message="An option doesn't have a valid value";var o="The “"+n+"” option doesn't accept “"+e+"” as a value";return r.message=n.length>0?o:r.message,r}return X(n,t),n}(U),Z=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),$=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionNameError",r.message="A sub-option is not valid";var o="The “"+n+"” option doesn't not recognize “"+e+"” as a valid sub-option";return r.message=n.length>0||e.length>0?o:r.message,r}return Z(n,t),n}(U),tt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),nt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionTypeError",r.message="A sub-option doesn't have a valid value type";var o="The “"+n+"” sub-option doesn't accept values of type “"+e+"”";return r.message=n.length>0||e.length>0?o:r.message,r}return tt(n,t),n}(U),et=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),rt=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidSubOptionValueError",r.message="A sub-option doesn't have a valid value";var o="The “"+n+"” sub-option doesn't accept “"+e+"” as a value";return r.message=n.length>0||e.length>0?o:r.message,r}return et(n,t),n}(U),ot=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),it=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferencingOptionError",e.message="A referencing option is not valid",e.message=n.length>0?n:e.message,e}return ot(n,t),n}(U),ct=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ut=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceOptionValueError",e.message="“ref” options must not begin with the “@” symbol",e.message=n.length>0?n:e.message,e}return ct(n,t),n}(U),at=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),ft=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidReferenceError",e.message="A reference is invalid",e.message=n.length>0?"“"+n+"” is an invalid reference":e.message,e}return at(n,t),n}(U),st=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),pt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTemplateError",e.message="A template does not have a “ref” option",e.message=n.length>0?n:e.message,e}return st(n,t),n}(U);function lt(t,n,e){void 0===n&&(n=[]),void 0===e&&(e=!1);try{var r=function(t){void 0===t&&(t=!1);for(var n="0123456789abcdefghijklmnopqrstuvwxyz",e=!1===t?6:4,r="",o=0;o<e;o++){var i=Math.floor(Math.random()*n.length),c=Math.floor(2*Math.random());r+=1===c?n[i].toUpperCase():n[i]}return r}(e);t.temmeIds=n.concat([r]),"childNodes"in t&&t.childNodes.forEach(function(n){lt(n,t.temmeIds)}),"templates"in t&&t.templates.forEach(function(n){lt(n,t.temmeIds,!0)})}catch(t){throw t}}var ht=function(t){return t.temmeIds[t.temmeIds.length-1]};var yt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),_t=function(t){function n(n,e){var r=t.call(this,"")||this;r.name="InvalidTemplateReferencingError",r.message="Templates can only reference other templates.";var o="The template with the reference “"+n+"” is trying to reference “"+e+"” a non-template object";return r.message=n.length>0?o:r.message,r}return yt(n,t),n}(U),vt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),mt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="ReferenceOutOfScopeError",e.message="An object is referencing an element out of its scope",e.message=n.length>0?n:e.message,e}return vt(n,t),n}(U),dt=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},Ot=function(t){return null!=t&&t instanceof HTMLElement};function wt(t){try{var n=function(n){var e=R.filter(function(t){return t.label===n})[0],r=t[n];if(!1===o.validateOptionName(e))throw new J(n);var i=o.validateOptionType(r,e);if(!1===i.valid)throw new W(n,i.type);if(!1===o.validateOptionValue(r,e))throw new Y(n,r);if("keys"in e){var c=e.keys;!function t(n,e,r){var i=function(i){var c=function(t){var n=[];return q.forEach(function(e){if("keys"in e&&e.label===t)for(var r in e.keys){var o=e.keys[r];n.push(o)}}),n}(n).filter(function(t){return t.label===i})[0],u=e[i];if(!(i in r))throw new $(n,i);if(!1===o.validateOptionName(c))throw new $(n,i);var a=o.validateOptionType(u,c);if(!1===a.valid)throw new nt(i,a.type);if(!1===o.validateOptionValue(u,c))throw new rt(i,u);if("keys"in c){var f=e[i];t(i,f,c.keys)}};for(var c in e)i(c)}(n,r,c)}};for(var e in t)n(e);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new it("The “from” option must always have a “ref” sub-option");"templates"in t&&t.templates.forEach(function(t){!function(t){try{if(!("ref"in t))throw new pt("");for(var n in t){if(z.indexOf(n)>-1)throw new D(n);wt(t)}}catch(t){throw t}}(t)}),"childNodes"in t&&t.childNodes.forEach(function(t){wt(t)})}catch(t){throw t}}var gt=function(t,n){return null!=n.filter(function(n){return n.hierarchy.ref===t.from.ref&&ht(t)!==ht(n.hierarchy)})[0]};function bt(t){try{R.forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];jt(t[n.label],r)}}else t[n.label]=n.default}),t.classes=t.classes.filter(function(n,e){return t.classes.indexOf(n)===e}),t.classes.sort(),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){bt(t)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(function(t){!function(t){try{R.filter(function(t){return-1===z.indexOf(t.label)}).forEach(function(n){if(n.label in t){if("keys"in n)for(var e in n.keys){var r=n.keys[e];jt(t[n.label],r)}}else t[n.label]=n.default})}catch(t){throw t}}(t)})}catch(t){throw t}}function jt(t,n){try{if(n.label in t||(t[n.label]=n.default),"keys"in n)for(var e in n.keys){jt(t[n.label],n.keys[e])}}catch(t){throw t}}function Pt(t){try{var n=function t(n,e){void 0===e&&(e=0);var r=[];e++;""!==n.ref&&r.push({depth:e,hierarchy:n});"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){r.push.apply(r,t(n,e))});"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){r.push.apply(r,t(n,e-1))});return r}(t);!function t(n,e){try{if("@"===n.ref[0])throw new ut("");if("@"===n.from.ref[0]){var r=n.from.ref.substring(1);if(null==document.querySelector(r))throw new ut("No outer element corresponds to the selector “"+r+"”")}else if(!1===gt(n,e)&&""!==n.from.ref)throw new ft(n.from.ref);"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e){try{var r=n.templates;r.length>0&&r.forEach(function(t){if(t.from.ref.length>0){var n=e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];if(!1==(4===ht(n.hierarchy).length))throw new _t(t.ref,t.from.ref)}}),n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n),function t(n,e,r){void 0===r&&(r=0);try{var o=n.from.ref;if(r++,""!==o&&"@"!==o[0]&&null==e.filter(function(t){return t.hierarchy.ref===o&&r>=t.depth})[0])throw new mt("");"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e,r)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,e,r)})}catch(t){throw t}}(t,n),function t(n,e){try{"templates"in n&&n.templates.length>0&&n.templates.forEach(function(t){if(""!==t.from.ref){var n=function(n){var r=R.filter(function(t){return t.label===n})[0],o=e.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];r.inherit(t,o.hierarchy[n])};for(var r in t)n(r)}}),"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)})}catch(t){throw t}}(t,n.filter(function(t){return Et(t.hierarchy)})),function t(n,e){try{if("childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,e)}),""!==n.from.ref)if("@"===n.from.ref[0]){var r=n.from.ref.substring(1),o=document.querySelector(r),i=function(t){var e=R.filter(function(n){return n.label===t})[0],r=e.getKeyFromElement(o);null!=r&&"attributes"===t&&e.inherit(n,r)};for(var c in n)i(c)}else{var u=e.filter(function(t){return t.hierarchy.ref===n.from.ref})[0],a=function(t){var e=R.filter(function(n){return n.label===t})[0];e.inherit(n,u.hierarchy[t])};for(var c in n)a(c)}}catch(t){throw t}}(t,n)}catch(t){throw t}}var Et=function(t){return 4===ht(t).length};var At=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),Nt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidHierarchyError",e.message="The hierarchy object is not valid",e.message=n.length>0?n:e.message,e}return At(n,t),n}(U),Tt=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(n,e)};return function(n,e){function r(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}}(),kt=function(t){function n(n){var e=t.call(this,"")||this;return e.name="InvalidTargetError",e.message="The target is not a valid HTML element",e.message=n.length>0?n:e.message,e}return Tt(n,t),n}(U);function It(t,n,e,r){void 0===e&&(e=function(t){});try{if(!Ot(n))throw new kt("");if(!dt(t))throw new Nt("");return wt(t),bt(t),lt(t),Pt(t),function(t,n){try{console.log("parsing...")}catch(t){throw t}}(),e(t),t}catch(t){throw t.message="[Temme]: "+t.message+".",t}}e.d(n,"parse",function(){return It})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZW1tZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9tb2RlbHMvT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvUmVmT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvTmFtZU9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0lkT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvVmFsdWVTdWJPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9zdWItb3B0aW9ucy9Db250ZW50VHlwZVN1Yk9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0NvbnRlbnRPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9UZW1tZUlkc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL1RlbXBsYXRlc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0NsYXNzZXNPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9DaGlsZHJlbk5vZGVzT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvQXR0cmlidXRlc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0RhdGFzZXRPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9zdWItb3B0aW9ucy9Nb2RlU3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvUGxhY2VtZW50U3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL3N1Yi1vcHRpb25zL0NoaWxkcmVuU3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvRnJvbU9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL21vZGVscy9UZW1teUVycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvbk5hbWVFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvblR5cGVFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvblZhbHVlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRSZWZlcmVuY2VFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZFRlbXBsYXRlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvaWRmaWVyLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9SZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvdmFsaWRhdG9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL3Nhbml0aXplci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9yZWZlcmVuY2VyLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkSGllcmFyY2h5RXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRUYXJnZXRFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvdGVtbWUudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvcGFyc2VyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibW9kZWxzX09wdGlvbiIsIk9wdGlvbiIsImxhYmVsIiwidHlwZSIsInZhbHVlcyIsImRlZmF1bHRWYWx1ZSIsInRoaXMiLCJkZWZhdWx0IiwidmFsaWRhdGVPcHRpb25UeXBlIiwibWF0Y2hpbmdPcHRpb24iLCJvcHRpb25UeXBlIiwidmFsaWQiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWxpZGF0ZU9wdGlvblZhbHVlIiwibGVuZ3RoIiwiaW5kZXhPZiIsInZhbGlkYXRlT3B0aW9uTmFtZSIsIl9zdXBlciIsIlJlZk9wdGlvbiIsIl90aGlzIiwiZ2V0S2V5RnJvbUVsZW1lbnQiLCJlbGVtZW50IiwiX19leHRlbmRzIiwiaW5oZXJpdCIsImhpZXJhcmNoeSIsInJlZiIsIk5hbWVPcHRpb24iLCJOYW1lT3B0aW9uX2V4dGVuZHMiLCJJZE9wdGlvbiIsImlkIiwiSWRPcHRpb25fZXh0ZW5kcyIsIlZhbHVlU3ViT3B0aW9uIiwiVmFsdWVTdWJPcHRpb25fZXh0ZW5kcyIsIkNvbnRlbnRUeXBlU3ViT3B0aW9uIiwiQ29udGVudFR5cGVTdWJPcHRpb25fZXh0ZW5kcyIsIkNvbnRlbnRPcHRpb24iLCJzdWJfb3B0aW9uc19Db250ZW50VHlwZVN1Yk9wdGlvbiIsInN1Yl9vcHRpb25zX1ZhbHVlU3ViT3B0aW9uIiwia2V5cyIsIkNvbnRlbnRPcHRpb25fZXh0ZW5kcyIsImNvbnRlbnQiLCJmcm9tIiwiaW5uZXJIVE1MIiwiVGVtbWVJZHNPcHRpb24iLCJUZW1tZUlkc09wdGlvbl9leHRlbmRzIiwidGVtbWVJZHMiLCJUZW1wbGF0ZXNPcHRpb24iLCJUZW1wbGF0ZXNPcHRpb25fZXh0ZW5kcyIsInRlbXBsYXRlcyIsIkNsYXNzZXNPcHRpb24iLCJDbGFzc2VzT3B0aW9uX2V4dGVuZHMiLCJjbGFzc2VzIiwiX2EiLCJwdXNoIiwiYXBwbHkiLCJmaWx0ZXIiLCJjbHMiLCJpbmRleCIsInNvcnQiLCJjbGFzc0xpc3QiLCJmb3JFYWNoIiwiQ2hpbGROb2Rlc09wdGlvbiIsIkNoaWxkcmVuTm9kZXNPcHRpb25fZXh0ZW5kcyIsImNoaWxkTm9kZXMiLCJjaGlsZHJlbiIsImFsbG93IiwicGxhY2VtZW50IiwidW5zaGlmdCIsIl9iIiwiQXR0cmlidXRlc09wdGlvbiIsIkF0dHJpYnV0ZXNPcHRpb25fZXh0ZW5kcyIsImF0dHJpYnV0ZXMiLCJhdHRyS2V5IiwiaXNOYU4iLCJwYXJzZUludCIsIm5vZGVOYW1lIiwic3Vic3RyaW5nIiwibm9kZVZhbHVlIiwiRGF0YXNldE9wdGlvbiIsIkRhdGFzZXRPcHRpb25fZXh0ZW5kcyIsImRhdGFzZXQiLCJkYXRhS2V5IiwiTW9kZVN1Yk9wdGlvbiIsIk1vZGVTdWJPcHRpb25fZXh0ZW5kcyIsIlBsYWNlbWVudFN1Yk9wdGlvbiIsIlBsYWNlbWVudFN1Yk9wdGlvbl9leHRlbmRzIiwiQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbiIsIkNoaWxkcmVuQWxsb3dTdWJPcHRpb25fZXh0ZW5kcyIsIkNoaWxkcmVuU3ViT3B0aW9uIiwic3ViX29wdGlvbnNfQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbiIsInN1Yl9vcHRpb25zX1BsYWNlbWVudFN1Yk9wdGlvbiIsIkNoaWxkcmVuU3ViT3B0aW9uX2V4dGVuZHMiLCJGcm9tT3B0aW9uIiwib3B0aW9uc19SZWZPcHRpb24iLCJzdWJfb3B0aW9uc19Nb2RlU3ViT3B0aW9uIiwic3ViX29wdGlvbnNfQ2hpbGRyZW5TdWJPcHRpb24iLCJGcm9tT3B0aW9uX2V4dGVuZHMiLCJvcHRpb25zIiwib3B0aW9uc19OYW1lT3B0aW9uIiwib3B0aW9uc19JZE9wdGlvbiIsIm9wdGlvbnNfQ29udGVudE9wdGlvbiIsIm9wdGlvbnNfVGVtbWVJZHNPcHRpb24iLCJvcHRpb25zX1RlbXBsYXRlc09wdGlvbiIsIm9wdGlvbnNfQ2xhc3Nlc09wdGlvbiIsIkNoaWxkcmVuTm9kZXNPcHRpb24iLCJvcHRpb25zX0F0dHJpYnV0ZXNPcHRpb24iLCJvcHRpb25zX0RhdGFzZXRPcHRpb24iLCJvcHRpb25zX0Zyb21PcHRpb24iLCJhbGxPcHRpb25zIiwib3B0Iiwic3ViT3B0aW9ucyIsImdldEFsbFN1Yk9wdGlvbnMiLCJvcHRpb24iLCJhbGxTdWJPcHRpb25zIiwic3ViT3B0aW9uIiwib3B0cyIsImNvbmNhdCIsImdldEFsbE9wdGlvbnMiLCJmb3JiaWRkZW5PcHRpb25zIiwiVGVtbXlFcnJvciIsIm1lc3NhZ2UiLCJUZW1teUVycm9yX2V4dGVuZHMiLCJFcnJvciIsIkludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yIiwiSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JfZXh0ZW5kcyIsIm1vZGVsc19UZW1teUVycm9yIiwiSW52YWxpZE9wdGlvbk5hbWVFcnJvciIsIkludmFsaWRPcHRpb25OYW1lRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRPcHRpb25UeXBlRXJyb3IiLCJJbnZhbGlkT3B0aW9uVHlwZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkT3B0aW9uVmFsdWVFcnJvciIsIkludmFsaWRPcHRpb25WYWx1ZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yIiwiSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvcl9leHRlbmRzIiwiSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvciIsIkludmFsaWRTdWJPcHRpb25UeXBlRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yIiwiSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yIiwiSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRSZWZlcmVuY2VPcHRpb25WYWx1ZUVycm9yIiwiSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRSZWZlcmVuY2VFcnJvciIsInJlZmVyZW5jZSIsIkludmFsaWRSZWZlcmVuY2VFcnJvcl9leHRlbmRzIiwiSW52YWxpZFRlbXBsYXRlRXJyb3IiLCJJbnZhbGlkVGVtcGxhdGVFcnJvcl9leHRlbmRzIiwiaWRmeSIsInRlbW1lSWQiLCJjaGFycyIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInVwcGVyY2FzZSIsInRvVXBwZXJDYXNlIiwiZ2VuZXJhdGVUZW1tZUlkIiwiY2hpbGQiLCJ0ZW1wbGF0ZSIsImUiLCJnZXRUZW1tZUlkIiwiSW52YWxpZFRlbXBsYXRlUmVmZXJlbmNpbmdFcnJvciIsInRhcmdldCIsIkludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3JfZXh0ZW5kcyIsIlJlZmVyZW5jZU91dE9mU2NvcGVFcnJvciIsIlJlZmVyZW5jZU91dE9mU2NvcGVFcnJvcl9leHRlbmRzIiwiaXNWYWxpZEhpZXJhcmNoeSIsImlzVmFsaWRIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidmFsaWRhdGVPcHRpb25zIiwib3B0aW9uVmFsdWUiLCJlcnJvcnNfSW52YWxpZE9wdGlvbk5hbWVFcnJvciIsInR5cGVWYWxpZGF0aW9uIiwiZXJyb3JzX0ludmFsaWRPcHRpb25UeXBlRXJyb3IiLCJlcnJvcnNfSW52YWxpZE9wdGlvblZhbHVlRXJyb3IiLCJ2YWxpZGF0ZVN1Yk9wdGlvbnMiLCJvcHRpb25OYW1lIiwibWF0Y2hpbmdTdWJPcHRpb24iLCJnZXRTdWJPcHRpb25zIiwic3ViT3B0aW9uVmFsdWUiLCJlcnJvcnNfSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvciIsImVycm9yc19JbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yIiwiZXJyb3JzX0ludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yIiwic3ViT3B0aW9uVmFsdWVfMSIsInZhbGlkYXRlUmVmZXJlbmNpbmdPcHRpb24iLCJlcnJvcnNfSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3IiLCJlcnJvcnNfSW52YWxpZFRlbXBsYXRlRXJyb3IiLCJlcnJvcnNfSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3IiLCJ2YWxpZGF0ZVRlbXBsYXRlcyIsInZhbGlkYXRlUmVmZXJlbmNlIiwicmVmZXJlbmNlcyIsInNhbml0aXplIiwic2FuaXRpemVPcHRpb24iLCJzYW5pdGl6ZVRlbXBsYXRlIiwicHJvY2VzcyIsImdldFJlZmVyZW5jZXMiLCJkZXB0aCIsInZhbGlkYXRlUmVmZXJlbmNlcyIsImVycm9yc19JbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvciIsInNlbGVjdG9yIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZXJyb3JzX0ludmFsaWRSZWZlcmVuY2VFcnJvciIsInZhbGlkYXRlVGVtcGxhdGVSZWZlcmVuY2UiLCJyZWZlcmVuY2VkRWxlbWVudCIsImVycm9yc19JbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yIiwidmFsaWRhdGVQYXJlbnRUb0NoaWxkUmVmZXJlbmNlIiwicmVmXzEiLCJyZWZPYmplY3QiLCJlcnJvcnNfUmVmZXJlbmNlT3V0T2ZTY29wZUVycm9yIiwicHJvY2Vzc1RlbXBsYXRlcyIsInJlZmVyZW5jZWRIaWVyYXJjaHkiLCJyZWZlcmVuY2VyX2lzVGVtcGxhdGUiLCJwcm9jZXNzSGllcmFyY2hpZXMiLCJJbnZhbGlkSGllcmFyY2h5RXJyb3IiLCJJbnZhbGlkSGllcmFyY2h5RXJyb3JfZXh0ZW5kcyIsIkludmFsaWRUYXJnZXRFcnJvciIsIkludmFsaWRUYXJnZXRFcnJvcl9leHRlbmRzIiwidGVtbWVfcGFyc2UiLCJlbmRDYWxsYmFjayIsIm5vZGVDYWxsYmFjayIsImVycm9yc19JbnZhbGlkVGFyZ2V0RXJyb3IiLCJlcnJvcnNfSW52YWxpZEhpZXJhcmNoeUVycm9yIiwiY29uc29sZSIsImxvZyIsInBhcnNlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6InNCQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUEwREEsT0FyREFGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFB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QzZCekMsU0FBUzZGLEdBQU1sTSxFQUFtQjBJLEVBQXFCeUQsRUFBbUVDLFFBQW5FLElBQUFELE1BQUEsU0FBaURuTSxNQUUzRyxJQUlJLElBQUsrSSxHQUE2QkwsR0FDOUIsTUFBTSxJQUFJMkQsR0FBbUIsSUFLakMsSUFBS3ZELEdBQTJCOUksR0FDNUIsTUFBTSxJQUFJc00sR0FBc0IsSUF1QnBDLE9BbEJBckQsR0FBMEJqSixHQUcxQnVLLEdBQW1CdkssR0FHbkIySCxHQUFZM0gsR0FHWjBLLEdBQW1CMUssR0NwRHBCLFNBQWVBLEVBQWdCb00sR0FFbEMsSUFFSUcsUUFBUUMsSUFBSSxjQUVoQixNQUFNakUsR0FFRixNQUFNQSxHRCtDTmtFLEdBR0FOLEVBQVluTSxHQUdMQSxFQUVYLE1BQU91SSxHQU1ILE1BSGFBLEVBQUd2QyxRQUFVLFlBQVl1QyxFQUFFdkMsUUFBTyxJQUd6Q3VDLEdBakVkcE0sRUFBQVUsRUFBQTZQLEVBQUEsMEJBQUFSIiwiZmlsZSI6InRlbW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiLyoqXHJcbiAqIFRoZSBoaWVyYXJjaHkncyBvcHRpb24gbW9kZWwuXHJcbiAqIFdoYXQgZGVmaW5lcyBhIHZhbGlkIG9wdGlvbi5cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBpbnRlcmZhY2UgdGhhdCBpbmRpY2F0ZXNcclxuICogc3ViLW9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIElLZXlzIHtcclxuXHJcbiAgICBrZXlzOiBhbnk7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhlIG9wdGlvbidzIGNsYXNzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBsYWJlbDogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRhdGEgdHlwZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdHlwZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgdmFsdWVzOiBBcnJheTxhbnk+O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGRlZmF1bHQ6IGFueTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGxhYmVsIFRoZSBuYW1lIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKiBAcGFyYW0gdHlwZSBUaGUgZGF0YSB0eXBlIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKiBAcGFyYW0gZGVmYXVsdFZhbHVlIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKiBAcGFyYW0gdmFsdWVzIFRoZSBwb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobGFiZWw6IHN0cmluZywgdHlwZTogc3RyaW5nLCB2YWx1ZXM6IEFycmF5PGFueT4sIGRlZmF1bHRWYWx1ZTogYW55KSB7XHJcblxyXG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdCA9IGRlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGluaGVyaXQgKGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZFxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBhbiBvcHRpb24gdmFsdWUgZnJvbSBhbiBleGlzdGluZyBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRLZXlGcm9tRWxlbWVudCAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnlcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIG9wdGlvbidzIG5hbWUuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtYXRjaGluZ09wdGlvbiBUaGUgb3B0aW9uIG9iamVjdCB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdmFsaWRhdGVPcHRpb25OYW1lID0gKG1hdGNoaW5nT3B0aW9uOiBPcHRpb24pOiBib29sZWFuID0+IG1hdGNoaW5nT3B0aW9uICE9IG51bGw7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIHRoZSBkYXRhIHR5cGUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICogQHBhcmFtIG1hdGNoaW5nT3B0aW9uIFRoZSBvcHRpb24gb2JqZWN0IHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZU9wdGlvblR5cGUodmFsdWU6IGFueSwgbWF0Y2hpbmdPcHRpb246IE9wdGlvbik6IHsgdmFsaWQ6IGJvb2xlYW4sIHR5cGU6IHN0cmluZyB9IHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvblR5cGU6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgICAgIC8vIEdldHRpbmcgdGhlIGFwcHJvcHJpYXRlIGRhdGEgdHlwZS5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgb3B0aW9uVHlwZSA9IFwiYXJyYXlcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvcHRpb25UeXBlID0gdHlwZW9mIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWQ6IG9wdGlvblR5cGUgPT09IG1hdGNoaW5nT3B0aW9uLnR5cGUsXHJcbiAgICAgICAgICAgIHR5cGU6IG9wdGlvblR5cGVcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIHRoZSBvcHRpb24ncyB2YWx1ZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cclxuICAgICAqIEBwYXJhbSBtYXRjaGluZ09wdGlvbiBUaGUgb3B0aW9uIG9iamVjdCB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdmFsaWRhdGVPcHRpb25WYWx1ZSh2YWx1ZTogYW55LCBtYXRjaGluZ09wdGlvbjogT3B0aW9uKTogYm9vbGVhbiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIG1hdGNoaW5nIG9iamVjdCBpcyB2YWxpZC5cclxuICAgICAgICBpZiAobWF0Y2hpbmdPcHRpb24gIT0gbnVsbCAmJiBtYXRjaGluZ09wdGlvbi52YWx1ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIG9uZS5cclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nT3B0aW9uLnZhbHVlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIHJlZmVyZW5jZSBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdyZWYnLCAnc3RyaW5nJywgW10sICcnKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIHJlZiBUaGUgcmVmIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCByZWY6IGFueSk6IHZvaWQgeyB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBub3RoaW5nIGZyb20gYSBnaXZlbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0LiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEtleUZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55ID0+IG51bGw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBuYW1lIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5hbWVPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCduYW1lJywgJ3N0cmluZycsIFtdLCAnZGl2Jyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIG5hbWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGhpZXJhcmNoeS5uYW1lID0gbmFtZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBub3RoaW5nIGZyb20gYSBnaXZlbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0LiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEtleUZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55ID0+IG51bGw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBJRCBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJZE9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ2lkJywgJ3N0cmluZycsIFtdLCAnJyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGlkOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICBoaWVyYXJjaHkuaWQgPSBpZDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIHRoZSBpZCBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBlbGVtZW50LmlkO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgdmFsdWUgc3ViIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbHVlU3ViT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcigndmFsdWUnLCAnc3RyaW5nJywgW10sICcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGNvbnRlbnQgdHlwZSBzdWIgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi8uLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGVudFR5cGVTdWJPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCd0eXBlJywgJ3N0cmluZycsIFsndGV4dCcsICdodG1sJ10sICd0ZXh0Jyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkIHsgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgbm90aGluZyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBudWxsO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgdGV4dCBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgVmFsdWVTdWJPcHRpb24gZnJvbSBcIi4vc3ViLW9wdGlvbnMvVmFsdWVTdWJPcHRpb25cIjtcclxuaW1wb3J0IENvbnRlbnRUeXBlU3ViT3B0aW9uIGZyb20gXCIuL3N1Yi1vcHRpb25zL0NvbnRlbnRUeXBlU3ViT3B0aW9uXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBjb250ZW50IG9wdGlvbiBjbGFzcy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnRPcHRpb24gZXh0ZW5kcyBPcHRpb24gaW1wbGVtZW50cyBJS2V5cyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUga2V5cyBvZiB0aGUgYGNvbnRlbnRgIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGtleXM6IENvbnRlbnRLZXlzID0ge1xyXG4gICAgICAgIHR5cGU6IG5ldyBDb250ZW50VHlwZVN1Yk9wdGlvbigpLFxyXG4gICAgICAgIHZhbHVlOiBuZXcgVmFsdWVTdWJPcHRpb24oKVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignY29udGVudCcsICdvYmplY3QnLCBbXSwge1xyXG4gICAgICAgICAgICB0eXBlOiAobmV3IENvbnRlbnRUeXBlU3ViT3B0aW9uKCkpLmRlZmF1bHQsXHJcbiAgICAgICAgICAgIHZhbHVlOiAobmV3IFZhbHVlU3ViT3B0aW9uKCkpLmRlZmF1bHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGNvbnRlbnQgVGhlIGNvbnRlbnQgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGNvbnRlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5tb2RlID09PSAnYXBwZW5kJykge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNvbnRlbnQudmFsdWUgKz0gYCAke2NvbnRlbnQudmFsdWV9YDtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNvbnRlbnQgPSBjb250ZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGNvbnRlbnQgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgeyBcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdHlwZTogXCJodG1sXCIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBlbGVtZW50LmlubmVySFRNTFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhlIENvbnRlbnRLZXlzIHR5cGUuXHJcbiAqL1xyXG50eXBlIENvbnRlbnRLZXlzID0ge1xyXG5cclxuICAgIHR5cGU6IENvbnRlbnRUeXBlU3ViT3B0aW9uO1xyXG4gICAgdmFsdWU6IFZhbHVlU3ViT3B0aW9uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgcmVmZXJlbmNlIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbW1lSWRzT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcigndGVtbWVJZHMnLCAnYXJyYXknLCBbXSwgW10pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdGVtbWVJZHMgVGhlIHRlbW1lSWRzIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB0ZW1tZUlkczogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIHRlbXBsYXRlcyBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1wbGF0ZXNPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCd0ZW1wbGF0ZXMnLCAnYXJyYXknLCBbXSwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZXMgVGhlIHRlbXBsYXRlcyB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdGVtcGxhdGVzOiBhbnkpOiB2b2lkIHsgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgbm90aGluZyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBudWxsO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgY2xhc3NlcyBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbGFzc2VzT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignY2xhc3NlcycsICdhcnJheScsIFtdLCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGNsYXNzZXMgVGhlIGNsYXNzZXMgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGNsYXNzZXM6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5tb2RlID09PSAnYXBwZW5kJykge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMucHVzaCguLi5jbGFzc2VzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMgPSBjbGFzc2VzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBSZW1vdmluZyBkdXBsaWNhdGVzLlxyXG4gICAgICAgIGhpZXJhcmNoeS5jbGFzc2VzID0gaGllcmFyY2h5LmNsYXNzZXMuZmlsdGVyKChjbHM6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4gaGllcmFyY2h5LmNsYXNzZXMuaW5kZXhPZihjbHMpID09PSBpbmRleCk7XHJcblxyXG4gICAgICAgIC8vIFNvcnRpbmcgdGhlIGNsYXNzZXMuXHJcbiAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMuc29ydCgpO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgY2xhc3NlcyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSB7XHJcbiAgICAgIFxyXG4gICAgICAgIGxldCBjbGFzc2VzOiBBcnJheTxzdHJpbmc+ID0gW107XHJcblxyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmZvckVhY2goKGNsczogc3RyaW5nKSA9PiBjbGFzc2VzLnB1c2goY2xzKSk7XHJcblxyXG4gICAgICAgIHJldHVybiBjbGFzc2VzO1xyXG4gICAgfTtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGNoaWxkcmVuIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoaWxkTm9kZXNPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdjaGlsZE5vZGVzJywgJ2FycmF5JywgW10sIFtdKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gY2hpbGROb2RlcyBUaGUgY2hpbGROb2RlcyB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgY2hpbGROb2RlczogYW55KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5jaGlsZHJlbi5hbGxvdyA9PT0gdHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLm1vZGUgPT09ICdhcHBlbmQnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLmNoaWxkcmVuLnBsYWNlbWVudCA9PT0gJ2JlZm9yZScpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMudW5zaGlmdCguLi5jaGlsZE5vZGVzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLnB1c2goLi4uY2hpbGROb2Rlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMgPSBjaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgY2hpbGRyZW4gZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gZWxlbWVudC5pbm5lckhUTUw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBhdHRyaWJ1dGVzIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgeyBpc1RlbXBsYXRlIH0gZnJvbSBcIi4uL3JlZmVyZW5jZXJcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdHRyaWJ1dGVzT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuICAgICAgICBcclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdhdHRyaWJ1dGVzJywgJ29iamVjdCcsIFtdLCB7fSk7XHJcbiAgICB9XHJcbiAgICBcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gYXR0cmlidXRlcyBUaGUgYXR0cmlidXRlcyB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgYXR0cmlidXRlczogYW55KTogdm9pZCB7XHJcblxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5tb2RlID09PSAnYXBwZW5kJykge1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBoaWVyYXJjaHkuYXR0cmlidXRlcykpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5LmF0dHJpYnV0ZXNba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaGllcmFyY2h5LmF0dHJpYnV0ZXNba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIGF0dHJpYnV0ZXMgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBhdHRyaWJ1dGVzOiBhbnkgPSB7fTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBhdHRyS2V5IGluIGVsZW1lbnQuYXR0cmlidXRlcykge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZUludChhdHRyS2V5KSkgJiYgWydpZCcsICdjbGFzcyddLmluZGV4T2YoZWxlbWVudC5hdHRyaWJ1dGVzW2F0dHJLZXldLm5vZGVOYW1lKSA9PT0gLTEgJiYgZWxlbWVudC5hdHRyaWJ1dGVzW2F0dHJLZXldLm5vZGVOYW1lLnN1YnN0cmluZygwLCA1KSAhPT0gJ2RhdGEtJykge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2VsZW1lbnQuYXR0cmlidXRlc1thdHRyS2V5XS5ub2RlTmFtZV0gPSBlbGVtZW50LmF0dHJpYnV0ZXNbYXR0cktleV0ubm9kZVZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYXR0cmlidXRlcztcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGRhdGFzZXQgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGF0YXNldE9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ2RhdGFzZXQnLCAnb2JqZWN0JywgW10sIHt9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gZGF0YXNldCBUaGUgZGF0YXNldCB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgZGF0YXNldDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLm1vZGUgPT09ICdhcHBlbmQnKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhc2V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIGhpZXJhcmNoeS5kYXRhc2V0KSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBoaWVyYXJjaHkuZGF0YXNldFtrZXldID0gZGF0YXNldFtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGFzZXQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHkuZGF0YXNldFtrZXldID0gZGF0YXNldFtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgZGF0YXRzZXQgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkge1xyXG5cclxuICAgICAgICBsZXQgZGF0YXNldDogYW55ID0ge307XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZGF0YUtleSBpbiBlbGVtZW50LmRhdGFzZXQpIHtcclxuXHJcbiAgICAgICAgICAgIGRhdGFzZXRbZGF0YUtleV0gPSBlbGVtZW50LmRhdGFzZXRbZGF0YUtleV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0YXNldDtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIG1vZGUgc3ViIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVTdWJPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdtb2RlJywgJ3N0cmluZycsIFsnYXBwZW5kJywgJ292ZXJyaWRlJ10sICdhcHBlbmQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG4iLCIvKipcclxuICogVGhlIHBsYWNlbWVudCBzdWIgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi8uLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxhY2VtZW50U3ViT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcigncGxhY2VtZW50JywgJ3N0cmluZycsIFsnYWZ0ZXInLCAnYmVmb3JlJ10sICdhZnRlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkIHsgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgbm90aGluZyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBudWxsO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgYWxsb3cgc3ViIG9wdGlvbiBtb2RlbCBmb3IgdGhlIGZyb20tY2hpbGRyZW4gb3B0aW9uLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi8uLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ2FsbG93JywgJ2Jvb2xlYW4nLCBbXSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIFxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQgeyB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogR2V0cyBub3RoaW5nIGZyb20gYSBnaXZlbiBIVE1MIGVsZW1lbnQuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBlbGVtZW50IFRoZSBIVE1MIGVsZW1lbnQgdG8gdGFyZ2V0LiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIGdldEtleUZyb21FbGVtZW50ID0gKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogYW55ID0+IG51bGw7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBjaGlsZHJlbiBzdWIgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uLCB7IElLZXlzIH0gZnJvbSBcIi4uLy4uL21vZGVscy9PcHRpb25cIjtcclxuaW1wb3J0IFBsYWNlbWVudFN1Yk9wdGlvbiBmcm9tIFwiLi9QbGFjZW1lbnRTdWJPcHRpb25cIjtcclxuaW1wb3J0IENoaWxkcmVuQWxsb3dTdWJPcHRpb24gZnJvbSBcIi4vQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvblwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgY2hpbGRyZW4gc3ViIG9wdGlvbiBjbGFzc1xyXG4gKiBvZiB0aGUgZnJvbSBvcHRpb24uXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDaGlsZHJlblN1Yk9wdGlvbiBleHRlbmRzIE9wdGlvbiBpbXBsZW1lbnRzIElLZXlzIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBrZXlzIG9mIHRoZSBgY2hpbGRyZW5gIHN1YiBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBrZXlzOiBGcm9tQ2hpbGRyZW5LZXlzID0ge1xyXG4gICAgICAgIGFsbG93OiBuZXcgQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbigpLFxyXG4gICAgICAgIHBsYWNlbWVudDogbmV3IFBsYWNlbWVudFN1Yk9wdGlvbigpXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdjaGlsZHJlbicsICdvYmplY3QnLCBbXSwge1xyXG4gICAgICAgICAgICBhbGxvdzogKG5ldyBDaGlsZHJlbkFsbG93U3ViT3B0aW9uKCkpLmRlZmF1bHQsXHJcbiAgICAgICAgICAgIHBsYWNlbWVudDogKG5ldyBQbGFjZW1lbnRTdWJPcHRpb24oKSkuZGVmYXVsdFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkIHsgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldHMgbm90aGluZyBmcm9tIGEgZ2l2ZW4gSFRNTCBlbGVtZW50LlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gZWxlbWVudCBUaGUgSFRNTCBlbGVtZW50IHRvIHRhcmdldC4gXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRLZXlGcm9tRWxlbWVudCA9IChlbGVtZW50OiBIVE1MRWxlbWVudCk6IGFueSA9PiBudWxsO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBGcm9tQ2hpbGRyZW5LZXlzIHR5cGUuXHJcbiAqL1xyXG50eXBlIEZyb21DaGlsZHJlbktleXMgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBhbGxvdyBjaGlsZHJlbiBpbmhlcml0YW5jZS5cclxuICAgICAqL1xyXG4gICAgYWxsb3c6IENoaWxkcmVuQWxsb3dTdWJPcHRpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaW5oZXJpdGFuY2UgbW9kZS5cclxuICAgICAqL1xyXG4gICAgcGxhY2VtZW50OiBQbGFjZW1lbnRTdWJPcHRpb247XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBmcm9tIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgUmVmT3B0aW9uIGZyb20gXCIuL1JlZk9wdGlvblwiO1xyXG5pbXBvcnQgTW9kZVN1Yk9wdGlvbiBmcm9tIFwiLi9zdWItb3B0aW9ucy9Nb2RlU3ViT3B0aW9uXCI7XHJcbmltcG9ydCBDaGlsZHJlblN1Yk9wdGlvbiBmcm9tIFwiLi9zdWItb3B0aW9ucy9DaGlsZHJlblN1Yk9wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyb21PcHRpb24gZXh0ZW5kcyBPcHRpb24gaW1wbGVtZW50cyBJS2V5cyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUga2V5cyBvZiB0aGUgYGZyb21gIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGtleXM6IEZyb21LZXlzID0ge1xyXG4gICAgICAgIHJlZjogbmV3IFJlZk9wdGlvbigpLFxyXG4gICAgICAgIG1vZGU6IG5ldyBNb2RlU3ViT3B0aW9uKCksXHJcbiAgICAgICAgY2hpbGRyZW46IG5ldyBDaGlsZHJlblN1Yk9wdGlvbigpXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdmcm9tJywgJ29iamVjdCcsIFtdLCB7XHJcbiAgICAgICAgICAgIHJlZjogKG5ldyBSZWZPcHRpb24oKSkuZGVmYXVsdCxcclxuICAgICAgICAgICAgbW9kZTogKG5ldyBNb2RlU3ViT3B0aW9uKCkpLmRlZmF1bHQsXHJcbiAgICAgICAgICAgIGNoaWxkcmVuOiAobmV3IENoaWxkcmVuU3ViT3B0aW9uKCkpLmRlZmF1bHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gZnJvbSBUaGUgZnJvbSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgZnJvbTogYW55KTogdm9pZCB7IH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBHZXRzIG5vdGhpbmcgZnJvbSBhIGdpdmVuIEhUTUwgZWxlbWVudC5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGVsZW1lbnQgVGhlIEhUTUwgZWxlbWVudCB0byB0YXJnZXQuIFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0S2V5RnJvbUVsZW1lbnQgPSAoZWxlbWVudDogSFRNTEVsZW1lbnQpOiBhbnkgPT4gbnVsbDtcclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgRnJvbUtleXMgdHlwZS5cclxuICovXHJcbnR5cGUgRnJvbUtleXMgPSB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcmVmZXJlbmNlIHN1YiBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHJlZjogUmVmT3B0aW9uO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGluaGVyaXRhbmNlIG1vZGUuXHJcbiAgICAgKi9cclxuICAgIG1vZGU6IE1vZGVTdWJPcHRpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaW5oZXJpdGFuY2UgbW9kZS5cclxuICAgICAqL1xyXG4gICAgY2hpbGRyZW46IENoaWxkcmVuU3ViT3B0aW9uO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgbGlzdCBvZiBzdXBwb3J0ZWQgb3B0aW9ucy5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiwgeyBJS2V5cyB9IGZyb20gXCIuL21vZGVscy9PcHRpb25cIjtcclxuaW1wb3J0IFJlZk9wdGlvbiBmcm9tIFwiLi9vcHRpb25zL1JlZk9wdGlvblwiO1xyXG5pbXBvcnQgTmFtZU9wdGlvbiBmcm9tIFwiLi9vcHRpb25zL05hbWVPcHRpb25cIjtcclxuaW1wb3J0IElkT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvSWRPcHRpb25cIjtcclxuaW1wb3J0IENvbnRlbnRPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9Db250ZW50T3B0aW9uXCI7XHJcbmltcG9ydCBUZW1tZUlkc09wdGlvbiBmcm9tIFwiLi9vcHRpb25zL1RlbW1lSWRzT3B0aW9uXCI7XHJcbmltcG9ydCBUZW1wbGF0ZXNPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9UZW1wbGF0ZXNPcHRpb25cIjtcclxuaW1wb3J0IENsYXNzZXNPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9DbGFzc2VzT3B0aW9uXCI7XHJcbmltcG9ydCBDaGlsZE5vZGVzT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvQ2hpbGRyZW5Ob2Rlc09wdGlvblwiO1xyXG5pbXBvcnQgQXR0cmlidXRlc09wdGlvbiBmcm9tIFwiLi9vcHRpb25zL0F0dHJpYnV0ZXNPcHRpb25cIjtcclxuaW1wb3J0IERhdGFzZXRPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9EYXRhc2V0T3B0aW9uXCI7XHJcbmltcG9ydCBGcm9tT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvRnJvbU9wdGlvblwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBbGwgdGhlIGdsb2JhbCBvcHRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IG9wdGlvbnM6IEFycmF5PE9wdGlvbj4gPSBbXHJcbiAgICBuZXcgUmVmT3B0aW9uKCksXHJcbiAgICBuZXcgTmFtZU9wdGlvbigpLFxyXG4gICAgbmV3IElkT3B0aW9uKCksXHJcbiAgICBuZXcgQ29udGVudE9wdGlvbigpLFxyXG4gICAgbmV3IFRlbW1lSWRzT3B0aW9uKCksXHJcbiAgICBuZXcgVGVtcGxhdGVzT3B0aW9uKCksXHJcbiAgICBuZXcgQ2xhc3Nlc09wdGlvbigpLFxyXG4gICAgbmV3IENoaWxkTm9kZXNPcHRpb24oKSxcclxuICAgIG5ldyBBdHRyaWJ1dGVzT3B0aW9uKCksXHJcbiAgICBuZXcgRGF0YXNldE9wdGlvbigpLFxyXG4gICAgbmV3IEZyb21PcHRpb24oKVxyXG5dO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgb2YgdGhlIG9wdGlvbnMgYXZhaWxhYmxlIChpbmNsdWRpbmcgc3ViLW9wdGlvbnMpLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGFsbE9wdGlvbnMgPSBnZXRBbGxPcHRpb25zKCk7XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBvcHRpb25zIHRoYXQgYXJlIG5vdCBhbGxvd2VkIGZvciB0ZW1wbGF0ZXMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZm9yYmlkZGVuT3B0aW9uczogQXJyYXk8c3RyaW5nPiA9IFsnbmFtZScsICdjaGlsZE5vZGVzJywgJ3RlbXBsYXRlcyddO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGFsbCB0aGUgc3ViLW9wdGlvbnMgb2YgYW4gb3B0aW9uLlxyXG4gKiBcclxuICogQHBhcmFtIG9wdGlvbiBUaGUgcGFyZW50IG9wdGlvbidzIG5hbWUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3ViT3B0aW9ucyhvcHRpb246IHN0cmluZyk6IEFycmF5PE9wdGlvbj4ge1xyXG5cclxuICAgIGNvbnN0IHN1Yk9wdGlvbnM6IEFycmF5PGFueT4gPSBbXTtcclxuXHJcbiAgICAvLyBMb29waW5nIHRocm91Z2ggYWxsIG9mIHRoZSBvcHRpb25zLlxyXG4gICAgYWxsT3B0aW9ucy5mb3JFYWNoKChvcHQ6IE9wdGlvbikgPT4ge1xyXG5cclxuICAgICAgICBpZiAoJ2tleXMnIGluIG9wdCAmJiAoPE9wdGlvbj5vcHQpLmxhYmVsID09PSBvcHRpb24pIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluICg8SUtleXM+b3B0KS5rZXlzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1Yk9wdGlvbiA9ICg8SUtleXM+b3B0KS5rZXlzW2tleV07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUHVzaGluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgIHN1Yk9wdGlvbnMucHVzaChzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUmV0dXJuaW5nIHRoZSBmb3VuZCBzdWItb3B0aW9ucy5cclxuICAgIHJldHVybiBzdWJPcHRpb25zO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldHMgYWxsIG9mIHRoZSBvcHRpb25zIGFuZCBzdWItb3B0aW9ucy5cclxuICovXHJcbmZ1bmN0aW9uIGdldEFsbE9wdGlvbnMoKTogQXJyYXk8T3B0aW9uPiB7XHJcblxyXG4gICAgbGV0IGFsbE9wdGlvbnM6IEFycmF5PE9wdGlvbj4gPSBbXTtcclxuXHJcbiAgICBvcHRpb25zLmZvckVhY2goKG9wdDogT3B0aW9uKSA9PiB7XHJcblxyXG4gICAgICAgIGFsbE9wdGlvbnMucHVzaChvcHQpO1xyXG5cclxuICAgICAgICBpZiAoJ2tleXMnIGluIG9wdCkge1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0dGluZyBhbGwgb2YgdGhlIHN1Yi1vcHRpb25zLlxyXG4gICAgICAgICAgICBjb25zdCBzdWJPcHRpb25zOiBBcnJheTxPcHRpb24+ID0gZ2V0QWxsU3ViT3B0aW9ucyhvcHQpO1xyXG5cclxuICAgICAgICAgICAgYWxsT3B0aW9ucyA9IGFsbE9wdGlvbnMuY29uY2F0KHN1Yk9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBhbGxPcHRpb25zO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldHMgYWxsIHRoZSBzdWItb3B0aW9ucyBvZiBhbiBvcHRpb24uXHJcbiAqIFxyXG4gKiBAcGFyYW0gb3B0IFRoZSBvcHRpb24gdG8gZ2V0IHRoZSBzdWItb3B0aW9ucyBvZi5cclxuICovXHJcbmZ1bmN0aW9uIGdldEFsbFN1Yk9wdGlvbnMob3B0aW9uOiBPcHRpb24pOiBBcnJheTxPcHRpb24+IHtcclxuXHJcbiAgICBsZXQgYWxsU3ViT3B0aW9uczogQXJyYXk8T3B0aW9uPiA9IFtdO1xyXG5cclxuICAgIGZvciAoY29uc3Qga2V5IGluICg8YW55Pm9wdGlvbikua2V5cykge1xyXG5cclxuICAgICAgICBjb25zdCBzdWJPcHRpb246IE9wdGlvbiA9ICg8YW55Pm9wdGlvbikua2V5c1trZXldO1xyXG5cclxuICAgICAgICBhbGxTdWJPcHRpb25zLnB1c2goc3ViT3B0aW9uKTtcclxuXHJcbiAgICAgICAgaWYgKCdrZXlzJyBpbiBzdWJPcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9wdHM6IEFycmF5PE9wdGlvbj4gPSBnZXRBbGxTdWJPcHRpb25zKHN1Yk9wdGlvbik7XHJcblxyXG4gICAgICAgICAgICBhbGxTdWJPcHRpb25zID0gYWxsU3ViT3B0aW9ucy5jb25jYXQob3B0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhbGxTdWJPcHRpb25zO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUZW1tZSdzIGVycm9yIGludGVyZmFjZS5cclxuICovXHJcbmludGVyZmFjZSBJVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgbWVzc2FnZTogc3RyaW5nO1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFRlbW1lJ3MgY3VzdG9tIGVycm9ycy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbW15RXJyb3IgZXh0ZW5kcyBFcnJvciBpbXBsZW1lbnRzIElUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9ICdUZW1teUVycm9yJztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiVGVtbWUgaXNuJ3QgZmVlbGluZyBnb29kXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSB0ZW1wbGF0ZVxyXG4gKiBoYXMgYSBmb3JiaWRkZW4gb3B0aW9uLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBIHRlbXBsYXRlIGhhcyBhbiBpbnZhbGlkIG9wdGlvblwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uIFRoZSBpbnZhbGlkIG9wdGlvbidzIG5hbWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbjogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIENvbnN0cnVjdGluZyB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBg4oCcJHtvcHRpb2594oCdIGlzIG5vdCBhIHZhbGlkIG9wdGlvbiB0byB1c2UgaW4gdGVtcGxhdGVzYDtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb24ubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhbiBvcHRpb25cclxuICogaXMgbm90IHZhbGlkLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkT3B0aW9uTmFtZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRPcHRpb25OYW1lRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQW4gb3B0aW9uIGlzIG5vdCB2YWxpZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uIFRoZSBpbnZhbGlkIG9wdGlvbidzIG5hbWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbjogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIENvbnN0cnVjdGluZyB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBg4oCcJHtvcHRpb2594oCdIGlzIG5vdCBhIHZhbGlkIG9wdGlvbmA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gb3B0aW9uLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYW4gb3B0aW9uXHJcbiAqIGlzIG5vdCBvZiBhIHZhbGlkIGRhdGEgdHlwZS5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZE9wdGlvblR5cGVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkT3B0aW9uVHlwZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkFuIG9wdGlvbiBkb2Vzbid0IGhhdmUgYSB2YWxpZCB2YWx1ZSB0eXBlXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBvcHRpb24gVGhlIGludmFsaWQgb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgaW52YWxpZCBvcHRpb24ncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uOiBzdHJpbmcsIHR5cGU6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSDigJwke29wdGlvbn3igJ0gb3B0aW9uIGRvZXNuJ3QgYWNjZXB0IHZhbHVlcyBvZiB0eXBlIOKAnCR7dHlwZX3igJ1gO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbi5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGFuIG9wdGlvblxyXG4gKiBpcyBub3Qgb2YgYSB2YWxpZCB2YWx1ZS5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZE9wdGlvblZhbHVlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZE9wdGlvblZhbHVlRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQW4gb3B0aW9uIGRvZXNuJ3QgaGF2ZSBhIHZhbGlkIHZhbHVlXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBvcHRpb24gVGhlIGludmFsaWQgb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgaW52YWxpZCBvcHRpb24ncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGBUaGUg4oCcJHtvcHRpb2594oCdIG9wdGlvbiBkb2Vzbid0IGFjY2VwdCDigJwke3ZhbHVlfeKAnSBhcyBhIHZhbHVlYDtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb24ubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIHN1Yi1vcHRpb25cclxuICogaXMgbm90IHZhbGlkLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRTdWJPcHRpb25OYW1lRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQSBzdWItb3B0aW9uIGlzIG5vdCB2YWxpZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uIFRoZSBwYXJlbnQgb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqIEBwYXJhbSBzdWJPcHRpb24gVGhlIGludmFsaWQgc3ViLW9wdGlvbidzIG5hbWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbjogc3RyaW5nLCBzdWJPcHRpb246IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSDigJwke29wdGlvbn3igJ0gb3B0aW9uIGRvZXNuJ3Qgbm90IHJlY29nbml6ZSDigJwke3N1Yk9wdGlvbn3igJ0gYXMgYSB2YWxpZCBzdWItb3B0aW9uYDtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb24ubGVuZ3RoID4gMCB8fCBzdWJPcHRpb24ubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIHN1Yi1wdGlvblxyXG4gKiBpcyBub3Qgb2YgYSB2YWxpZCBkYXRhIHR5cGUuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBIHN1Yi1vcHRpb24gZG9lc24ndCBoYXZlIGEgdmFsaWQgdmFsdWUgdHlwZVwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gc3ViT3B0aW9uIFRoZSBpbnZhbGlkIHN1Yi1vcHRpb24ncyBuYW1lLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBpbnZhbGlkIHN1Yi1vcHRpb24ncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc3ViT3B0aW9uOiBzdHJpbmcsIHR5cGU6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSDigJwke3N1Yk9wdGlvbn3igJ0gc3ViLW9wdGlvbiBkb2Vzbid0IGFjY2VwdCB2YWx1ZXMgb2YgdHlwZSDigJwke3R5cGV94oCdYDtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBzdWJPcHRpb24ubGVuZ3RoID4gMCB8fCB0eXBlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBzdWItb3B0aW9uXHJcbiAqIGlzIG5vdCBvZiBhIHZhbGlkIHZhbHVlLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBIHN1Yi1vcHRpb24gZG9lc24ndCBoYXZlIGEgdmFsaWQgdmFsdWVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHN1Yk9wdGlvbiBUaGUgaW52YWxpZCBzdWItb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgaW52YWxpZCBzdWItb3B0aW9uJ3MgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHN1Yk9wdGlvbjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIENvbnN0cnVjdGluZyB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBgVGhlIOKAnCR7c3ViT3B0aW9ufeKAnSBzdWItb3B0aW9uIGRvZXNuJ3QgYWNjZXB0IOKAnCR7dmFsdWV94oCdIGFzIGEgdmFsdWVgO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHN1Yk9wdGlvbi5sZW5ndGggPiAwIHx8IHZhbHVlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBcclxuICogZnJvbSBvcHRpb24gaXMgbm90IHZhbGlkXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkEgcmVmZXJlbmNpbmcgb3B0aW9uIGlzIG5vdCB2YWxpZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBcclxuICogcmVmIG9wdGlvbiBzdGFydHMgd2l0aCB0aGUgc3ltYm9sZSDigJxA4oCdLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCLigJxyZWbigJ0gb3B0aW9ucyBtdXN0IG5vdCBiZWdpbiB3aXRoIHRoZSDigJxA4oCdIHN5bWJvbFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSByZWYgb3B0aW9uXHJcbiAqIHJlZmVyZW5jZXMgYW4gaW52YWxpZCBvYmplY3QuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRSZWZlcmVuY2VFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkUmVmZXJlbmNlRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQSByZWZlcmVuY2UgaXMgaW52YWxpZFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlIFRoZSBpbnZhbGlkIHJlZmVyZW5jZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IocmVmZXJlbmNlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSByZWZlcmVuY2UubGVuZ3RoID4gMCA/IGDigJwke3JlZmVyZW5jZX3igJ0gaXMgYW4gaW52YWxpZCByZWZlcmVuY2VgIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSB0ZW1wbGF0ZVxyXG4gKiBpcyBpbnZhbGlkIChkb2Vzbid0IGhhdmUgYSDigJxyZWbigJ0gb3B0aW9uKS5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFRlbXBsYXRlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFRlbXBsYXRlRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQSB0ZW1wbGF0ZSBkb2VzIG5vdCBoYXZlIGEg4oCccmVm4oCdIG9wdGlvblwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIEhlcmUgZ29lcydzIGV2ZXJ5dGhpbmcgdGhhdCBJRC1maWVzXHJcbiAqIGFueXRoaW5nIHRvIGRvIHdpdGggdGhlIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCB7IEhpZXJhcmNoeSB9IGZyb20gXCIuL21vZGVscy9IaWVyYXJjaHlcIjtcclxuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tIFwiLi9tb2RlbHMvVGVtcGxhdGVcIjtcclxuXHJcblxyXG4vKipcclxuICogQXNzaWducyB0ZW1tZUlkcyB0byBhIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIGFzc2luZyBhIHRlbW1lSWQgdG8uXHJcbiAqIEBwYXJhbSB0ZW1tZUlkcyBUaGUgc2VyaWVzIG9mIHRlbW1lSWRzIGxlYWRpbmcgdG8gdGhlIGN1cnJlbnQgaGllcmFyY2h5IG9iamVjdC5cclxuICogQHBhcmFtIG1vZGUgVGhlIG1vZGUgb2YgdGhlIHRlbW1lSWQsIGlmIGl0J3MgZmFsc2UsIHRoZSB0ZW1tZUlkIHdpbGwgYmUgb2YgNiBjaGFyYWN0ZXJzXHJcbiAqIGluZGljYXRpbmcgaXQncyBhIGhpZXJhcmNoeSBvYmplY3QsIGlmIGl0J3MgdHJ1ZSwgaXQnbGwgaGF2ZSA0IGNoYXJhY3RlcnMgaW5kaWNhdGluZyBpdCdzXHJcbiAqIGEgdGVtcGxhdGUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaWRmeShoaWVyYXJjaHk6IGFueSwgdGVtbWVJZHM6IEFycmF5PHN0cmluZz4gPSBbXSwgbW9kZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIC8vIEdlbmVyYXRpbmcgYSB0ZW1tZSBJZC5cclxuICAgICAgICBjb25zdCB0ZW1tZUlkOiBzdHJpbmcgPSBnZW5lcmF0ZVRlbW1lSWQobW9kZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQXNzaWduaW5nIGEgdGVtbWVJZC5cclxuICAgICAgICBoaWVyYXJjaHkudGVtbWVJZHMgPSBbLi4udGVtbWVJZHMsIHRlbW1lSWRdO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENoZWNraW5nIG9mIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBPYmplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWRmeShjaGlsZCwgaGllcmFyY2h5LnRlbW1lSWRzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgb2YgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSkge1xyXG4gICAgXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IE9iamVjdCkgPT4ge1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICBpZGZ5KHRlbXBsYXRlLCBoaWVyYXJjaHkudGVtbWVJZHMsIHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgdGVtbWVJZCBvZiBhIGhpZXJhcmNoeSBvciB0ZW1wbGF0ZSBvYmplY3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdG8gZ2V0IHRoZSB0ZW1tZUlkIG9mLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGdldFRlbW1lSWQgPSAoaGllcmFyY2h5OiBIaWVyYXJjaHkgfCBUZW1wbGF0ZSk6IHN0cmluZyA9PiBoaWVyYXJjaHkudGVtbWVJZHNbaGllcmFyY2h5LnRlbW1lSWRzLmxlbmd0aCAtIDFdO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgYSB1bmlxdWUgdGVtbWVJZC5cclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlVGVtbWVJZChtb2RlOiBib29sZWFuID0gZmFsc2UpIHtcclxuXHJcbiAgICBjb25zdFxyXG4gICAgICAgIGNoYXJzID0gXCIwMTIzNDU2Nzg5YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIixcclxuICAgICAgICBtYXggPSAobW9kZSA9PT0gZmFsc2UpID8gNiA6IDQ7XHJcblxyXG4gICAgbGV0IGtleSA9ICcnO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpPG1heDsgaSsrKSB7XHJcblxyXG4gICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgIGluZGV4ID0gTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAqIGNoYXJzLmxlbmd0aCkpLFxyXG4gICAgICAgICAgICB1cHBlcmNhc2UgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyKTtcclxuXHJcbiAgICAgICAga2V5ICs9IHVwcGVyY2FzZSA9PT0gMSA/IGNoYXJzW2luZGV4XS50b1VwcGVyQ2FzZSgpIDogY2hhcnNbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBrZXk7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIHRlbXBsYXRlXHJcbiAqIGhhcyBpcyByZWZlcmVuY2luZyBhIG5vbi10ZW1wbGF0ZSBvYmplY3QuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFRlbXBsYXRlUmVmZXJlbmNpbmdFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJUZW1wbGF0ZXMgY2FuIG9ubHkgcmVmZXJlbmNlIG90aGVyIHRlbXBsYXRlcy5cIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHJlZiBUaGUgdGVtcGxhdGUncyByZWZlcmVuY2UuXHJcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IFRoZSByZWZlcmVuY2UgdGFyZ2V0LlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihyZWY6IHN0cmluZywgdGFyZ2V0OiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGBUaGUgdGVtcGxhdGUgd2l0aCB0aGUgcmVmZXJlbmNlIOKAnCR7cmVmfeKAnSBpcyB0cnlpbmcgdG8gcmVmZXJlbmNlIOKAnCR7dGFyZ2V0feKAnSBhIG5vbi10ZW1wbGF0ZSBvYmplY3RgO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHJlZi5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgYSBoaWVyYXJjaHkgb2JqZWN5XHJcbiAqIGlzIHJlZmVyZW5jaW5nIGFuIGVsZW1lbnQgb3V0IG9mIGl0cyBzY29wZS5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVmZXJlbmNlT3V0T2ZTY29wZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIlJlZmVyZW5jZU91dE9mU2NvcGVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBbiBvYmplY3QgaXMgcmVmZXJlbmNpbmcgYW4gZWxlbWVudCBvdXQgb2YgaXRzIHNjb3BlXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBtb2R1bGUgcmVzcG9uc2libGUgZm9yIHZhbGlkYXRpbmcgdGhlIGlucHV0LlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uLCB7IElLZXlzIH0gZnJvbSBcIi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgeyBvcHRpb25zLCBmb3JiaWRkZW5PcHRpb25zLCBnZXRTdWJPcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9uc1wiO1xyXG5pbXBvcnQgSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkT3B0aW9uTmFtZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkT3B0aW9uTmFtZUVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkT3B0aW9uVHlwZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkT3B0aW9uVHlwZUVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkT3B0aW9uVmFsdWVFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZE9wdGlvblZhbHVlRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRTdWJPcHRpb25OYW1lRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRTdWJPcHRpb25UeXBlRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRSZWZlcmVuY2VFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFJlZmVyZW5jZUVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkVGVtcGxhdGVFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFRlbXBsYXRlRXJyb3JcIjtcclxuaW1wb3J0IHsgUmVmZXJlbmNlVHlwZSB9IGZyb20gXCIuL3JlZmVyZW5jZXJcIjtcclxuaW1wb3J0IHsgZ2V0VGVtbWVJZCB9IGZyb20gXCIuL2lkZmllclwiO1xyXG5pbXBvcnQgeyBIaWVyYXJjaHkgfSBmcm9tIFwiLi9tb2RlbHMvSGllcmFyY2h5XCI7XHJcbmltcG9ydCBJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yXCI7XHJcbmltcG9ydCBSZWZlcmVuY2VPdXRPZlJhbmdlRXJyb3IgZnJvbSBcIi4vZXJyb3JzL1JlZmVyZW5jZU91dE9mU2NvcGVFcnJvclwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYW4gb2JqZWN0IGlzIGEgdmFsaWQgaGllcmFyY2h5IG9iamVjdC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIG9iamVjdCB0byBjaGVjay5cclxuICovXHJcbmV4cG9ydCBjb25zdCBpc1ZhbGlkSGllcmFyY2h5ID0gKGhpZXJhcmNoeTogT2JqZWN0KTogYm9vbGVhbiA9PiBoaWVyYXJjaHkgIT0gbnVsbCAmJiB0eXBlb2YgaGllcmFyY2h5ID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShoaWVyYXJjaHkpO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYW4gb2JqZWN0IGlzIGEgdmFsaWQgSFRNTCBlbGVtZW50LlxyXG4gKiBcclxuICogQHBhcmFtIHRhcmdldCBUaGUgb2JqZWN0IHRvIGNoZWNrLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzVmFsaWRIVE1MRWxlbWVudCA9ICh0YXJnZXQ6IEhUTUxFbGVtZW50KTogYm9vbGVhbiA9PiB0YXJnZXQgIT0gbnVsbCAmJiB0YXJnZXQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBvcHRpb25zIGluIGEgaGllcmFyY2h5IG9iamVjdCBmb3IgYW55XHJcbiAqIG9wdGlvbnMgaXQgaGFzIG9yIHZhbHVlcyBpdCBjb250YWlucy5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gdmFsaWRhdGUgdGhlIG9wdGlvbnMgZm9yLlxyXG4gKiBcclxuICogQHRocm93cyBJbnZhbGlkT3B0aW9uTmFtZUVycm9yLCBJbnZhbGlkT3B0aW9uVHlwZUVycm9yLCBJbnZhbGlkT3B0aW9uVmFsdWVFcnJvciwgSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvciwgSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvciwgSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3IsIEludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKGhpZXJhcmNoeTogYW55KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gTG9vcGluZyB0aHJvdWdoIHRoZSBoaWVyYXJjaHkncyBvcHRpb25zLlxyXG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIGluIGhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgICAgIG1hdGNoaW5nT3B0aW9uOiBPcHRpb24gPSA8T3B0aW9uPm9wdGlvbnMuZmlsdGVyKChvcHQ6IE9wdGlvbikgPT4gb3B0LmxhYmVsID09PSBvcHRpb24pWzBdLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uVmFsdWU6IGFueSA9IGhpZXJhcmNoeVtvcHRpb25dO1xyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgb3B0aW9uJ3MgbmFtZS5cclxuICAgICAgICAgICAgaWYgKE9wdGlvbi52YWxpZGF0ZU9wdGlvbk5hbWUobWF0Y2hpbmdPcHRpb24pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRPcHRpb25OYW1lRXJyb3Iob3B0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgb3B0aW9uJ3MgdHlwZS5cclxuICAgICAgICAgICAgY29uc3QgdHlwZVZhbGlkYXRpb246IHsgdmFsaWQ6IGJvb2xlYW4sIHR5cGU6IHN0cmluZyB9ID0gT3B0aW9uLnZhbGlkYXRlT3B0aW9uVHlwZShvcHRpb25WYWx1ZSwgbWF0Y2hpbmdPcHRpb24pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVWYWxpZGF0aW9uLnZhbGlkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRPcHRpb25UeXBlRXJyb3Iob3B0aW9uLCB0eXBlVmFsaWRhdGlvbi50eXBlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgb3B0aW9uJ3MgdmFsdWUuXHJcbiAgICAgICAgICAgIGlmIChPcHRpb24udmFsaWRhdGVPcHRpb25WYWx1ZShvcHRpb25WYWx1ZSwgbWF0Y2hpbmdPcHRpb24pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRPcHRpb25WYWx1ZUVycm9yKG9wdGlvbiwgb3B0aW9uVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBSZXBlYXRpbmcgdGhlIHNhbWUgY2hlY2sgZm9yIG9wdGlvbnMgdGhhdCBoYXZlIGtleXMuXHJcbiAgICAgICAgICAgIGlmICgna2V5cycgaW4gbWF0Y2hpbmdPcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSBvcHRpb24ncyBzdWItb3B0aW9ucy5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1Yk9wdGlvbnMgPSAoPElLZXlzPm1hdGNoaW5nT3B0aW9uKS5rZXlzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFZhbGlkYXRpbmcgdGhlIHN1Yi1vcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVTdWJPcHRpb25zKG9wdGlvbiwgb3B0aW9uVmFsdWUsIHN1Yk9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBWYWxpZGF0aW5nIHJlZmVyZW5jZXMuXHJcbiAgICAgICAgaWYgKHZhbGlkYXRlUmVmZXJlbmNpbmdPcHRpb24oaGllcmFyY2h5KSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yKFwiVGhlIOKAnGZyb23igJ0gb3B0aW9uIG11c3QgYWx3YXlzIGhhdmUgYSDigJxyZWbigJ0gc3ViLW9wdGlvblwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGNvbnRhaW5zIGFueSB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LnRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZTogT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVRlbXBsYXRlcyh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUmVwZWF0aW5nIHRoZSBzYW1lIGNoZWNrIGZvciB0aGUgaGllcmFyY2h5J3MgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkpIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBPYmplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlT3B0aW9ucyhjaGlsZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSB0ZW1wbGF0ZXMgaW4gYSBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKiBcclxuICogQHBhcmFtIHRlbXBsYXRlIFRoZSB0ZW1wbGF0ZSBvYmplY3QgdG8gdmFsaWRhdGUuXHJcbiAqIFxyXG4gKiBAdGhyb3dzIEludmFsaWRPcHRpb25OYW1lRXJyb3IsIEludmFsaWRPcHRpb25UeXBlRXJyb3IsIEludmFsaWRPcHRpb25WYWx1ZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvciwgSW52YWxpZFRlbXBsYXRlRXJyb3IsIEludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUZW1wbGF0ZXModGVtcGxhdGU6IGFueSk6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIGlmICghKCdyZWYnIGluIHRlbXBsYXRlKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRlbXBsYXRlRXJyb3IoXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBMb29waW5nIHRocm91Z2ggdGhlIG9wdGlvbnMgb2YgdGhlIHRlbXBsYXRlLlxyXG4gICAgICAgIGZvciAoY29uc3Qgb3B0aW9uIGluIHRlbXBsYXRlKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgdGVtcGxhdGUgY29udGFpbnMgYW55IGludmFsaWQgb3B0aW9ucy5cclxuICAgICAgICAgICAgaWYgKGZvcmJpZGRlbk9wdGlvbnMuaW5kZXhPZihvcHRpb24pID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvcihvcHRpb24pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVPcHRpb25zKHRlbXBsYXRlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSByZWZlcmVuY2VzIGluIHRoZSBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0byB2YWxpZGF0ZSB0aGUgcmVmZXJlbmNlcyBmb3IuXHJcbiAqIEBwYXJhbSByZWZlcmVuY2VzIFRoZSB2YWxpZCByZWZlcm5jZXMuXHJcbiAqIFxyXG4gKiBAdGhyb3dzIEludmFsaWRSZWZlcmVuY2VFcnJvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUmVmZXJlbmNlcyhoaWVyYXJjaHk6IGFueSwgcmVmZXJlbmNlczogQXJyYXk8UmVmZXJlbmNlVHlwZT4pOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUg4oCccmVm4oCdIG9wdGlvbiBzdGFydHMgd2l0aCB0aGUg4oCcQOKAnSBzeW1ib2wuXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5yZWZbMF0gPT09ICdAJykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3IoXCJcIik7XHJcbiAgICAgICAgfSBcclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgb2JqZWN0IGlzIHJlZmVyZW5jaW5nIGFuIG91dGVyIGVsZW1lbnQuXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLnJlZlswXSA9PT0gJ0AnKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IHN0cmluZyA9ICg8c3RyaW5nPmhpZXJhcmNoeS5mcm9tLnJlZikuc3Vic3RyaW5nKDEpLFxyXG4gICAgICAgICAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQgfCBudWxsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3IoYE5vIG91dGVyIGVsZW1lbnQgY29ycmVzcG9uZHMgdG8gdGhlIHNlbGVjdG9yIOKAnCR7c2VsZWN0b3J94oCdYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2tpbmcgb2YgdGhlIHJlZmVyZW5jZSBleGlzdHMuXHJcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZVJlZmVyZW5jZShoaWVyYXJjaHksIHJlZmVyZW5jZXMpID09PSBmYWxzZSAmJiBoaWVyYXJjaHkuZnJvbS5yZWYgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVmZXJlbmNlRXJyb3IoaGllcmFyY2h5LmZyb20ucmVmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoJ2NoaWxkTm9kZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZDogSGllcmFyY2h5KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVSZWZlcmVuY2VzKGNoaWxkLCByZWZlcmVuY2VzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IHRlbXBsYXRlcy5cclxuICAgICAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS50ZW1wbGF0ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LnRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZTogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVSZWZlcmVuY2VzKHRlbXBsYXRlLCByZWZlcmVuY2VzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgYSBwYXNzZWQgcmVmZXJlbmNlLlxyXG4gKiBcclxuICogQHBhcmFtIHJlZmVyZW5jZSBUaGUgcmVmZXJlbmNlIHRvIHZhbGlkYXRlLlxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlcyBUaGUgdmFsaWQgcmVmZXJlbmNlcy5cclxuICovXHJcbmNvbnN0IHZhbGlkYXRlUmVmZXJlbmNlID0gKGhpZXJhcmNoeTogYW55LCByZWZlcmVuY2VzOiBBcnJheTxSZWZlcmVuY2VUeXBlPik6IGJvb2xlYW4gPT4gcmVmZXJlbmNlcy5maWx0ZXIoKHJlZjogUmVmZXJlbmNlVHlwZSkgPT4gcmVmLmhpZXJhcmNoeS5yZWYgPT09IGhpZXJhcmNoeS5mcm9tLnJlZiAmJiBnZXRUZW1tZUlkKGhpZXJhcmNoeSkgIT09IGdldFRlbW1lSWQocmVmLmhpZXJhcmNoeSkpWzBdICE9IG51bGw7XHJcblxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB3aGV0aGVyIHRlbXBsYXRlcyBhcmUgcmVmZXJlbmNpbmcgbm9uLXRlbXBsYXRlIGVsZW1lbnRcclxuICogb3Igbm90LCBpbiB3aGljaCBjYXNlLCBhbiBlcnJvciBpcyB0aHJvd24uXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdG8gdmFsaWRhdGUgdGhlIHRlbXBsYXRlIGluaGVyaXRhbmNlIGZvci5cclxuICogQHBhcmFtIHJlZmVyZW5jZXMgVGhlcmUgdmFsaWQgcmVmZXJlbmNlcy5cclxuICogXHJcbiAqIEB0aHJvd3MgSW52YWxpZFRlbXBsYXRlUmVmZXJlbmNpbmdFcnJvclxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlVGVtcGxhdGVSZWZlcmVuY2UoaGllcmFyY2h5OiBhbnksIHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gR2V0dGluZyB0aGUgdGVtcGxhdGVzLlxyXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlcyA9IGhpZXJhcmNoeS50ZW1wbGF0ZXM7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZXJlIGFyZSBhbnkgdmFsaWQgdGVtcGxhdGVzLlxyXG4gICAgICAgIGlmICh0ZW1wbGF0ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgdGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgdGVtcGxhdGUncyByZWZlcmVuY2luZyB2YWx1ZSBpcyB2YWxpZC5cclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZS5mcm9tLnJlZi5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZWRFbGVtZW50OiBhbnkgPSByZWZlcmVuY2VzLmZpbHRlcigocmVmOiBSZWZlcmVuY2VUeXBlKSA9PiAoPEhpZXJhcmNoeT5yZWYuaGllcmFyY2h5KS5yZWYgPT09IHRlbXBsYXRlLmZyb20ucmVmKVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNUZW1wbGF0ZTogYm9vbGVhbiA9IGdldFRlbW1lSWQocmVmZXJlbmNlZEVsZW1lbnQuaGllcmFyY2h5KS5sZW5ndGggPT09IDQ7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNUZW1wbGF0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRlbXBsYXRlUmVmZXJlbmNpbmdFcnJvcih0ZW1wbGF0ZS5yZWYsIHRlbXBsYXRlLmZyb20ucmVmKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgdmFsaWRhdGVUZW1wbGF0ZVJlZmVyZW5jZShjaGlsZCwgcmVmZXJlbmNlcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaChlKVxyXG4gICAge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB3aGV0aGVyIGEgaGllcmFyY2h5IG9iamVjdCBpcyByZWZlcmVuY2luZyBpdHMgY2hpbGQuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdG8gdmFsaWRhdGUuXHJcbiAqIEBwYXJhbSByZWZlcmVuY2VzIFRoZXJlIHZhbGlkIHJlZmVyZW5jZXMuXHJcbiAqIEBwYXJhbSBkZXB0aCBUaGUgZGVwdGggb2YgdGhlIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQYXJlbnRUb0NoaWxkUmVmZXJlbmNlKGhpZXJhcmNoeTogYW55LCByZWZlcmVuY2VzOiBBcnJheTxSZWZlcmVuY2VUeXBlPiwgZGVwdGg6IG51bWJlciA9IDApOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICBjb25zdCByZWY6IHN0cmluZyA9IGhpZXJhcmNoeS5mcm9tLnJlZjtcclxuXHJcbiAgICAgICAgLy8gSW5jcmVtZW50aW5nIHRoZSBkZXB0aFxyXG4gICAgICAgIGRlcHRoKys7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSByZWZlcmVuY2UgaXMgdmFsaWQuXHJcbiAgICAgICAgaWYgKHJlZiAhPT0gXCJcIiAmJiByZWZbMF0gIT09ICdAJykge1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgcmVmZXJlbmNlZCBoaWVyYXJjaHkuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZWRIaWVyYXJjaHk6IFJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VzLmZpbHRlcigocmVmT2JqZWN0OiBSZWZlcmVuY2VUeXBlKSA9PiAoPEhpZXJhcmNoeT5yZWZPYmplY3QuaGllcmFyY2h5KS5yZWYgPT09IHJlZiAmJiBkZXB0aCA+PSByZWZPYmplY3QuZGVwdGgpWzBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlZmVyZW5jZWRIaWVyYXJjaHkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZU91dE9mUmFuZ2VFcnJvcihcIlwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoJ2NoaWxkTm9kZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZDogSGllcmFyY2h5KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVQYXJlbnRUb0NoaWxkUmVmZXJlbmNlKGNoaWxkLCByZWZlcmVuY2VzLCBkZXB0aCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkudGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlUGFyZW50VG9DaGlsZFJlZmVyZW5jZSh0ZW1wbGF0ZSwgcmVmZXJlbmNlcywgZGVwdGgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbiAgICBjYXRjaChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSBzdWItb3B0aW9ucyBvZiBhbm90aGVyIG9wdGlvbi5cclxuICogQHBhcmFtIG9wdGlvbk5hbWUgVGhlIG5hbWUgb2YgdGhlIG9wdGlvbiB0byB2YWxpZGF0ZSB0aGUgc3ViLW9wdGlvbnMgZm9yLiBcclxuICogQHBhcmFtIG9wdGlvblZhbHVlIFRoZSBzdWItb3B0aW9ucyB0byB2YWxpZGF0ZS5cclxuICogQHBhcmFtIHN1Yk9wdGlvbnMgVGhlIGV4cGVjdGVkIHN1Yi1vcHRpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVTdWJPcHRpb25zKG9wdGlvbk5hbWU6IHN0cmluZywgb3B0aW9uVmFsdWU6IGFueSwgc3ViT3B0aW9uczogSUtleXMpOiB2b2lkIHtcclxuXHJcbiAgICAvLyBMb29waW5nIHRocm91Z2ggdGhlIGV4cGVjdGVkIHN1Yi1vcHRpb25zLlxyXG4gICAgZm9yIChjb25zdCBzdWJPcHRpb24gaW4gb3B0aW9uVmFsdWUpIHtcclxuXHJcbiAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgbWF0Y2hpbmdTdWJPcHRpb246IE9wdGlvbiA9IGdldFN1Yk9wdGlvbnMob3B0aW9uTmFtZSkuZmlsdGVyKChzdWJPcHRpb25zOiBPcHRpb24pID0+IHN1Yk9wdGlvbnMubGFiZWwgPT09IHN1Yk9wdGlvbilbMF0sXHJcbiAgICAgICAgICAgIHN1Yk9wdGlvblZhbHVlOiBhbnkgPSBvcHRpb25WYWx1ZVtzdWJPcHRpb25dO1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiBhIHN1Yi1vcHRpb24gaXMgaW4gdGhlIHBhcmVudCBvcHRpb24uXHJcbiAgICAgICAgaWYgKHN1Yk9wdGlvbiBpbiBzdWJPcHRpb25zKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBzdWItb3B0aW9uJ3MgbmFtZS5cclxuICAgICAgICAgICAgaWYgKE9wdGlvbi52YWxpZGF0ZU9wdGlvbk5hbWUobWF0Y2hpbmdTdWJPcHRpb24pID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTdWJPcHRpb25OYW1lRXJyb3Iob3B0aW9uTmFtZSwgc3ViT3B0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgc3ViLW9wdGlvbnMncyBkYXRhIHR5cGUuXHJcbiAgICAgICAgICAgIGNvbnN0IHR5cGVWYWxpZGF0aW9uOiB7IHZhbGlkOiBib29sZWFuLCB0eXBlOiBzdHJpbmcgfSA9IE9wdGlvbi52YWxpZGF0ZU9wdGlvblR5cGUoc3ViT3B0aW9uVmFsdWUsIG1hdGNoaW5nU3ViT3B0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlVmFsaWRhdGlvbi52YWxpZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yKHN1Yk9wdGlvbiwgdHlwZVZhbGlkYXRpb24udHlwZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFZhbGlkYXRpbmcgdGhlIHN1Yi1vcHRpb24ncyB2YWx1ZS5cclxuICAgICAgICAgICAgaWYgKE9wdGlvbi52YWxpZGF0ZU9wdGlvblZhbHVlKHN1Yk9wdGlvblZhbHVlLCBtYXRjaGluZ1N1Yk9wdGlvbikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3Ioc3ViT3B0aW9uLCBzdWJPcHRpb25WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgna2V5cycgaW4gbWF0Y2hpbmdTdWJPcHRpb24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSBvcHRpb24ncyBzdWItb3B0aW9ucy5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN1Yk9wdGlvblZhbHVlID0gb3B0aW9uVmFsdWVbc3ViT3B0aW9uXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN1Yk9wdGlvbnMoc3ViT3B0aW9uLCBzdWJPcHRpb25WYWx1ZSwgKDxJS2V5cz5tYXRjaGluZ1N1Yk9wdGlvbikua2V5cyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yKG9wdGlvbk5hbWUsIHN1Yk9wdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyB0aGUgcmVmZXJlbmNlcyBpbiBhIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIHZhbGlkYXRlIHRoZSByZWZlcmVuY2VzIGZvci5cclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlUmVmZXJlbmNpbmdPcHRpb24oaGllcmFyY2h5OiBhbnkpOiBib29sZWFuIHtcclxuXHJcbiAgICBpZiAoJ2Zyb20nIGluIGhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICByZXR1cm4gJ3JlZicgaW4gaGllcmFyY2h5LmZyb207XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFdoYXQncyByZXNwb25zaWJsZSBmb3Igc2FuaXRpemluZyB0aGUgaW5wdXRcclxuICogYW5kIHBvcHVsYXRpbmcgdGhlIGRlZmF1bHRzLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uLCB7IElLZXlzIH0gZnJvbSBcIi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgeyBvcHRpb25zLCBmb3JiaWRkZW5PcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9uc1wiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTYW5pdGl6ZXMgYSBoaWVyYXJjaHkgb2JqZWN0IGludG8gYW4gYXByb3ByaWF0ZSBvbmUuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIHNhbml0aXplLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplKGhpZXJhcmNoeTogYW55KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gTG9vcGluZyB0aHJvdWdoIHRoZSBhdmFpbGFibGUgb3B0aW9ucy5cclxuICAgICAgICBvcHRpb25zLmZvckVhY2goKG9wdDogT3B0aW9uKSA9PiB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIShvcHQubGFiZWwgaW4gaGllcmFyY2h5KSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFBvcHVsYXRpbmcgYSBkZWZhdWx0LlxyXG4gICAgICAgICAgICAgICAgaGllcmFyY2h5W29wdC5sYWJlbF0gPSBvcHQuZGVmYXVsdDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTYW5pdGl6aW5nIHRoZSBzdWItb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgaWYgKCdrZXlzJyBpbiBvcHQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gKDxJS2V5cz5vcHQpLmtleXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Yk9wdGlvbjogT3B0aW9uID0gKDxJS2V5cz5vcHQpLmtleXNba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbml0aXppbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbml0aXplT3B0aW9uKGhpZXJhcmNoeVsoPE9wdGlvbj5vcHQpLmxhYmVsXSwgc3ViT3B0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFJlbW92aW5nIGR1cGxpY2F0ZXMuXHJcbiAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMgPSBoaWVyYXJjaHkuY2xhc3Nlcy5maWx0ZXIoKGNsczogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiBoaWVyYXJjaHkuY2xhc3Nlcy5pbmRleE9mKGNscykgPT09IGluZGV4KTtcclxuXHJcbiAgICAgICAgLy8gU29ydGluZyB0aGUgY2xhc3Nlcy5cclxuICAgICAgICBoaWVyYXJjaHkuY2xhc3Nlcy5zb3J0KCk7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgaGFzIGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBzYW5pdGl6ZShjaGlsZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBoYXMgdGVtcGxhdGVzLlxyXG4gICAgICAgIGlmICgndGVtcGxhdGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LnRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkudGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBzYW5pdGl6ZVRlbXBsYXRlKHRlbXBsYXRlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBTYW5pdGl6ZXMgYW4gb3B0aW9uLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0byBzYW5pdGl6ZSB0aGUgb3B0aW9uIGZvci5cclxuICogQHBhcmFtIG9wdGlvbiBUaGUgb3B0aW9uIHRvIHNhbml0aXplLlxyXG4gKi9cclxuZnVuY3Rpb24gc2FuaXRpemVPcHRpb24oaGllcmFyY2h5OiBhbnksIG9wdGlvbjogT3B0aW9uKTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgaWYgKCEob3B0aW9uLmxhYmVsIGluIGhpZXJhcmNoeSkpIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeVtvcHRpb24ubGFiZWxdID0gb3B0aW9uLmRlZmF1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoJ2tleXMnIGluIG9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gKDxJS2V5cz5vcHRpb24pLmtleXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgICAgIHN1YkhpZXJhcmNoeTogYW55ID0gaGllcmFyY2h5Wyg8T3B0aW9uPm9wdGlvbikubGFiZWxdLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Yk9wdGlvbiA9ICg8SUtleXM+b3B0aW9uKS5rZXlzW2tleV07XHJcblxyXG4gICAgICAgICAgICAgICAgc2FuaXRpemVPcHRpb24oc3ViSGllcmFyY2h5LCBzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBTYW5pdGl6ZXMgdGVtcGxhdGVzLlxyXG4gKiBcclxuICogQHBhcmFtIHRlbXBsYXRlIFRoZSB0ZW1wbGF0ZSB0byBzYW5pdGl6ZS5cclxuICovXHJcbmZ1bmN0aW9uIHNhbml0aXplVGVtcGxhdGUodGVtcGxhdGU6IGFueSk6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIC8vIExvb3BpbmcgdGhyb3VnaCB0aGUgYWxsb3dlZCBvcHRpb25zIGluIHRlbXBsYXRlcy5cclxuICAgICAgICBvcHRpb25zXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKG9wdDogT3B0aW9uKSA9PiBmb3JiaWRkZW5PcHRpb25zLmluZGV4T2Yob3B0LmxhYmVsKSA9PT0gLTEpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKChvcHQ6IE9wdGlvbikgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIG9mIHRoZSB0ZW1wbGF0ZSBkb2Vzbid0IGhhdmUgYSBzYWlkIG9wdGlvbi5cclxuICAgICAgICAgICAgICAgIGlmICghKG9wdC5sYWJlbCBpbiB0ZW1wbGF0ZSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUG9wdWxhdGluZyBhIGRlZmF1bHQuXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVbb3B0LmxhYmVsXSA9IG9wdC5kZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU2FuaXRpemluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJ2tleXMnIGluIG9wdCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gKDxJS2V5cz5vcHQpLmtleXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSBzdWItb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9uOiBPcHRpb24gPSAoPElLZXlzPm9wdCkua2V5c1trZXldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNhbml0aXppbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW5pdGl6ZU9wdGlvbih0ZW1wbGF0ZVsoPE9wdGlvbj5vcHQpLmxhYmVsXSwgc3ViT3B0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBXaGF0IHByb2Nlc3NlcyBhbGwgb2YgdGhlIHJlZmVyZW5jZXMuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCB7IEhpZXJhcmNoeSB9IGZyb20gXCIuL21vZGVscy9IaWVyYXJjaHlcIjtcclxuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tIFwiLi9tb2RlbHMvVGVtcGxhdGVcIjtcclxuaW1wb3J0IHsgdmFsaWRhdGVSZWZlcmVuY2VzLCB2YWxpZGF0ZVRlbXBsYXRlUmVmZXJlbmNlLCB2YWxpZGF0ZVBhcmVudFRvQ2hpbGRSZWZlcmVuY2UgfSBmcm9tIFwiLi92YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgZ2V0VGVtbWVJZCB9IGZyb20gXCIuL2lkZmllclwiO1xyXG5pbXBvcnQgeyBvcHRpb25zIH0gZnJvbSBcIi4vb3B0aW9uc1wiO1xyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG4vKipcclxuICogVGhlIHJlZmVyZW5jZSB0eXBlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUmVmZXJlbmNlVHlwZSA9IHsgZGVwdGg6IG51bWJlciwgaGllcmFyY2h5OiBhbnkgfTtcclxuXHJcblxyXG4vKipcclxuICogVGFrZXMgY2FyZSBvZiBhbGwgdGhlIGluaGVyaXRhbmNlIGFuZCByZWZlcmVuY2VzIHN0dWZmLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IHRvIHByb2Nlc3MgdGhlIHJlZmVyZW5jZXMgZm9yLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHByb2Nlc3MoaGllcmFyY2h5OiBhbnkpOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICBjb25zdCByZWZlcmVuY2VzOiBBcnJheTxSZWZlcmVuY2VUeXBlPiA9IGdldFJlZmVyZW5jZXMoaGllcmFyY2h5KTtcclxuXHJcbiAgICAgICAgLy8gVmFsaWRhdGluZyBhbGwgb2YgdGhlIHJlZmVyZWNlcy5cclxuICAgICAgICB2YWxpZGF0ZVJlZmVyZW5jZXMoaGllcmFyY2h5LCByZWZlcmVuY2VzKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGVtcGxhdGVzIGFyZSBpbmhlcml0aW5nIGhpZXJhcmNoeSBvYmplY3RzLlxyXG4gICAgICAgIHZhbGlkYXRlVGVtcGxhdGVSZWZlcmVuY2UoaGllcmFyY2h5LCByZWZlcmVuY2VzKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgYSBwYXJlbnQgaXMgdHJ5aW5nIHRvIHJlZmVyZW5jZSB0aGVpciBjaGlsZGVybi5cclxuICAgICAgICB2YWxpZGF0ZVBhcmVudFRvQ2hpbGRSZWZlcmVuY2UoaGllcmFyY2h5LCByZWZlcmVuY2VzKTtcclxuXHJcbiAgICAgICAgLy8gUHJvY2Vzc2luZyB0ZW1wbGF0ZSByZWZlcmVuY2VzLlxyXG4gICAgICAgIHByb2Nlc3NUZW1wbGF0ZXMoaGllcmFyY2h5LCByZWZlcmVuY2VzLmZpbHRlcigocmVmOiBSZWZlcmVuY2VUeXBlKSA9PiBpc1RlbXBsYXRlKHJlZi5oaWVyYXJjaHkpKSk7XHJcblxyXG4gICAgICAgIC8vIFByb2Nlc3NpbmcgaGllcmFyY2hpZXMgKG5vbi10ZW1wbGF0ZSkgcmVmZXJlbmNlcy5cclxuICAgICAgICBwcm9jZXNzSGllcmFyY2hpZXMoaGllcmFyY2h5LCByZWZlcmVuY2VzKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQ2hlY2tzIGlmIGEgaGllcmFyY2h5IGlzIGEgdGVtcGxhdGUgb3Igbm90LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IHRvIGNoZWNrLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzVGVtcGxhdGUgPSAoaGllcmFyY2h5OiBhbnkpOiBib29sZWFuID0+IGdldFRlbW1lSWQoaGllcmFyY2h5KS5sZW5ndGggPT09IDQ7XHJcblxyXG5cclxuLyoqXHJcbiAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHJlZmVyZW5jZXMgZm9yIHRlbXBsYXRlIGhpZXJhcmNoaWVzLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IHRoYXQgY29udGFpbiB0ZW1wbGF0ZXMgdG8gcmVmZXJlbmNlLlxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlcyBUaGUgdmFsaWQgcmVmZXJlbmNlcy5cclxuICovXHJcbmZ1bmN0aW9uIHByb2Nlc3NUZW1wbGF0ZXMoaGllcmFyY2h5OiBhbnksIHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkudGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZS5mcm9tLnJlZiAhPT0gXCJcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0ZW1wbGF0ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgcHJvcGVyIG9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogYW55ID0gb3B0aW9ucy5maWx0ZXIoKG9wdDogT3B0aW9uKSA9PiBvcHQubGFiZWwgPT09IGtleSlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VkSGllcmFyY2h5OiBSZWZlcmVuY2VUeXBlID0gcmVmZXJlbmNlcy5maWx0ZXIoKHJlZjogUmVmZXJlbmNlVHlwZSkgPT4gcmVmLmhpZXJhcmNoeS5yZWYgPT09IHRlbXBsYXRlLmZyb20ucmVmKVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluaGVyaXRpbmcgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24uaW5oZXJpdCh0ZW1wbGF0ZSwgcmVmZXJlbmNlZEhpZXJhcmNoeS5oaWVyYXJjaHlba2V5XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IEhpZXJhcmNoeSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHByb2Nlc3NUZW1wbGF0ZXMoY2hpbGQsIHJlZmVyZW5jZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFByb2Nlc3NlcyBhbGwgb2YgdGhlIHJlZmVyZW5jZXMgZm9yIGhpZXJhcmNoeSBvYmplY3RzIChub24tdGVtcGxhdGVzKS5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoaWVzIHRvIHJlZmVyZW5jZS5cclxuICogQHBhcmFtIHJlZmVyZW5jZSBUaGUgdmFsaWQgcmVmZXJlbmNlcy5cclxuICovXHJcbmZ1bmN0aW9uIHByb2Nlc3NIaWVyYXJjaGllcyhoaWVyYXJjaHk6IGFueSwgcmVmZXJlbmNlczogQXJyYXk8UmVmZXJlbmNlVHlwZT4pOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBIaWVyYXJjaHkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzSGllcmFyY2hpZXMoY2hpbGQsIHJlZmVyZW5jZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5yZWYgIT09IFwiXCIpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIElmIGFuIG91dGVyIGVsZW1lbnQgaXMgcmVmZXJlbmNlZC5cclxuICAgICAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLnJlZlswXSA9PT0gXCJAXCIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gaGllcmFyY2h5LmZyb20ucmVmLnN1YnN0cmluZygxKSxcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHByb3BlciBvcHRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uOiBhbnkgPSBvcHRpb25zLmZpbHRlcigob3B0OiBPcHRpb24pID0+IG9wdC5sYWJlbCA9PT0ga2V5KVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvcHRpb24uZ2V0S2V5RnJvbUVsZW1lbnQoZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmIGtleSA9PT0gJ2F0dHJpYnV0ZXMnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbmhlcml0aW5nIHRoZSB2YWx1ZS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLmluaGVyaXQoaGllcmFyY2h5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZWRIaWVyYXJjaHk6IFJlZmVyZW5jZVR5cGUgPSByZWZlcmVuY2VzLmZpbHRlcigocmVmOiBSZWZlcmVuY2VUeXBlKSA9PiByZWYuaGllcmFyY2h5LnJlZiA9PT0gaGllcmFyY2h5LmZyb20ucmVmKVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBoaWVyYXJjaHkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgcHJvcGVyIG9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHRpb246IE9wdGlvbiA9IG9wdGlvbnMuZmlsdGVyKChvcHQ6IE9wdGlvbikgPT4gb3B0LmxhYmVsID09PSBrZXkpWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJbmhlcml0aW5nIHRoZSB2YWx1ZS5cclxuICAgICAgICAgICAgICAgICAgICBvcHRpb24uaW5oZXJpdChoaWVyYXJjaHksIHJlZmVyZW5jZWRIaWVyYXJjaHkuaGllcmFyY2h5W2tleV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXR0aW5nIGFsbCB0aGUgcmVmZXJlbmNlcyBpbiBhIHNhaWQgaGllcmFyY2h5LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0byBnZXQgdGhlIHJlZmVyZW5jZXMgZnJvbS5cclxuICogQHBhcmFtIGRlcHRoIFRoZSBjdXJyZW50IGRlcHRoIGluIHRoZSBzYWlkIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VzKGhpZXJhcmNoeTogYW55LCBkZXB0aDogbnVtYmVyID0gMCk6IEFycmF5PFJlZmVyZW5jZVR5cGU+IHtcclxuXHJcbiAgICBjb25zdCByZWZlcmVuY2VzOiBBcnJheTxSZWZlcmVuY2VUeXBlPiA9IFtdO1xyXG5cclxuICAgIC8vIEluY3JlbWVudGluZyB0aGUgZGVwdGguXHJcbiAgICBkZXB0aCsrO1xyXG5cclxuICAgIC8vIENoZWNraW5nIGlmIHRoZSByZWZlcmVuY2UgaXMgdmFsaWQuXHJcbiAgICBpZiAoaGllcmFyY2h5LnJlZiAhPT0gXCJcIikge1xyXG5cclxuICAgICAgICByZWZlcmVuY2VzLnB1c2goe1xyXG4gICAgICAgICAgICBkZXB0aDogZGVwdGgsXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeTogaGllcmFyY2h5XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSBjaGlsZHJlbi5cclxuICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IEhpZXJhcmNoeSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKC4uLmdldFJlZmVyZW5jZXMoY2hpbGQsIGRlcHRoKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSB0ZW1wbGF0ZXMuXHJcbiAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS50ZW1wbGF0ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICBoaWVyYXJjaHkudGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBUZW1wbGF0ZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgLy8gU3Vic3RyYWN0aW5nIDEgdG8gbWFrZSB0ZW1wbGF0ZXMgb24gdGhlIHNhbWUgZGVwdGggbGV2ZWxcclxuICAgICAgICAgICAgLy8gYXMgdGhlaXIgaGllcmFyY2h5IHBhcmVudC5cclxuICAgICAgICAgICAgcmVmZXJlbmNlcy5wdXNoKC4uLmdldFJlZmVyZW5jZXModGVtcGxhdGUsIGRlcHRoIC0gMSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybmluZyBhbGwgZm91bmQgcmVmZXJlbmNlcy5cclxuICAgIHJldHVybiByZWZlcmVuY2VzO1xyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBoaWVyYXJjaHkgb2JqZWN0XHJcbiAqIGlzIG5vdCB2YWxpZC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZEhpZXJhcmNoeUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRIaWVyYXJjaHlFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJUaGUgaGllcmFyY2h5IG9iamVjdCBpcyBub3QgdmFsaWRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSB0YXJnZXQgaXMgbm90IGEgdmFsaWRcclxuICogSFRNTCBlbGVtZW50LlxyXG4gKi9cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFRhcmdldEVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRUYXJnZXRFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJUaGUgdGFyZ2V0IGlzIG5vdCBhIHZhbGlkIEhUTUwgZWxlbWVudFwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFxyXG4gKiBAbmFtZTogICAgICAgdGVtbWVqc1xyXG4gKiBAdmVyc2lvbjogICAgMS4wLjBcclxuICogQGF1dGhvcjogICAgIEVPdXNzYW1hXHJcbiAqIEBsaWNlbnNlICAgICBNSVRcclxuICogQHNvdXJjZTogICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9FT3Vzc2FtYS90ZW1tZWpzXHJcbiAqIFxyXG4gKiBUZW1tZSAob3IgRW1tZXQgaW4gcmV2ZXJzZSkgaXMgdG8gamF2YXNjcmlwdCB3aGF0IEVtbWV0IGlzIHRvIEhUTUwgYW5kIENTUyxcclxuICogd2l0aCBubyBkb3VidHMsIEVtbWV0IHNhdmVkIHVzIGZyb20gdGhlIGhlYWRhY2hlIG9mIHdvcmtpbmcgd2l0aCBIVE1MIGFuZCBDU1MsIFxyXG4gKiBhbmQgbm93LCBUZW1tZSBpcyBkb2luZyBKYXZhc2NyaXB0IHRoZSBzYW1lIGZhdm91ciB0b28uXHJcbiAqIFxyXG4gKi9cclxuXHJcbiBcclxuaW1wb3J0ICogYXMgVmFsaWRhdG9yIGZyb20gXCIuL21vZHVsZXMvdmFsaWRhdG9yXCI7XHJcbmltcG9ydCAqIGFzIFNhbml0aXplciBmcm9tIFwiLi9tb2R1bGVzL3Nhbml0aXplclwiO1xyXG5pbXBvcnQgKiBhcyBSZWZlcmVuY2VyIGZyb20gXCIuL21vZHVsZXMvcmVmZXJlbmNlclwiO1xyXG5pbXBvcnQgKiBhcyBQYXJzZXIgZnJvbSAnLi9tb2R1bGVzL3BhcnNlcic7XHJcbmltcG9ydCAqIGFzIElkZmllciBmcm9tIFwiLi9tb2R1bGVzL2lkZmllclwiO1xyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi9tb2R1bGVzL21vZGVscy9UZW1teUVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkSGllcmFyY2h5RXJyb3IgZnJvbSBcIi4vbW9kdWxlcy9lcnJvcnMvSW52YWxpZEhpZXJhcmNoeUVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkVGFyZ2V0RXJyb3IgZnJvbSBcIi4vbW9kdWxlcy9lcnJvcnMvSW52YWxpZFRhcmdldEVycm9yXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBlbnRyeSBwb2ludCBvZiBUZW1tZSwgaXQncyB3aGF0IGluaXRpYXRlcyBldmVyeXRoaW5nXHJcbiAqIGZyb20gc2FuaXRpemluZywgdG8gcGFyc2luZywgbGlrZSBhIGJvc3MuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgbWFwcyB0aGUgSFRNTCBza2VsZXRvbi5cclxuICogQHBhcmFtIHRhcmdldCBUaGUgSFRNTCBlbGVtZW50IHRoYXQgd2lsbCBob3N0IHRoZSBwYXJzZWQgc2tlbGV0b24uXHJcbiAqIEBwYXJhbSBlbmRDYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBleGVjdXRlIHdoZW4gdGhlIHNrZWxldG9uIGhhcyBiZWVuIHBhcnNlZC5cclxuICogQHBhcmFtIG5vZGVDYWxsYmFjayBUaGUgZnVuY3Rpb24gdGhhdCBleGVjdXRlcyB3aGVuZXZlciBhbiBlbGVtZW50IGhhcyBiZWVuIHBhcnNlZC5cclxuICogXHJcbiAqIEB0aHJvd3MgSW52YWxpZFRhcmdldEVycm9yLCBJbnZhbGlkSGllcmFyY2h5RXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShoaWVyYXJjaHk6IE9iamVjdCwgdGFyZ2V0OiBIVE1MRWxlbWVudCwgZW5kQ2FsbGJhY2s6IChyZXN1bHRlZEhpZXJhcmNoeTogYW55KSA9PiB2b2lkID0gKGhpZXJhcmNoeSkgPT4ge30sIG5vZGVDYWxsYmFjazogKHRlbW1lSWQ6IHN0cmluZywgY3VycmVudEhpZXJhcmNoeTogYW55LCBkZXB0aDogbnVtYmVyKSA9PiB2b2lkKTogT2JqZWN0IHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgdGFyZ2V0IGlzIGEgdmFsaWQgSFRNTCBlbGVtZW50IGFuZCB0aHJvd2luZ1xyXG4gICAgICAgIC8vIGFuIGVycm9yIGlmIGl0J3Mgbm90LlxyXG4gICAgICAgIGlmICghVmFsaWRhdG9yLmlzVmFsaWRIVE1MRWxlbWVudCh0YXJnZXQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkVGFyZ2V0RXJyb3IoXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBpcyBhbmQgdGhyb3dpbmdcclxuICAgICAgICAvLyBhbiBlcnJvciBpZiBpdCdzIG5vdC5cclxuICAgICAgICBpZiAoIVZhbGlkYXRvci5pc1ZhbGlkSGllcmFyY2h5KGhpZXJhcmNoeSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRIaWVyYXJjaHlFcnJvcihcIlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGNvbnRhaW5zXHJcbiAgICAgICAgLy8gdmFsaWQgb3B0aW9ucy5cclxuICAgICAgICBWYWxpZGF0b3IudmFsaWRhdGVPcHRpb25zKGhpZXJhcmNoeSk7XHJcblxyXG4gICAgICAgIC8vIFNhbml0aXppbmcgdGhlIGhpZXJhcmNoeS5cclxuICAgICAgICBTYW5pdGl6ZXIuc2FuaXRpemUoaGllcmFyY2h5KTtcclxuXHJcbiAgICAgICAgLy8gQXNzaWduaW5nIHRlbW1lSWRzIHRvIHRoZSBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gICAgICAgIElkZmllci5pZGZ5KGhpZXJhcmNoeSk7XHJcblxyXG4gICAgICAgIC8vIFByb2Nlc3NpbmcgYWxsIG9mIHRoZSByZWZlcmVuY2VzLlxyXG4gICAgICAgIFJlZmVyZW5jZXIucHJvY2VzcyhoaWVyYXJjaHkpO1xyXG5cclxuICAgICAgICAvLyBQYXJzaW5nIHRoZSBoaWVyYXJjaHkgaW50byBhbiBIVE1MIHRyZWUuXHJcbiAgICAgICAgUGFyc2VyLnBhcnNlKGhpZXJhcmNoeSwgbm9kZUNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgLy8gRXhlY3V0aW5nIHRoZSBlbmQgY2FsbGJhY2suXHJcbiAgICAgICAgZW5kQ2FsbGJhY2soaGllcmFyY2h5KTtcclxuXHJcbiAgICAgICAgLy8gUmV0dXJuaW5nIHRoZSByZXN1bHRlZCBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gICAgICAgIHJldHVybiBoaWVyYXJjaHk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICAvLyBBcHBlbmRpbmcgYSB0YWcgaW4gZnJvbnQgb2YgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICAoPFRlbW15RXJyb3I+ZSkubWVzc2FnZSA9IGBbVGVtbWVdOiAke2UubWVzc2FnZX0uYDtcclxuXHJcbiAgICAgICAgLy8gVGhyb3dpbmcgdGhlIGVycm9yLlxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFdoYXQgcGFyc2VzIHRoZSBoaWVyYXJjaHkgdG8gYW4gSFRNTCB0cmVlLlxyXG4gKi9cclxuXHJcblxyXG4vKipcclxuICogUGFyc2VzIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGludG8gYW4gSFRNTCBlbGVtZW50LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0byBwYXJzZS5cclxuICogQHBhcmFtIG5vZGVDYWxsYmFjayBUaGUgY2FsbGJhY2sgdGhhdCBleGVjdXRlcyB3aGVuZXZlciBhbiBIVE1MIGVsZW1lbnQgaGFzIGJlZW4gY3JlYXRlZC5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXJzZShoaWVyYXJjaHk6IGFueSwgbm9kZUNhbGxiYWNrOiAodGVtbWVJZDogc3RyaW5nLCBjdXJyZW50SGllcmFyY2h5OiBhbnksIGRlcHRoOiBudW1iZXIpID0+IHZvaWQpOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZygncGFyc2luZy4uLicpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=