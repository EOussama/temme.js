var Temme=function(t){var n={};function r(o){if(n[o])return n[o].exports;var e=n[o]={i:o,l:!1,exports:{}};return t[o].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=t,r.c=n,r.d=function(t,n,o){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var e in t)r.d(o,e,function(n){return t[n]}.bind(null,e));return o},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";r.r(n);var o,e=function(){function t(t,n,r,o){this.label=t,this.type=n,this.values=r,this.default=o}return t.validateOptionType=function(t,n){var r="";return{valid:(r=Array.isArray(t)?"array":typeof t)===n.type,type:r}},t.validateOptionValue=function(t,n){return!(null!=n&&n.values.length>0)||-1!==n.values.indexOf(t)},t.validateOptionName=function(t){return null!=t},t}(),i=(o=function(t,n){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}o(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),c=function(t){function n(){return t.call(this,"ref","string",[],"")||this}return i(n,t),n}(e),u=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),a=function(t){function n(){return t.call(this,"name","string",[],"div")||this}return u(n,t),n}(e),f=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),s=function(t){function n(){return t.call(this,"id","string",[],"")||this}return f(n,t),n}(e),p=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),l=function(t){function n(){return t.call(this,"value","string",[],"")||this}return p(n,t),n}(e),y=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),_=function(t){function n(){return t.call(this,"type","string",["text","html"],"text")||this}return y(n,t),n}(e),h=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new _).default,value:(new l).default})||this;return n.keys={type:new _,value:new l},n}return h(n,t),n}(e),O=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),w=function(t){function n(){return t.call(this,"temmeIds","array",[],[])||this}return O(n,t),n}(e),d=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),b=function(t){function n(){return t.call(this,"templates","array",[],[])||this}return d(n,t),n}(e),m=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),g=function(t){function n(){return t.call(this,"classes","array",[],[])||this}return m(n,t),n}(e),j=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),P=function(t){function n(){return t.call(this,"childrenNodes","array",[],[])||this}return j(n,t),n}(e),A=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),T=function(t){function n(){return t.call(this,"attributes","object",[],{})||this}return A(n,t),n}(e),E=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),k=function(t){function n(){return t.call(this,"dataset","object",[],{})||this}return E(n,t),n}(e),I=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),N=function(t){function n(){return t.call(this,"mode","string",["append","override"],"append")||this}return I(n,t),n}(e),x=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),S=function(t){function n(){return t.call(this,"placement","string",["after","before"],"after")||this}return x(n,t),n}(e),M=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),V=function(t){function n(){return t.call(this,"allow","boolean",[],!1)||this}return M(n,t),n}(e),H=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),L=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new V).default,placement:(new S).default})||this;return n.keys={allow:new V,placement:new S},n}return H(n,t),n}(e),z=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),R=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new N).default,children:(new L).default})||this;return n.keys={ref:new c,mode:new N,children:new L},n}return z(n,t),n}(e),q=[new c,new a,new s,new v,new w,new b,new g,new P,new T,new k,new R],B=function(){var t=[];return q.forEach(function(n){if(t.push(n),"keys"in n){var r=function t(n){var r=[];for(var o in n.keys){var e=n.keys[o];if(r.push(e),"keys"in e){var i=t(e);r=r.concat(i)}}return r}(n);t=t.concat(r)}}),t}();var C=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),D=function(t){function n(n){var r=t.call(this)||this;return r.name="TemmyError",r.message="Temme isn't feeling good",r.message=n.length>0?n:r.message,r}return C(n,t),n}(Error),F=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),G=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidTemplateOptionError",r.message="A template has an invalid option";var o="“"+n+"” is not a valid option to use in templates";return r.message=n.length>0?o:r.message,r}return F(n,t),n}(D),J=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),K=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidOptionNameError",r.message="An option is not valid";var o="“"+n+"” is not a valid option";return r.message=n.length>0?o:r.message,r}return J(n,t),n}(D),Q=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),U=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidOptionTypeError",o.message="An option doesn't have a valid value type";var e="The “"+n+"” option doesn't accept values of type “"+r+"”";return o.message=n.length>0?e:o.message,o}return Q(n,t),n}(D),W=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),X=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidOptionValueError",o.message="An option doesn't have a valid value";var e="The “"+n+"” option doesn't accept “"+r+"” as a value";return o.message=n.length>0?e:o.message,o}return W(n,t),n}(D),Y=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),Z=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidSubOptionNameError",o.message="A sub-option is not valid";var e="The “"+n+"” option doesn't not recognize “"+r+"” as a valid sub-option";return o.message=n.length>0||r.length>0?e:o.message,o}return Y(n,t),n}(D),$=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),tt=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidSubOptionTypeError",o.message="A sub-option doesn't have a valid value type";var e="The “"+n+"” sub-option doesn't accept values of type “"+r+"”";return o.message=n.length>0||r.length>0?e:o.message,o}return $(n,t),n}(D),nt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),rt=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidSubOptionValueError",o.message="A sub-option doesn't have a valid value";var e="The “"+n+"” sub-option doesn't accept “"+r+"” as a value";return o.message=n.length>0||r.length>0?e:o.message,o}return nt(n,t),n}(D),ot=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),et=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferencingOptionError",r.message="A referencing option is not valid",r.message=n.length>0?n:r.message,r}return ot(n,t),n}(D),it=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),ct=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTemplateError",r.message="A template does not have a “ref” option",r.message=n.length>0?n:r.message,r}return it(n,t),n}(D),ut=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},at=function(t){return null!=t&&t instanceof HTMLElement};function ft(t){try{var n=function(n){var r=q.filter(function(t){return t.label===n})[0],o=t[n];if(!1===e.validateOptionName(r))throw new K(n);var i=e.validateOptionType(o,r);if(!1===i.valid)throw new U(n,i.type);if(!1===e.validateOptionValue(o,r))throw new X(n,o);if("keys"in r){var c=r.keys;!function t(n,r,o){var i=function(i){var c=function(t){var n=[];return B.forEach(function(r){if("keys"in r&&r.label===t)for(var o in r.keys){var e=r.keys[o];n.push(e)}}),n}(n).filter(function(t){return t.label===i})[0],u=r[i];if(!(i in o))throw new Z(n,i);if(!1===e.validateOptionName(c))throw new Z(n,i);var a=e.validateOptionType(u,c);if(!1===a.valid)throw new tt(i,a.type);if(!1===e.validateOptionValue(u,c))throw new rt(i,u);if("keys"in c){var f=r[i];t(i,f,c.keys)}};for(var c in r)i(c)}(n,o,c)}};for(var r in t)n(r);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new et("The “from” option must always have a “ref” sub-option");"templates"in t&&t.templates.forEach(function(t){!function(t){var n=["name","children","templates"];try{if(!("ref"in t))throw new ct("");for(var r in t){if(n.indexOf(r)>-1)throw new G(r);ft(t)}}catch(t){throw t}}(t)}),"childrenNodes"in t&&t.childrenNodes.forEach(function(t){ft(t)})}catch(t){throw t}}function st(t){try{q.forEach(function(n){if(n.label in t){if("keys"in n)for(var r in n.keys){var o=n.keys[r];pt(t[n.label],o)}}else t[n.label]=n.default}),"childrenNodes"in t&&t.childrenNodes.length>0&&t.childrenNodes.forEach(function(t){st(t)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(function(t){!function(t){try{console.log(t)}catch(t){throw t}}(t)})}catch(t){throw t}}function pt(t,n){try{if(n.label in t||(t[n.label]=n.default),"keys"in n)for(var r in n.keys){pt(t[n.label],n.keys[r])}}catch(t){throw t}}var lt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),yt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidHierarchyError",r.message="The hierarchy object is not valid",r.message=n.length>0?n:r.message,r}return lt(n,t),n}(D),_t=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),ht=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTargetError",r.message="The target is not a valid HTML element",r.message=n.length>0?n:r.message,r}return _t(n,t),n}(D);function vt(t,n,r,o){try{if(!at(n))throw new ht("");if(!ut(t))throw new yt("");ft(t),st(t),console.log(t),r()}catch(t){throw t.message="[Temme]: "+t.message+".",t}}r.d(n,"parse",function(){return vt})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,