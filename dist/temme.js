var Temme=function(t){var n={};function r(o){if(n[o])return n[o].exports;var e=n[o]={i:o,l:!1,exports:{}};return t[o].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=t,r.c=n,r.d=function(t,n,o){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var e in t)r.d(o,e,function(n){return t[n]}.bind(null,e));return o},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";r.r(n);var o,e=function(){function t(t,n,r,o){this.label=t,this.type=n,this.values=r,this.default=o}return t.validateOptionName=function(t){return null!=t},t.validateOptionType=function(t,n){var r="";return{valid:(r=Array.isArray(t)?"array":typeof t)===n.type,type:r}},t.validateOptionValue=function(t,n){return!(null!=n&&n.values.length>0)||-1!==n.values.indexOf(t)},t}(),i=(o=function(t,n){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}o(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),c=function(t){function n(){return t.call(this,"ref","string",[],"")||this}return i(n,t),n}(e),u=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),a=function(t){function n(){return t.call(this,"name","string",[],"div")||this}return u(n,t),n}(e),f=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),p=function(t){function n(){return t.call(this,"id","string",[],"")||this}return f(n,t),n}(e),s=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),l=function(t){function n(){return t.call(this,"value","string",[],"")||this}return s(n,t),n}(e),_=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),y=function(t){function n(){return t.call(this,"type","string",["text","html"],"text")||this}return _(n,t),n}(e),h=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new y).default,value:(new l).default})||this;return n.keys={type:new y,value:new l},n}return h(n,t),n}(e),O=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),w=function(t){function n(){return t.call(this,"temmeIds","array",[],[])||this}return O(n,t),n}(e),b=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),m=function(t){function n(){return t.call(this,"templates","array",[],[])||this}return b(n,t),n}(e),d=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),g=function(t){function n(){return t.call(this,"classes","array",[],[])||this}return d(n,t),n}(e),j=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),P=function(t){function n(){return t.call(this,"children","array",[],[])||this}return j(n,t),n}(e),A=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),T=function(t){function n(){return t.call(this,"attributes","object",[],{})||this}return A(n,t),n}(e),E=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),I=function(t){function n(){return t.call(this,"dataset","object",[],{})||this}return E(n,t),n}(e),x=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),k=function(t){function n(){return t.call(this,"mode","string",["append","override"],"append")||this}return x(n,t),n}(e),S=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),M=function(t){function n(){return t.call(this,"placement","string",["after","before"],"after")||this}return S(n,t),n}(e),N=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),V=function(t){function n(){return t.call(this,"allow","boolean",[],!0)||this}return N(n,t),n}(e),H=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),L=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new V).default,placement:(new M).default})||this;return n.keys={allow:new V,placement:new M},n}return H(n,t),n}(e),z=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),R=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new k).default,children:(new L).default})||this;return n.keys={ref:new c,mode:new k,children:new L},n}return z(n,t),n}(e),q=[new c,new a,new p,new v,new w,new m,new g,new P,new T,new I,new R];var B=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),C=function(t){function n(n){var r=t.call(this)||this;return r.name="TemmyError",r.message="Temme isn't feeling good",r.message=n.length>0?n:r.message,r}return B(n,t),n}(Error),D=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),F=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidTemplateOptionError",r.message="A template has an invalid option";var o="“"+n+"” is not a valid option to use in templates";return r.message=n.length>0?o:r.message,r}return D(n,t),n}(C),G=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),J=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidOptionNameError",r.message="An option is not valid";var o="“"+n+"” is not a valid option";return r.message=n.length>0?o:r.message,r}return G(n,t),n}(C),K=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),Q=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidOptionTypeError",o.message="An option doesn't have a valid value type";var e="The “"+n+"” option doesn't accept values of type “"+r+"”";return o.message=n.length>0?e:o.message,o}return K(n,t),n}(C),U=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),W=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidOptionValueError",o.message="An option doesn't have a valid value";var e="The “"+n+"” option doesn't accept “"+r+"” as a value";return o.message=n.length>0?e:o.message,o}return U(n,t),n}(C),X=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),Y=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidSubOptionNameError",o.message="A sub-option is not valid";var e="The “"+n+"” option doesn't not recognize “"+r+"” as a valid sub-option";return o.message=n.length>0||r.length>0?e:o.message,o}return X(n,t),n}(C),Z=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),$=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidSubOptionTypeError",o.message="A sub-option doesn't have a valid value type";var e="The “"+n+"” subOption doesn't accept values of type “"+r+"”";return o.message=n.length>0||r.length>0?e:o.message,o}return Z(n,t),n}(C),tt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),nt=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidSubOptionValueError",o.message="A sub-option doesn't have a valid value";var e="The “"+n+"” sub-option doesn't accept “"+r+"” as a value";return o.message=n.length>0||r.length>0?e:o.message,o}return tt(n,t),n}(C),rt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),ot=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferencingOptionError",r.message="A referencing option is not valid",r.message=n.length>0?n:r.message,r}return rt(n,t),n}(C),et=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},it=function(t){return null!=t&&t instanceof HTMLElement};function ct(t){try{var n=function(n){var r=q.filter(function(t){return t.label===n})[0],o=t[n];if(!1===e.validateOptionName(r))throw new J(n);var i=e.validateOptionType(o,r);if(!1===i.valid)throw new Q(n,i.type);if(!1===e.validateOptionValue(o,r))throw new W(n,o);if("keys"in r){var c=r.keys;!function(t,n,r){var o=function(o){var i=function(t){var n=[];return q.forEach(function(r){if("keys"in r&&r.label===t)for(var o in r.keys){var e=r.keys[o];n.push(e)}}),n}(t).filter(function(t){return t.label===o})[0],c=n[o];if(!(o in r))throw new Y(t,o);if(!1===e.validateOptionName(i))throw new Y(t,o);var u=e.validateOptionType(c,i);if(!1===u.valid)throw new $(o,u.type);if(!1===e.validateOptionValue(c,i))throw new nt(o,c)};for(var i in n)o(i)}(n,o,c)}};for(var r in t)n(r);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new ot("The “from” option must always have a “ref” sub-option");"templates"in t&&t.templates.forEach(function(t){!function(t){var n=["name","children","templates"];try{for(var r in t){if(n.indexOf(r)>-1)throw new F(r);ct(t)}}catch(t){throw t}}(t)}),"children"in t&&t.children.forEach(function(t){ct(t)})}catch(t){throw t}}var ut=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),at=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidHierarchyError",r.message="The hierarchy object is not valid",r.message=n.length>0?n:r.message,r}return ut(n,t),n}(C),ft=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),pt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTargetError",r.message="The target is not a valid HTML element",r.message=n.length>0?n:r.message,r}return ft(n,t),n}(C);function st(t,n,r,o){try{if(!it(n))throw new pt("");if(!et(t))throw new at("");ct(t),r()}catch(t){throw t.message="[Temme]: "+t.message+".",t}}r.d(n,"parse",function(){return st})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,