var Temme=function(t){var n={};function r(e){if(n[e])return n[e].exports;var o=n[e]={i:e,l:!1,exports:{}};return t[e].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)r.d(e,o,function(n){return t[n]}.bind(null,o));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";r.r(n);var e,o=function(){function t(t,n,r,e){this.label=t,this.type=n,this.values=r,this.default=e}return t.validateOptionType=function(t,n){var r="";return{valid:(r=Array.isArray(t)?"array":typeof t)===n.type,type:r}},t.validateOptionValue=function(t,n){return!(null!=n&&n.values.length>0)||-1!==n.values.indexOf(t)},t.validateOptionName=function(t){return null!=t},t}(),i=(e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),c=function(t){function n(){return t.call(this,"ref","string",[],"")||this}return i(n,t),n.prototype.inherit=function(t,n){},n}(o),a=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),u=function(t){function n(){return t.call(this,"name","string",[],"div")||this}return a(n,t),n.prototype.inherit=function(t,n){t.name=n},n}(o),f=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),s=function(t){function n(){return t.call(this,"id","string",[],"")||this}return f(n,t),n.prototype.inherit=function(t,n){t.id=n},n}(o),p=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),l=function(t){function n(){return t.call(this,"value","string",[],"")||this}return p(n,t),n.prototype.inherit=function(t,n){},n}(o),h=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),y=function(t){function n(){return t.call(this,"type","string",["text","html"],"text")||this}return h(n,t),n.prototype.inherit=function(t,n){},n}(o),_=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),v=function(t){function n(){var n=t.call(this,"content","object",[],{type:(new y).default,value:(new l).default})||this;return n.keys={type:new y,value:new l},n}return _(n,t),n.prototype.inherit=function(t,n){"append"===t.from.mode?t.content.value+=" "+n.value:t.content=n},n}(o),d=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),m=function(t){function n(){return t.call(this,"temmeIds","array",[],[])||this}return d(n,t),n.prototype.inherit=function(t,n){},n}(o),O=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),w=function(t){function n(){return t.call(this,"templates","array",[],[])||this}return O(n,t),n.prototype.inherit=function(t,n){},n}(o),b=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),g=function(t){function n(){return t.call(this,"classes","array",[],[])||this}return b(n,t),n.prototype.inherit=function(t,n){var r;"append"===t.from.mode?(r=t.classes).push.apply(r,n):t.classes=n,t.classes=t.classes.filter(function(n,r){return t.classes.indexOf(n)===r}),t.classes.sort()},n}(o),j=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),P=function(t){function n(){return t.call(this,"childNodes","array",[],[])||this}return j(n,t),n.prototype.inherit=function(t,n){!0===t.from.children.allow&&("append"===t.from.mode?"before"===t.from.children.placement?t.childNodes.shift(n):t.childNodes.push(n):t.childNodes=n)},n}(o),A=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),E=function(t){function n(){return t.call(this,"attributes","object",[],{})||this}return A(n,t),n.prototype.inherit=function(t,n){if("append"===t.from.mode)for(var r in n)r in t.attributes||(t.attributes[r]=n[r]);else for(var r in n)t.attributes[r]=n[r]},n}(o),N=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),T=function(t){function n(){return t.call(this,"dataset","object",[],{})||this}return N(n,t),n.prototype.inherit=function(t,n){if("append"===t.from.mode)for(var r in n)r in t.dataset||(t.dataset[r]=n[r]);else for(var r in n)t.dataset[r]=n[r]},n}(o),k=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),I=function(t){function n(){return t.call(this,"mode","string",["append","override"],"append")||this}return k(n,t),n.prototype.inherit=function(t,n){},n}(o),x=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),M=function(t){function n(){return t.call(this,"placement","string",["after","before"],"after")||this}return x(n,t),n.prototype.inherit=function(t,n){},n}(o),S=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),V=function(t){function n(){return t.call(this,"allow","boolean",[],!1)||this}return S(n,t),n.prototype.inherit=function(t,n){},n}(o),R=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),H=function(t){function n(){var n=t.call(this,"children","object",[],{allow:(new V).default,placement:(new M).default})||this;return n.keys={allow:new V,placement:new M},n}return R(n,t),n.prototype.inherit=function(t,n){},n}(o),q=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),z=function(t){function n(){var n=t.call(this,"from","object",[],{ref:(new c).default,mode:(new I).default,children:(new H).default})||this;return n.keys={ref:new c,mode:new I,children:new H},n}return q(n,t),n.prototype.inherit=function(t,n){},n}(o),L=[new c,new u,new s,new v,new m,new w,new g,new P,new E,new T,new z],C=function(){var t=[];return L.forEach(function(n){if(t.push(n),"keys"in n){var r=function t(n){var r=[];for(var e in n.keys){var o=n.keys[e];if(r.push(o),"keys"in o){var i=t(o);r=r.concat(i)}}return r}(n);t=t.concat(r)}}),t}(),U=["name","childNodes","templates"];var B=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),D=function(t){function n(n){var r=t.call(this)||this;return r.name="TemmyError",r.message="Temme isn't feeling good",r.message=n.length>0?n:r.message,r}return B(n,t),n}(Error),F=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),G=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidTemplateOptionError",r.message="A template has an invalid option";var e="“"+n+"” is not a valid option to use in templates";return r.message=n.length>0?e:r.message,r}return F(n,t),n}(D),J=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),K=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidOptionNameError",r.message="An option is not valid";var e="“"+n+"” is not a valid option";return r.message=n.length>0?e:r.message,r}return J(n,t),n}(D),Q=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),W=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidOptionTypeError",e.message="An option doesn't have a valid value type";var o="The “"+n+"” option doesn't accept values of type “"+r+"”";return e.message=n.length>0?o:e.message,e}return Q(n,t),n}(D),X=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),Y=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidOptionValueError",e.message="An option doesn't have a valid value";var o="The “"+n+"” option doesn't accept “"+r+"” as a value";return e.message=n.length>0?o:e.message,e}return X(n,t),n}(D),Z=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),$=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidSubOptionNameError",e.message="A sub-option is not valid";var o="The “"+n+"” option doesn't not recognize “"+r+"” as a valid sub-option";return e.message=n.length>0||r.length>0?o:e.message,e}return Z(n,t),n}(D),tt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),nt=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidSubOptionTypeError",e.message="A sub-option doesn't have a valid value type";var o="The “"+n+"” sub-option doesn't accept values of type “"+r+"”";return e.message=n.length>0||r.length>0?o:e.message,e}return tt(n,t),n}(D),rt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),et=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidSubOptionValueError",e.message="A sub-option doesn't have a valid value";var o="The “"+n+"” sub-option doesn't accept “"+r+"” as a value";return e.message=n.length>0||r.length>0?o:e.message,e}return rt(n,t),n}(D),ot=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),it=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferencingOptionError",r.message="A referencing option is not valid",r.message=n.length>0?n:r.message,r}return ot(n,t),n}(D),ct=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),at=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferenceOptionValueError",r.message="“ref” options must not begin with the “@” symbol",r.message=n.length>0?n:r.message,r}return ct(n,t),n}(D),ut=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),ft=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidReferenceError",r.message="A reference is invalid",r.message=n.length>0?"“"+n+"” is an invalid reference":r.message,r}return ut(n,t),n}(D),st=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),pt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTemplateError",r.message="A template does not have a “ref” option",r.message=n.length>0?n:r.message,r}return st(n,t),n}(D);function lt(t,n,r){void 0===n&&(n=[]),void 0===r&&(r=!1);try{var e=function(t){void 0===t&&(t=!1);for(var n="0123456789abcdefghijklmnopqrstuvwxyz",r=!1===t?6:4,e="",o=0;o<r;o++){var i=Math.floor(Math.random()*n.length),c=Math.floor(2*Math.random());e+=1===c?n[i].toUpperCase():n[i]}return e}(r);t.temmeIds=n.concat([e]),"childNodes"in t&&t.childNodes.forEach(function(n){lt(n,t.temmeIds)}),"templates"in t&&t.templates.forEach(function(n){lt(n,t.temmeIds,!0)})}catch(t){throw t}}var ht=function(t){return t.temmeIds[t.temmeIds.length-1]};var yt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),_t=function(t){function n(n,r){var e=t.call(this,"")||this;e.name="InvalidTemplateReferencingError",e.message="Templates can only reference other templates.";var o="The template with the reference “"+n+"” is trying to reference “"+r+"” a non-template object";return e.message=n.length>0?o:e.message,e}return yt(n,t),n}(D),vt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),dt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="ReferenceOutOfScopeError",r.message="An object is referencing an element out of its scope",r.message=n.length>0?n:r.message,r}return vt(n,t),n}(D),mt=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},Ot=function(t){return null!=t&&t instanceof HTMLElement};function wt(t){try{var n=function(n){var r=L.filter(function(t){return t.label===n})[0],e=t[n];if(!1===o.validateOptionName(r))throw new K(n);var i=o.validateOptionType(e,r);if(!1===i.valid)throw new W(n,i.type);if(!1===o.validateOptionValue(e,r))throw new Y(n,e);if("keys"in r){var c=r.keys;!function t(n,r,e){var i=function(i){var c=function(t){var n=[];return C.forEach(function(r){if("keys"in r&&r.label===t)for(var e in r.keys){var o=r.keys[e];n.push(o)}}),n}(n).filter(function(t){return t.label===i})[0],a=r[i];if(!(i in e))throw new $(n,i);if(!1===o.validateOptionName(c))throw new $(n,i);var u=o.validateOptionType(a,c);if(!1===u.valid)throw new nt(i,u.type);if(!1===o.validateOptionValue(a,c))throw new et(i,a);if("keys"in c){var f=r[i];t(i,f,c.keys)}};for(var c in r)i(c)}(n,e,c)}};for(var r in t)n(r);if(!1===function(t){if("from"in t)return"ref"in t.from;return!0}(t))throw new it("The “from” option must always have a “ref” sub-option");"templates"in t&&t.templates.forEach(function(t){!function(t){try{if(!("ref"in t))throw new pt("");for(var n in t){if(U.indexOf(n)>-1)throw new G(n);wt(t)}}catch(t){throw t}}(t)}),"childNodes"in t&&t.childNodes.forEach(function(t){wt(t)})}catch(t){throw t}}var bt=function(t,n){return null!=n.filter(function(n){return n.hierarchy.ref===t.from.ref&&ht(t)!==ht(n.hierarchy)})[0]};function gt(t){try{L.forEach(function(n){if(n.label in t){if("keys"in n)for(var r in n.keys){var e=n.keys[r];jt(t[n.label],e)}}else t[n.label]=n.default}),t.classes=t.classes.filter(function(n,r){return t.classes.indexOf(n)===r}),t.classes.sort(),"childNodes"in t&&t.childNodes.length>0&&t.childNodes.forEach(function(t){gt(t)}),"templates"in t&&t.templates.length>0&&t.templates.forEach(function(t){!function(t){try{L.filter(function(t){return-1===U.indexOf(t.label)}).forEach(function(n){if(n.label in t){if("keys"in n)for(var r in n.keys){var e=n.keys[r];jt(t[n.label],e)}}else t[n.label]=n.default})}catch(t){throw t}}(t)})}catch(t){throw t}}function jt(t,n){try{if(n.label in t||(t[n.label]=n.default),"keys"in n)for(var r in n.keys){jt(t[n.label],n.keys[r])}}catch(t){throw t}}function Pt(t){try{var n=function t(n,r){void 0===r&&(r=0);var e=[];r++;""!==n.ref&&e.push({depth:r,hierarchy:n});"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){e.push.apply(e,t(n,r))});"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){e.push.apply(e,t(n,r-1))});return e}(t);!function t(n,r){try{if("@"===n.ref[0])throw new at("");if("@"===n.from.ref[0]){var e=n.from.ref.substring(1);if(null==document.querySelector(e))throw new at("No outer element corresponds to the selector “"+e+"”")}else if(!1===bt(n,r)&&""!==n.from.ref)throw new ft(n.from.ref);"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,r)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,r)})}catch(t){throw t}}(t,n),function t(n,r){try{var e=n.templates;e.length>0&&e.forEach(function(t){if(t.from.ref.length>0){var n=r.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];if(!1==(4===ht(n.hierarchy).length))throw new _t(t.ref,t.from.ref)}}),n.childNodes.forEach(function(n){t(n,r)})}catch(t){throw t}}(t,n),function t(n,r,e){void 0===e&&(e=0);try{var o=n.from.ref;if(e++,""!==o&&null==r.filter(function(t){return t.hierarchy.ref===o&&e>=t.depth})[0])throw new dt("");"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,r,e)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(n){t(n,r,e)})}catch(t){throw t}}(t,n),function t(n,r){try{"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,r)}),"templates"in n&&n.templates.length>0&&n.templates.forEach(function(t){if(""!==t.from.ref){var n=function(n){var e=L.filter(function(t){return t.label===n})[0],o=r.filter(function(n){return n.hierarchy.ref===t.from.ref})[0];e.inherit(t,o.hierarchy[n])};for(var e in t)n(e)}})}catch(t){throw t}}(t,n.filter(function(t){return At(t.hierarchy)})),function t(n,r){try{if(""!==n.from.ref){var e=function(t){var e=L.filter(function(n){return n.label===t})[0],o=r.filter(function(t){return t.hierarchy.ref===n.from.ref})[0];e.inherit(n,o.hierarchy[t])};for(var o in n)e(o)}"childNodes"in n&&n.childNodes.length>0&&n.childNodes.forEach(function(n){t(n,r)})}catch(t){throw t}}(t,n)}catch(t){throw t}}var At=function(t){return 4===ht(t).length};var Et=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),Nt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidHierarchyError",r.message="The hierarchy object is not valid",r.message=n.length>0?n:r.message,r}return Et(n,t),n}(D),Tt=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function e(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(e.prototype=r.prototype,new e)}}(),kt=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTargetError",r.message="The target is not a valid HTML element",r.message=n.length>0?n:r.message,r}return Tt(n,t),n}(D);function It(t,n,r,e){void 0===r&&(r=function(t){});try{if(!Ot(n))throw new kt("");if(!mt(t))throw new Nt("");return wt(t),gt(t),lt(t),Pt(t),function(t,n){try{console.log("parsing...")}catch(t){throw t}}(),r(t),t}catch(t){throw t.message="[Temme]: "+t.message+".",t}}r.d(n,"parse",function(){return It})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9UZW1tZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9tb2RlbHMvT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvUmVmT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvTmFtZU9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0lkT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvVmFsdWVTdWJPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9zdWItb3B0aW9ucy9Db250ZW50VHlwZVN1Yk9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0NvbnRlbnRPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9UZW1tZUlkc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL1RlbXBsYXRlc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0NsYXNzZXNPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9DaGlsZHJlbk5vZGVzT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvQXR0cmlidXRlc09wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL0RhdGFzZXRPcHRpb24udHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvb3B0aW9ucy9zdWItb3B0aW9ucy9Nb2RlU3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvUGxhY2VtZW50U3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvc3ViLW9wdGlvbnMvQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zL3N1Yi1vcHRpb25zL0NoaWxkcmVuU3ViT3B0aW9uLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL29wdGlvbnMvRnJvbU9wdGlvbi50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9vcHRpb25zLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL21vZGVscy9UZW1teUVycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvbk5hbWVFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvblR5cGVFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZE9wdGlvblZhbHVlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRSZWZlcmVuY2VFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9lcnJvcnMvSW52YWxpZFRlbXBsYXRlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvaWRmaWVyLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9SZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvdmFsaWRhdG9yLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL3Nhbml0aXplci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvbW9kdWxlcy9yZWZlcmVuY2VyLnRzIiwid2VicGFjazovL1RlbW1lL3NyYy9EOi9zY3JpcHRpbmcvVHlwZXNjcmlwdC90ZW1tZWpzL3NyYy9tb2R1bGVzL2Vycm9ycy9JbnZhbGlkSGllcmFyY2h5RXJyb3IudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvZXJyb3JzL0ludmFsaWRUYXJnZXRFcnJvci50cyIsIndlYnBhY2s6Ly9UZW1tZS9zcmMvRDovc2NyaXB0aW5nL1R5cGVzY3JpcHQvdGVtbWVqcy9zcmMvdGVtbWUudHMiLCJ3ZWJwYWNrOi8vVGVtbWUvc3JjL0Q6L3NjcmlwdGluZy9UeXBlc2NyaXB0L3RlbW1lanMvc3JjL21vZHVsZXMvcGFyc2VyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwibW9kZWxzX09wdGlvbiIsIk9wdGlvbiIsImxhYmVsIiwidHlwZSIsInZhbHVlcyIsImRlZmF1bHRWYWx1ZSIsInRoaXMiLCJkZWZhdWx0IiwidmFsaWRhdGVPcHRpb25UeXBlIiwibWF0Y2hpbmdPcHRpb24iLCJvcHRpb25UeXBlIiwidmFsaWQiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWxpZGF0ZU9wdGlvblZhbHVlIiwibGVuZ3RoIiwiaW5kZXhPZiIsInZhbGlkYXRlT3B0aW9uTmFtZSIsIl9zdXBlciIsIlJlZk9wdGlvbiIsIl9fZXh0ZW5kcyIsImluaGVyaXQiLCJoaWVyYXJjaHkiLCJyZWYiLCJOYW1lT3B0aW9uIiwiTmFtZU9wdGlvbl9leHRlbmRzIiwiSWRPcHRpb24iLCJJZE9wdGlvbl9leHRlbmRzIiwiaWQiLCJWYWx1ZVN1Yk9wdGlvbiIsIlZhbHVlU3ViT3B0aW9uX2V4dGVuZHMiLCJDb250ZW50VHlwZVN1Yk9wdGlvbiIsIkNvbnRlbnRUeXBlU3ViT3B0aW9uX2V4dGVuZHMiLCJDb250ZW50T3B0aW9uIiwiX3RoaXMiLCJzdWJfb3B0aW9uc19Db250ZW50VHlwZVN1Yk9wdGlvbiIsInN1Yl9vcHRpb25zX1ZhbHVlU3ViT3B0aW9uIiwia2V5cyIsIkNvbnRlbnRPcHRpb25fZXh0ZW5kcyIsImNvbnRlbnQiLCJmcm9tIiwiVGVtbWVJZHNPcHRpb24iLCJUZW1tZUlkc09wdGlvbl9leHRlbmRzIiwidGVtbWVJZHMiLCJUZW1wbGF0ZXNPcHRpb24iLCJUZW1wbGF0ZXNPcHRpb25fZXh0ZW5kcyIsInRlbXBsYXRlcyIsIkNsYXNzZXNPcHRpb24iLCJDbGFzc2VzT3B0aW9uX2V4dGVuZHMiLCJjbGFzc2VzIiwiX2EiLCJwdXNoIiwiYXBwbHkiLCJmaWx0ZXIiLCJjbHMiLCJpbmRleCIsInNvcnQiLCJDaGlsZE5vZGVzT3B0aW9uIiwiQ2hpbGRyZW5Ob2Rlc09wdGlvbl9leHRlbmRzIiwiY2hpbGROb2RlcyIsImNoaWxkcmVuIiwiYWxsb3ciLCJwbGFjZW1lbnQiLCJzaGlmdCIsIkF0dHJpYnV0ZXNPcHRpb24iLCJBdHRyaWJ1dGVzT3B0aW9uX2V4dGVuZHMiLCJhdHRyaWJ1dGVzIiwiRGF0YXNldE9wdGlvbiIsIkRhdGFzZXRPcHRpb25fZXh0ZW5kcyIsImRhdGFzZXQiLCJNb2RlU3ViT3B0aW9uIiwiTW9kZVN1Yk9wdGlvbl9leHRlbmRzIiwiUGxhY2VtZW50U3ViT3B0aW9uIiwiUGxhY2VtZW50U3ViT3B0aW9uX2V4dGVuZHMiLCJDaGlsZHJlbkFsbG93U3ViT3B0aW9uIiwiQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbl9leHRlbmRzIiwiQ2hpbGRyZW5TdWJPcHRpb24iLCJzdWJfb3B0aW9uc19DaGlsZHJlbkFsbG93U3ViT3B0aW9uIiwic3ViX29wdGlvbnNfUGxhY2VtZW50U3ViT3B0aW9uIiwiQ2hpbGRyZW5TdWJPcHRpb25fZXh0ZW5kcyIsIkZyb21PcHRpb24iLCJvcHRpb25zX1JlZk9wdGlvbiIsInN1Yl9vcHRpb25zX01vZGVTdWJPcHRpb24iLCJzdWJfb3B0aW9uc19DaGlsZHJlblN1Yk9wdGlvbiIsIkZyb21PcHRpb25fZXh0ZW5kcyIsIm9wdGlvbnMiLCJvcHRpb25zX05hbWVPcHRpb24iLCJvcHRpb25zX0lkT3B0aW9uIiwib3B0aW9uc19Db250ZW50T3B0aW9uIiwib3B0aW9uc19UZW1tZUlkc09wdGlvbiIsIm9wdGlvbnNfVGVtcGxhdGVzT3B0aW9uIiwib3B0aW9uc19DbGFzc2VzT3B0aW9uIiwiQ2hpbGRyZW5Ob2Rlc09wdGlvbiIsIm9wdGlvbnNfQXR0cmlidXRlc09wdGlvbiIsIm9wdGlvbnNfRGF0YXNldE9wdGlvbiIsIm9wdGlvbnNfRnJvbU9wdGlvbiIsImFsbE9wdGlvbnMiLCJmb3JFYWNoIiwib3B0Iiwic3ViT3B0aW9ucyIsImdldEFsbFN1Yk9wdGlvbnMiLCJvcHRpb24iLCJhbGxTdWJPcHRpb25zIiwic3ViT3B0aW9uIiwib3B0cyIsImNvbmNhdCIsImdldEFsbE9wdGlvbnMiLCJmb3JiaWRkZW5PcHRpb25zIiwiVGVtbXlFcnJvciIsIm1lc3NhZ2UiLCJUZW1teUVycm9yX2V4dGVuZHMiLCJFcnJvciIsIkludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yIiwiSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JfZXh0ZW5kcyIsIm1vZGVsc19UZW1teUVycm9yIiwiSW52YWxpZE9wdGlvbk5hbWVFcnJvciIsIkludmFsaWRPcHRpb25OYW1lRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRPcHRpb25UeXBlRXJyb3IiLCJJbnZhbGlkT3B0aW9uVHlwZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkT3B0aW9uVmFsdWVFcnJvciIsIkludmFsaWRPcHRpb25WYWx1ZUVycm9yX2V4dGVuZHMiLCJJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yIiwiSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvcl9leHRlbmRzIiwiSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvciIsIkludmFsaWRTdWJPcHRpb25UeXBlRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yIiwiSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRSZWZlcmVuY2luZ09wdGlvbkVycm9yIiwiSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRSZWZlcmVuY2VPcHRpb25WYWx1ZUVycm9yIiwiSW52YWxpZFJlZmVyZW5jZU9wdGlvblZhbHVlRXJyb3JfZXh0ZW5kcyIsIkludmFsaWRSZWZlcmVuY2VFcnJvciIsInJlZmVyZW5jZSIsIkludmFsaWRSZWZlcmVuY2VFcnJvcl9leHRlbmRzIiwiSW52YWxpZFRlbXBsYXRlRXJyb3IiLCJJbnZhbGlkVGVtcGxhdGVFcnJvcl9leHRlbmRzIiwiaWRmeSIsInRlbW1lSWQiLCJjaGFycyIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInVwcGVyY2FzZSIsInRvVXBwZXJDYXNlIiwiZ2VuZXJhdGVUZW1tZUlkIiwiY2hpbGQiLCJ0ZW1wbGF0ZSIsImUiLCJnZXRUZW1tZUlkIiwiSW52YWxpZFRlbXBsYXRlUmVmZXJlbmNpbmdFcnJvciIsInRhcmdldCIsIkludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3JfZXh0ZW5kcyIsIlJlZmVyZW5jZU91dE9mU2NvcGVFcnJvciIsIlJlZmVyZW5jZU91dE9mU2NvcGVFcnJvcl9leHRlbmRzIiwiaXNWYWxpZEhpZXJhcmNoeSIsImlzVmFsaWRIVE1MRWxlbWVudCIsIkhUTUxFbGVtZW50IiwidmFsaWRhdGVPcHRpb25zIiwib3B0aW9uVmFsdWUiLCJlcnJvcnNfSW52YWxpZE9wdGlvbk5hbWVFcnJvciIsInR5cGVWYWxpZGF0aW9uIiwiZXJyb3JzX0ludmFsaWRPcHRpb25UeXBlRXJyb3IiLCJlcnJvcnNfSW52YWxpZE9wdGlvblZhbHVlRXJyb3IiLCJ2YWxpZGF0ZVN1Yk9wdGlvbnMiLCJvcHRpb25OYW1lIiwibWF0Y2hpbmdTdWJPcHRpb24iLCJnZXRTdWJPcHRpb25zIiwic3ViT3B0aW9uVmFsdWUiLCJlcnJvcnNfSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvciIsImVycm9yc19JbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yIiwiZXJyb3JzX0ludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yIiwic3ViT3B0aW9uVmFsdWVfMSIsInZhbGlkYXRlUmVmZXJlbmNpbmdPcHRpb24iLCJlcnJvcnNfSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3IiLCJlcnJvcnNfSW52YWxpZFRlbXBsYXRlRXJyb3IiLCJlcnJvcnNfSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3IiLCJ2YWxpZGF0ZVRlbXBsYXRlcyIsInZhbGlkYXRlUmVmZXJlbmNlIiwicmVmZXJlbmNlcyIsInNhbml0aXplIiwic2FuaXRpemVPcHRpb24iLCJzYW5pdGl6ZVRlbXBsYXRlIiwicHJvY2VzcyIsImdldFJlZmVyZW5jZXMiLCJkZXB0aCIsInZhbGlkYXRlUmVmZXJlbmNlcyIsImVycm9yc19JbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvciIsInNlbGVjdG9yIiwic3Vic3RyaW5nIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiZXJyb3JzX0ludmFsaWRSZWZlcmVuY2VFcnJvciIsInZhbGlkYXRlVGVtcGxhdGVSZWZlcmVuY2UiLCJyZWZlcmVuY2VkRWxlbWVudCIsImVycm9yc19JbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yIiwidmFsaWRhdGVQYXJlbnRUb0NoaWxkUmVmZXJlbmNlIiwicmVmXzEiLCJyZWZPYmplY3QiLCJlcnJvcnNfUmVmZXJlbmNlT3V0T2ZTY29wZUVycm9yIiwicHJvY2Vzc1RlbXBsYXRlcyIsInJlZmVyZW5jZWRIaWVyYXJjaHkiLCJyZWZlcmVuY2VyX2lzVGVtcGxhdGUiLCJwcm9jZXNzSGllcmFyY2hpZXMiLCJJbnZhbGlkSGllcmFyY2h5RXJyb3IiLCJJbnZhbGlkSGllcmFyY2h5RXJyb3JfZXh0ZW5kcyIsIkludmFsaWRUYXJnZXRFcnJvciIsIkludmFsaWRUYXJnZXRFcnJvcl9leHRlbmRzIiwidGVtbWVfcGFyc2UiLCJlbmRDYWxsYmFjayIsIm5vZGVDYWxsYmFjayIsImVycm9yc19JbnZhbGlkVGFyZ2V0RXJyb3IiLCJlcnJvcnNfSW52YWxpZEhpZXJhcmNoeUVycm9yIiwiY29uc29sZSIsImxvZyIsInBhcnNlIiwiX193ZWJwYWNrX2V4cG9ydHNfXyJdLCJtYXBwaW5ncyI6InNCQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUEwREEsT0FyREFGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYs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QUEzRSxFQUdJaEIsRUFBQS9DLEtBQUFtQyxLQUFNLEtBQUdBLFlBZk40QixFQUFBM0QsS0FBZSxxQkFLZjJELEVBQUEyRSxRQUFrQix5Q0FhckIzRSxFQUFLMkUsUUFBVUEsRUFBUTlGLE9BQVMsRUFBSThGLEVBQVUzRSxFQUFLMkUsVUFFM0QsT0F6QmdEa0csR0FBQUQsRUFBQTVMLEdBeUJoRDRMLEVBekJBLENBQWdENUYsR0M2QnpDLFNBQVM4RixHQUFNMUwsRUFBbUJpSSxFQUFxQjBELEVBQW1FQyxRQUFuRSxJQUFBRCxNQUFBLFNBQWlEM0wsTUFFM0csSUFJSSxJQUFLc0ksR0FBNkJMLEdBQzlCLE1BQU0sSUFBSTRELEdBQW1CLElBS2pDLElBQUt4RCxHQUEyQnJJLEdBQzVCLE1BQU0sSUFBSThMLEdBQXNCLElBdUJwQyxPQWxCQXRELEdBQTBCeEksR0FHMUI4SixHQUFtQjlKLEdBR25Ca0gsR0FBWWxILEdBR1ppSyxHQUFtQmpLLEdDcERwQixTQUFlQSxFQUFnQjRMLEdBRWxDLElBRUlHLFFBQVFDLElBQUksY0FFaEIsTUFBTWxFLEdBRUYsTUFBTUEsR0QrQ05tRSxHQUdBTixFQUFZM0wsR0FHTEEsRUFFWCxNQUFPOEgsR0FNSCxNQUhhQSxFQUFHdkMsUUFBVSxZQUFZdUMsRUFBRXZDLFFBQU8sSUFHekN1QyxHQWpFZHhMLEVBQUFVLEVBQUFrUCxFQUFBLDBCQUFBUiIsImZpbGUiOiJ0ZW1tZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qKlxyXG4gKiBUaGUgaGllcmFyY2h5J3Mgb3B0aW9uIG1vZGVsLlxyXG4gKiBXaGF0IGRlZmluZXMgYSB2YWxpZCBvcHRpb24uXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgaW50ZXJmYWNlIHRoYXQgaW5kaWNhdGVzXHJcbiAqIHN1Yi1vcHRpb25zLlxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJS2V5cyB7XHJcblxyXG4gICAga2V5czogYW55O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBvcHRpb24ncyBjbGFzcy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGFic3RyYWN0IGNsYXNzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbGFiZWw6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkYXRhIHR5cGUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHR5cGU6IHN0cmluZztcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBwb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIHZhbHVlczogQXJyYXk8YW55PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBkZWZhdWx0IHZhbHVlIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBkZWZhdWx0OiBhbnk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBsYWJlbCBUaGUgbmFtZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICogQHBhcmFtIHR5cGUgVGhlIGRhdGEgdHlwZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBUaGUgZGVmYXVsdCB2YWx1ZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICogQHBhcmFtIHZhbHVlcyBUaGUgcG9zc2libGUgdmFsdWVzIG9mIHRoZSBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGxhYmVsOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgdmFsdWVzOiBBcnJheTxhbnk+LCBkZWZhdWx0VmFsdWU6IGFueSkge1xyXG5cclxuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcclxuICAgICAgICB0aGlzLmRlZmF1bHQgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBpbmhlcml0IChoaWVyYXJjaHk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWRcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWYWxpZGF0ZXMgdGhlIG9wdGlvbidzIG5hbWUuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtYXRjaGluZ09wdGlvbiBUaGUgb3B0aW9uIG9iamVjdCB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdmFsaWRhdGVPcHRpb25OYW1lID0gKG1hdGNoaW5nT3B0aW9uOiBPcHRpb24pOiBib29sZWFuID0+IG1hdGNoaW5nT3B0aW9uICE9IG51bGw7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIHRoZSBkYXRhIHR5cGUgb2YgdGhlIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgb3B0aW9uLlxyXG4gICAgICogQHBhcmFtIG1hdGNoaW5nT3B0aW9uIFRoZSBvcHRpb24gb2JqZWN0IHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuXHJcbiAgICAgKiBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN0YXRpYyB2YWxpZGF0ZU9wdGlvblR5cGUodmFsdWU6IGFueSwgbWF0Y2hpbmdPcHRpb246IE9wdGlvbik6IHsgdmFsaWQ6IGJvb2xlYW4sIHR5cGU6IHN0cmluZyB9IHtcclxuXHJcbiAgICAgICAgbGV0IG9wdGlvblR5cGU6IHN0cmluZyA9IFwiXCI7XHJcblxyXG4gICAgICAgIC8vIEdldHRpbmcgdGhlIGFwcHJvcHJpYXRlIGRhdGEgdHlwZS5cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgb3B0aW9uVHlwZSA9IFwiYXJyYXlcIjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBvcHRpb25UeXBlID0gdHlwZW9mIHZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWQ6IG9wdGlvblR5cGUgPT09IG1hdGNoaW5nT3B0aW9uLnR5cGUsXHJcbiAgICAgICAgICAgIHR5cGU6IG9wdGlvblR5cGVcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmFsaWRhdGVzIHRoZSBvcHRpb24ncyB2YWx1ZS5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cclxuICAgICAqIEBwYXJhbSBtYXRjaGluZ09wdGlvbiBUaGUgb3B0aW9uIG9iamVjdCB3aXRoIHRoZSBtYXRjaGluZyBuYW1lLlxyXG4gICAgICogXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgdmFsaWRhdGVPcHRpb25WYWx1ZSh2YWx1ZTogYW55LCBtYXRjaGluZ09wdGlvbjogT3B0aW9uKTogYm9vbGVhbiB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIG1hdGNoaW5nIG9iamVjdCBpcyB2YWxpZC5cclxuICAgICAgICBpZiAobWF0Y2hpbmdPcHRpb24gIT0gbnVsbCAmJiBtYXRjaGluZ09wdGlvbi52YWx1ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIHZhbHVlIGlzIG5vdCBhIHZhbGlkIG9uZS5cclxuICAgICAgICAgICAgcmV0dXJuIG1hdGNoaW5nT3B0aW9uLnZhbHVlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIHJlZmVyZW5jZSBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdyZWYnLCAnc3RyaW5nJywgW10sICcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gcmVmIFRoZSByZWYgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHJlZjogYW55KTogdm9pZCB7IH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIG5hbWUgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmFtZU9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ25hbWUnLCAnc3RyaW5nJywgW10sICdkaXYnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgbmFtZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaGllcmFyY2h5Lm5hbWUgPSBuYW1lO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgSUQgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdpZCcsICdzdHJpbmcnLCBbXSwgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSBpZCBUaGUgaWQgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGlkOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICBoaWVyYXJjaHkuaWQgPSBpZDtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIHZhbHVlIHN1YiBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uLy4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYWx1ZVN1Yk9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ3ZhbHVlJywgJ3N0cmluZycsIFtdLCAnJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQgeyB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBjb250ZW50IHR5cGUgc3ViIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnRUeXBlU3ViT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcigndHlwZScsICdzdHJpbmcnLCBbJ3RleHQnLCAnaHRtbCddLCAndGV4dCcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkIHsgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgdGV4dCBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgVmFsdWVTdWJPcHRpb24gZnJvbSBcIi4vc3ViLW9wdGlvbnMvVmFsdWVTdWJPcHRpb25cIjtcclxuaW1wb3J0IENvbnRlbnRUeXBlU3ViT3B0aW9uIGZyb20gXCIuL3N1Yi1vcHRpb25zL0NvbnRlbnRUeXBlU3ViT3B0aW9uXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBjb250ZW50IG9wdGlvbiBjbGFzcy5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRlbnRPcHRpb24gZXh0ZW5kcyBPcHRpb24gaW1wbGVtZW50cyBJS2V5cyB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUga2V5cyBvZiB0aGUgYGNvbnRlbnRgIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGtleXM6IENvbnRlbnRLZXlzID0ge1xyXG4gICAgICAgIHR5cGU6IG5ldyBDb250ZW50VHlwZVN1Yk9wdGlvbigpLFxyXG4gICAgICAgIHZhbHVlOiBuZXcgVmFsdWVTdWJPcHRpb24oKVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignY29udGVudCcsICdvYmplY3QnLCBbXSwge1xyXG4gICAgICAgICAgICB0eXBlOiAobmV3IENvbnRlbnRUeXBlU3ViT3B0aW9uKCkpLmRlZmF1bHQsXHJcbiAgICAgICAgICAgIHZhbHVlOiAobmV3IFZhbHVlU3ViT3B0aW9uKCkpLmRlZmF1bHRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gY29udGVudCBUaGUgY29udGVudCB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgY29udGVudDogYW55KTogdm9pZCB7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLm1vZGUgPT09ICdhcHBlbmQnKSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkuY29udGVudC52YWx1ZSArPSBgICR7Y29udGVudC52YWx1ZX1gO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkuY29udGVudCA9IGNvbnRlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBDb250ZW50S2V5cyB0eXBlLlxyXG4gKi9cclxudHlwZSBDb250ZW50S2V5cyA9IHtcclxuXHJcbiAgICB0eXBlOiBDb250ZW50VHlwZVN1Yk9wdGlvbjtcclxuICAgIHZhbHVlOiBWYWx1ZVN1Yk9wdGlvbjtcclxufVxyXG4iLCIvKipcclxuICogVGhlIHJlZmVyZW5jZSBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1tZUlkc09wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ3RlbW1lSWRzJywgJ2FycmF5JywgW10sIFtdKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdGVtbWVJZHMgVGhlIHRlbW1lSWRzIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB0ZW1tZUlkczogYW55KTogdm9pZCB7IH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIHRlbXBsYXRlcyBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1wbGF0ZXNPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCd0ZW1wbGF0ZXMnLCAnYXJyYXknLCBbXSwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB0ZW1wbGF0ZXMgVGhlIHRlbXBsYXRlcyB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdGVtcGxhdGVzOiBhbnkpOiB2b2lkIHsgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgY2xhc3NlcyBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4uL21vZGVscy9PcHRpb25cIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDbGFzc2VzT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignY2xhc3NlcycsICdhcnJheScsIFtdLCBbXSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGNsYXNzZXMgVGhlIGNsYXNzZXMgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGNsYXNzZXM6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5tb2RlID09PSAnYXBwZW5kJykge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMucHVzaCguLi5jbGFzc2VzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMgPSBjbGFzc2VzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBSZW1vdmluZyBkdXBsaWNhdGVzLlxyXG4gICAgICAgIGhpZXJhcmNoeS5jbGFzc2VzID0gaGllcmFyY2h5LmNsYXNzZXMuZmlsdGVyKChjbHM6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4gaGllcmFyY2h5LmNsYXNzZXMuaW5kZXhPZihjbHMpID09PSBpbmRleCk7XHJcblxyXG4gICAgICAgIC8vIFNvcnRpbmcgdGhlIGNsYXNzZXMuXHJcbiAgICAgICAgaGllcmFyY2h5LmNsYXNzZXMuc29ydCgpO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgY2hpbGRyZW4gb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hpbGROb2Rlc09wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ2NoaWxkTm9kZXMnLCAnYXJyYXknLCBbXSwgW10pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSBjaGlsZE5vZGVzIFRoZSBjaGlsZE5vZGVzIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCBjaGlsZE5vZGVzOiBhbnkpOiB2b2lkIHtcclxuXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLmNoaWxkcmVuLmFsbG93ID09PSB0cnVlKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoaGllcmFyY2h5LmZyb20ubW9kZSA9PT0gJ2FwcGVuZCcpIHtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLmNoaWxkcmVuLnBsYWNlbWVudCA9PT0gJ2JlZm9yZScpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuc2hpZnQoY2hpbGROb2Rlcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLnB1c2goY2hpbGROb2Rlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzID0gY2hpbGROb2RlcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGF0dHJpYnV0ZXMgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCB7IGlzVGVtcGxhdGUgfSBmcm9tIFwiLi4vcmVmZXJlbmNlclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF0dHJpYnV0ZXNPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcignYXR0cmlidXRlcycsICdvYmplY3QnLCBbXSwge30pO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSBhdHRyaWJ1dGVzIFRoZSBhdHRyaWJ1dGVzIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCBhdHRyaWJ1dGVzOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoaGllcmFyY2h5LmZyb20ubW9kZSA9PT0gJ2FwcGVuZCcpIHtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gaGllcmFyY2h5LmF0dHJpYnV0ZXMpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGhpZXJhcmNoeS5hdHRyaWJ1dGVzW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xyXG5cclxuICAgICAgICAgICAgICAgIGhpZXJhcmNoeS5hdHRyaWJ1dGVzW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBkYXRhc2V0IG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGFzZXRPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdkYXRhc2V0JywgJ29iamVjdCcsIFtdLCB7fSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIGRhdGFzZXQgVGhlIGRhdGFzZXQgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIGRhdGFzZXQ6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChoaWVyYXJjaHkuZnJvbS5tb2RlID09PSAnYXBwZW5kJykge1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YXNldCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBoaWVyYXJjaHkuZGF0YXNldCkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaGllcmFyY2h5LmRhdGFzZXRba2V5XSA9IGRhdGFzZXRba2V5XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhc2V0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgaGllcmFyY2h5LmRhdGFzZXRba2V5XSA9IGRhdGFzZXRba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIG1vZGUgc3ViIG9wdGlvbiBtb2RlbC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGVTdWJPcHRpb24gZXh0ZW5kcyBPcHRpb24ge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyYW1ldGVybGVzcyBjb25zdHJ1Y3Rvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKCdtb2RlJywgJ3N0cmluZycsIFsnYXBwZW5kJywgJ292ZXJyaWRlJ10sICdhcHBlbmQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZCB7IH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIHBsYWNlbWVudCBzdWIgb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi8uLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxhY2VtZW50U3ViT3B0aW9uIGV4dGVuZHMgT3B0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhcmFtZXRlcmxlc3MgY29uc3RydWN0b3IuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgICAgICBzdXBlcigncGxhY2VtZW50JywgJ3N0cmluZycsIFsnYWZ0ZXInLCAnYmVmb3JlJ10sICdhZnRlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5oZXJpdC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaGVyaXQoaGllcmFyY2h5OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkIHsgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgYWxsb3cgc3ViIG9wdGlvbiBtb2RlbCBmb3IgdGhlIGZyb20tY2hpbGRyZW4gb3B0aW9uLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uIGZyb20gXCIuLi8uLi9tb2RlbHMvT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbiBleHRlbmRzIE9wdGlvbiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ2FsbG93JywgJ2Jvb2xlYW4nLCBbXSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm1zIGluaGVyaXRhbmNlIHByb2Nlc3Mgb24gYW4gb3B0aW9uLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRoYXQgaW5oZXJpdHMuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCB2YWx1ZTogYW55KTogdm9pZCB7IH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGNoaWxkcmVuIHN1YiBvcHRpb24gbW9kZWwuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgUGxhY2VtZW50U3ViT3B0aW9uIGZyb20gXCIuL1BsYWNlbWVudFN1Yk9wdGlvblwiO1xyXG5pbXBvcnQgQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbiBmcm9tIFwiLi9DaGlsZHJlbkFsbG93U3ViT3B0aW9uXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBjaGlsZHJlbiBzdWIgb3B0aW9uIGNsYXNzXHJcbiAqIG9mIHRoZSBmcm9tIG9wdGlvbi5cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENoaWxkcmVuU3ViT3B0aW9uIGV4dGVuZHMgT3B0aW9uIGltcGxlbWVudHMgSUtleXMge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGtleXMgb2YgdGhlIGBjaGlsZHJlbmAgc3ViIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGtleXM6IEZyb21DaGlsZHJlbktleXMgPSB7XHJcbiAgICAgICAgYWxsb3c6IG5ldyBDaGlsZHJlbkFsbG93U3ViT3B0aW9uKCksXHJcbiAgICAgICAgcGxhY2VtZW50OiBuZXcgUGxhY2VtZW50U3ViT3B0aW9uKClcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ2NoaWxkcmVuJywgJ29iamVjdCcsIFtdLCB7XHJcbiAgICAgICAgICAgIGFsbG93OiAobmV3IENoaWxkcmVuQWxsb3dTdWJPcHRpb24oKSkuZGVmYXVsdCxcclxuICAgICAgICAgICAgcGxhY2VtZW50OiAobmV3IFBsYWNlbWVudFN1Yk9wdGlvbigpKS5kZWZhdWx0XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtcyBpbmhlcml0YW5jZSBwcm9jZXNzIG9uIGFuIG9wdGlvbi5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IGluaGVyaXRzLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBpbmhlcml0LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgaW5oZXJpdChoaWVyYXJjaHk6IGFueSwgdmFsdWU6IGFueSk6IHZvaWQgeyB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGhlIEZyb21DaGlsZHJlbktleXMgdHlwZS5cclxuICovXHJcbnR5cGUgRnJvbUNoaWxkcmVuS2V5cyA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIGFsbG93IGNoaWxkcmVuIGluaGVyaXRhbmNlLlxyXG4gICAgICovXHJcbiAgICBhbGxvdzogQ2hpbGRyZW5BbGxvd1N1Yk9wdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbmhlcml0YW5jZSBtb2RlLlxyXG4gICAgICovXHJcbiAgICBwbGFjZW1lbnQ6IFBsYWNlbWVudFN1Yk9wdGlvbjtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGZyb20gb3B0aW9uIG1vZGVsLlxyXG4gKi9cclxuXHJcblxyXG5cclxuaW1wb3J0IE9wdGlvbiwgeyBJS2V5cyB9IGZyb20gXCIuLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCBSZWZPcHRpb24gZnJvbSBcIi4vUmVmT3B0aW9uXCI7XHJcbmltcG9ydCBNb2RlU3ViT3B0aW9uIGZyb20gXCIuL3N1Yi1vcHRpb25zL01vZGVTdWJPcHRpb25cIjtcclxuaW1wb3J0IENoaWxkcmVuU3ViT3B0aW9uIGZyb20gXCIuL3N1Yi1vcHRpb25zL0NoaWxkcmVuU3ViT3B0aW9uXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJvbU9wdGlvbiBleHRlbmRzIE9wdGlvbiBpbXBsZW1lbnRzIElLZXlzIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBrZXlzIG9mIHRoZSBgZnJvbWAgb3B0aW9uLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMga2V5czogRnJvbUtleXMgPSB7XHJcbiAgICAgICAgcmVmOiBuZXcgUmVmT3B0aW9uKCksXHJcbiAgICAgICAgbW9kZTogbmV3IE1vZGVTdWJPcHRpb24oKSxcclxuICAgICAgICBjaGlsZHJlbjogbmV3IENoaWxkcmVuU3ViT3B0aW9uKClcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQYXJhbWV0ZXJsZXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgc3VwZXIoJ2Zyb20nLCAnb2JqZWN0JywgW10sIHtcclxuICAgICAgICAgICAgcmVmOiAobmV3IFJlZk9wdGlvbigpKS5kZWZhdWx0LFxyXG4gICAgICAgICAgICBtb2RlOiAobmV3IE1vZGVTdWJPcHRpb24oKSkuZGVmYXVsdCxcclxuICAgICAgICAgICAgY2hpbGRyZW46IChuZXcgQ2hpbGRyZW5TdWJPcHRpb24oKSkuZGVmYXVsdFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybXMgaW5oZXJpdGFuY2UgcHJvY2VzcyBvbiBhbiBvcHRpb24uXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdGhhdCBpbmhlcml0cy5cclxuICAgICAqIEBwYXJhbSBmcm9tIFRoZSBmcm9tIHRvIGluaGVyaXQuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBpbmhlcml0KGhpZXJhcmNoeTogYW55LCBmcm9tOiBhbnkpOiB2b2lkIHsgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBGcm9tS2V5cyB0eXBlLlxyXG4gKi9cclxudHlwZSBGcm9tS2V5cyA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSByZWZlcmVuY2Ugc3ViIG9wdGlvbi5cclxuICAgICAqL1xyXG4gICAgcmVmOiBSZWZPcHRpb247XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgaW5oZXJpdGFuY2UgbW9kZS5cclxuICAgICAqL1xyXG4gICAgbW9kZTogTW9kZVN1Yk9wdGlvbjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBpbmhlcml0YW5jZSBtb2RlLlxyXG4gICAgICovXHJcbiAgICBjaGlsZHJlbjogQ2hpbGRyZW5TdWJPcHRpb247XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBsaXN0IG9mIHN1cHBvcnRlZCBvcHRpb25zLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgT3B0aW9uLCB7IElLZXlzIH0gZnJvbSBcIi4vbW9kZWxzL09wdGlvblwiO1xyXG5pbXBvcnQgUmVmT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvUmVmT3B0aW9uXCI7XHJcbmltcG9ydCBOYW1lT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvTmFtZU9wdGlvblwiO1xyXG5pbXBvcnQgSWRPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9JZE9wdGlvblwiO1xyXG5pbXBvcnQgQ29udGVudE9wdGlvbiBmcm9tIFwiLi9vcHRpb25zL0NvbnRlbnRPcHRpb25cIjtcclxuaW1wb3J0IFRlbW1lSWRzT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvVGVtbWVJZHNPcHRpb25cIjtcclxuaW1wb3J0IFRlbXBsYXRlc09wdGlvbiBmcm9tIFwiLi9vcHRpb25zL1RlbXBsYXRlc09wdGlvblwiO1xyXG5pbXBvcnQgQ2xhc3Nlc09wdGlvbiBmcm9tIFwiLi9vcHRpb25zL0NsYXNzZXNPcHRpb25cIjtcclxuaW1wb3J0IENoaWxkTm9kZXNPcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9DaGlsZHJlbk5vZGVzT3B0aW9uXCI7XHJcbmltcG9ydCBBdHRyaWJ1dGVzT3B0aW9uIGZyb20gXCIuL29wdGlvbnMvQXR0cmlidXRlc09wdGlvblwiO1xyXG5pbXBvcnQgRGF0YXNldE9wdGlvbiBmcm9tIFwiLi9vcHRpb25zL0RhdGFzZXRPcHRpb25cIjtcclxuaW1wb3J0IEZyb21PcHRpb24gZnJvbSBcIi4vb3B0aW9ucy9Gcm9tT3B0aW9uXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIEFsbCB0aGUgZ2xvYmFsIG9wdGlvbnMuXHJcbiAqL1xyXG5leHBvcnQgY29uc3Qgb3B0aW9uczogQXJyYXk8T3B0aW9uPiA9IFtcclxuICAgIG5ldyBSZWZPcHRpb24oKSxcclxuICAgIG5ldyBOYW1lT3B0aW9uKCksXHJcbiAgICBuZXcgSWRPcHRpb24oKSxcclxuICAgIG5ldyBDb250ZW50T3B0aW9uKCksXHJcbiAgICBuZXcgVGVtbWVJZHNPcHRpb24oKSxcclxuICAgIG5ldyBUZW1wbGF0ZXNPcHRpb24oKSxcclxuICAgIG5ldyBDbGFzc2VzT3B0aW9uKCksXHJcbiAgICBuZXcgQ2hpbGROb2Rlc09wdGlvbigpLFxyXG4gICAgbmV3IEF0dHJpYnV0ZXNPcHRpb24oKSxcclxuICAgIG5ldyBEYXRhc2V0T3B0aW9uKCksXHJcbiAgICBuZXcgRnJvbU9wdGlvbigpXHJcbl07XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBvZiB0aGUgb3B0aW9ucyBhdmFpbGFibGUgKGluY2x1ZGluZyBzdWItb3B0aW9ucykuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgYWxsT3B0aW9ucyA9IGdldEFsbE9wdGlvbnMoKTtcclxuXHJcblxyXG4vKipcclxuICogVGhlIG9wdGlvbnMgdGhhdCBhcmUgbm90IGFsbG93ZWQgZm9yIHRlbXBsYXRlcy5cclxuICovXHJcbmV4cG9ydCBjb25zdCBmb3JiaWRkZW5PcHRpb25zOiBBcnJheTxzdHJpbmc+ID0gWyduYW1lJywgJ2NoaWxkTm9kZXMnLCAndGVtcGxhdGVzJ107XHJcblxyXG5cclxuLyoqXHJcbiAqIEdldHMgYWxsIHRoZSBzdWItb3B0aW9ucyBvZiBhbiBvcHRpb24uXHJcbiAqIFxyXG4gKiBAcGFyYW0gb3B0aW9uIFRoZSBwYXJlbnQgb3B0aW9uJ3MgbmFtZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRTdWJPcHRpb25zKG9wdGlvbjogc3RyaW5nKTogQXJyYXk8T3B0aW9uPiB7XHJcblxyXG4gICAgY29uc3Qgc3ViT3B0aW9uczogQXJyYXk8YW55PiA9IFtdO1xyXG5cclxuICAgIC8vIExvb3BpbmcgdGhyb3VnaCBhbGwgb2YgdGhlIG9wdGlvbnMuXHJcbiAgICBhbGxPcHRpb25zLmZvckVhY2goKG9wdDogT3B0aW9uKSA9PiB7XHJcblxyXG4gICAgICAgIGlmICgna2V5cycgaW4gb3B0ICYmICg8T3B0aW9uPm9wdCkubGFiZWwgPT09IG9wdGlvbikge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gKDxJS2V5cz5vcHQpLmtleXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSBzdWItb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9uID0gKDxJS2V5cz5vcHQpLmtleXNba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBQdXNoaW5nIHRoZSBzdWItb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgc3ViT3B0aW9ucy5wdXNoKHN1Yk9wdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBSZXR1cm5pbmcgdGhlIGZvdW5kIHN1Yi1vcHRpb25zLlxyXG4gICAgcmV0dXJuIHN1Yk9wdGlvbnM7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogR2V0cyBhbGwgb2YgdGhlIG9wdGlvbnMgYW5kIHN1Yi1vcHRpb25zLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QWxsT3B0aW9ucygpOiBBcnJheTxPcHRpb24+IHtcclxuXHJcbiAgICBsZXQgYWxsT3B0aW9uczogQXJyYXk8T3B0aW9uPiA9IFtdO1xyXG5cclxuICAgIG9wdGlvbnMuZm9yRWFjaCgob3B0OiBPcHRpb24pID0+IHtcclxuXHJcbiAgICAgICAgYWxsT3B0aW9ucy5wdXNoKG9wdCk7XHJcblxyXG4gICAgICAgIGlmICgna2V5cycgaW4gb3B0KSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXR0aW5nIGFsbCBvZiB0aGUgc3ViLW9wdGlvbnMuXHJcbiAgICAgICAgICAgIGNvbnN0IHN1Yk9wdGlvbnM6IEFycmF5PE9wdGlvbj4gPSBnZXRBbGxTdWJPcHRpb25zKG9wdCk7XHJcblxyXG4gICAgICAgICAgICBhbGxPcHRpb25zID0gYWxsT3B0aW9ucy5jb25jYXQoc3ViT3B0aW9ucyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGFsbE9wdGlvbnM7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogR2V0cyBhbGwgdGhlIHN1Yi1vcHRpb25zIG9mIGFuIG9wdGlvbi5cclxuICogXHJcbiAqIEBwYXJhbSBvcHQgVGhlIG9wdGlvbiB0byBnZXQgdGhlIHN1Yi1vcHRpb25zIG9mLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QWxsU3ViT3B0aW9ucyhvcHRpb246IE9wdGlvbik6IEFycmF5PE9wdGlvbj4ge1xyXG5cclxuICAgIGxldCBhbGxTdWJPcHRpb25zOiBBcnJheTxPcHRpb24+ID0gW107XHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gKDxhbnk+b3B0aW9uKS5rZXlzKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHN1Yk9wdGlvbjogT3B0aW9uID0gKDxhbnk+b3B0aW9uKS5rZXlzW2tleV07XHJcblxyXG4gICAgICAgIGFsbFN1Yk9wdGlvbnMucHVzaChzdWJPcHRpb24pO1xyXG5cclxuICAgICAgICBpZiAoJ2tleXMnIGluIHN1Yk9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgb3B0czogQXJyYXk8T3B0aW9uPiA9IGdldEFsbFN1Yk9wdGlvbnMoc3ViT3B0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIGFsbFN1Yk9wdGlvbnMgPSBhbGxTdWJPcHRpb25zLmNvbmNhdChvcHRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFsbFN1Yk9wdGlvbnM7XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRlbW1lJ3MgZXJyb3IgaW50ZXJmYWNlLlxyXG4gKi9cclxuaW50ZXJmYWNlIElUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBtZXNzYWdlOiBzdHJpbmc7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVGVtbWUncyBjdXN0b20gZXJyb3JzLlxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVtbXlFcnJvciBleHRlbmRzIEVycm9yIGltcGxlbWVudHMgSVRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nID0gJ1RlbW15RXJyb3InO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJUZW1tZSBpc24ndCBmZWVsaW5nIGdvb2RcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIHRlbXBsYXRlXHJcbiAqIGhhcyBhIGZvcmJpZGRlbiBvcHRpb24uXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkEgdGVtcGxhdGUgaGFzIGFuIGludmFsaWQgb3B0aW9uXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBvcHRpb24gVGhlIGludmFsaWQgb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGDigJwke29wdGlvbn3igJ0gaXMgbm90IGEgdmFsaWQgb3B0aW9uIHRvIHVzZSBpbiB0ZW1wbGF0ZXNgO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbi5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGFuIG9wdGlvblxyXG4gKiBpcyBub3QgdmFsaWQuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRPcHRpb25OYW1lRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZE9wdGlvbk5hbWVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBbiBvcHRpb24gaXMgbm90IHZhbGlkXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBvcHRpb24gVGhlIGludmFsaWQgb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGDigJwke29wdGlvbn3igJ0gaXMgbm90IGEgdmFsaWQgb3B0aW9uYDtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBvcHRpb24ubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhbiBvcHRpb25cclxuICogaXMgbm90IG9mIGEgdmFsaWQgZGF0YSB0eXBlLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkT3B0aW9uVHlwZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRPcHRpb25UeXBlRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQW4gb3B0aW9uIGRvZXNuJ3QgaGF2ZSBhIHZhbGlkIHZhbHVlIHR5cGVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG9wdGlvbiBUaGUgaW52YWxpZCBvcHRpb24ncyBuYW1lLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBpbnZhbGlkIG9wdGlvbidzIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb246IHN0cmluZywgdHlwZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIENvbnN0cnVjdGluZyB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBgVGhlIOKAnCR7b3B0aW9ufeKAnSBvcHRpb24gZG9lc24ndCBhY2NlcHQgdmFsdWVzIG9mIHR5cGUg4oCcJHt0eXBlfeKAnWA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gb3B0aW9uLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYW4gb3B0aW9uXHJcbiAqIGlzIG5vdCBvZiBhIHZhbGlkIHZhbHVlLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkT3B0aW9uVmFsdWVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBbiBvcHRpb24gZG9lc24ndCBoYXZlIGEgdmFsaWQgdmFsdWVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG9wdGlvbiBUaGUgaW52YWxpZCBvcHRpb24ncyBuYW1lLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBpbnZhbGlkIG9wdGlvbidzIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb246IHN0cmluZywgdmFsdWU6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSDigJwke29wdGlvbn3igJ0gb3B0aW9uIGRvZXNuJ3QgYWNjZXB0IOKAnCR7dmFsdWV94oCdIGFzIGEgdmFsdWVgO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbi5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgc3ViLW9wdGlvblxyXG4gKiBpcyBub3QgdmFsaWQuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBIHN1Yi1vcHRpb24gaXMgbm90IHZhbGlkXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBvcHRpb24gVGhlIHBhcmVudCBvcHRpb24ncyBuYW1lLlxyXG4gICAgICogQHBhcmFtIHN1Yk9wdGlvbiBUaGUgaW52YWxpZCBzdWItb3B0aW9uJ3MgbmFtZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uOiBzdHJpbmcsIHN1Yk9wdGlvbjogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIENvbnN0cnVjdGluZyB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBgVGhlIOKAnCR7b3B0aW9ufeKAnSBvcHRpb24gZG9lc24ndCBub3QgcmVjb2duaXplIOKAnCR7c3ViT3B0aW9ufeKAnSBhcyBhIHZhbGlkIHN1Yi1vcHRpb25gO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG9wdGlvbi5sZW5ndGggPiAwIHx8IHN1Yk9wdGlvbi5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgc3ViLXB0aW9uXHJcbiAqIGlzIG5vdCBvZiBhIHZhbGlkIGRhdGEgdHlwZS5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkEgc3ViLW9wdGlvbiBkb2Vzbid0IGhhdmUgYSB2YWxpZCB2YWx1ZSB0eXBlXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBzdWJPcHRpb24gVGhlIGludmFsaWQgc3ViLW9wdGlvbidzIG5hbWUuXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIGludmFsaWQgc3ViLW9wdGlvbidzIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihzdWJPcHRpb246IHN0cmluZywgdHlwZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIENvbnN0cnVjdGluZyB0aGUgZXJyb3IgbWVzc2FnZS5cclxuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBgVGhlIOKAnCR7c3ViT3B0aW9ufeKAnSBzdWItb3B0aW9uIGRvZXNuJ3QgYWNjZXB0IHZhbHVlcyBvZiB0eXBlIOKAnCR7dHlwZX3igJ1gO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHN1Yk9wdGlvbi5sZW5ndGggPiAwIHx8IHR5cGUubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIHN1Yi1vcHRpb25cclxuICogaXMgbm90IG9mIGEgdmFsaWQgdmFsdWUuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkEgc3ViLW9wdGlvbiBkb2Vzbid0IGhhdmUgYSB2YWxpZCB2YWx1ZVwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gc3ViT3B0aW9uIFRoZSBpbnZhbGlkIHN1Yi1vcHRpb24ncyBuYW1lLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBpbnZhbGlkIHN1Yi1vcHRpb24ncyB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3Ioc3ViT3B0aW9uOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gQ29uc3RydWN0aW5nIHRoZSBlcnJvciBtZXNzYWdlLlxyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IHN0cmluZyA9IGBUaGUg4oCcJHtzdWJPcHRpb2594oCdIHN1Yi1vcHRpb24gZG9lc24ndCBhY2NlcHQg4oCcJHt2YWx1ZX3igJ0gYXMgYSB2YWx1ZWA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gc3ViT3B0aW9uLmxlbmd0aCA+IDAgfHwgdmFsdWUubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIFxyXG4gKiBmcm9tIG9wdGlvbiBpcyBub3QgdmFsaWRcclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiQSByZWZlcmVuY2luZyBvcHRpb24gaXMgbm90IHZhbGlkXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIFxyXG4gKiByZWYgb3B0aW9uIHN0YXJ0cyB3aXRoIHRoZSBzeW1ib2xlIOKAnEDigJ0uXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRSZWZlcmVuY2VPcHRpb25WYWx1ZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRSZWZlcmVuY2VPcHRpb25WYWx1ZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIuKAnHJlZuKAnSBvcHRpb25zIG11c3Qgbm90IGJlZ2luIHdpdGggdGhlIOKAnEDigJ0gc3ltYm9sXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2UubGVuZ3RoID4gMCA/IG1lc3NhZ2UgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIHJlZiBvcHRpb25cclxuICogcmVmZXJlbmNlcyBhbiBpbnZhbGlkIG9iamVjdC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFJlZmVyZW5jZUVycm9yIGV4dGVuZHMgVGVtbXlFcnJvciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBuYW1lOiBzdHJpbmcgPSBcIkludmFsaWRSZWZlcmVuY2VFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBIHJlZmVyZW5jZSBpcyBpbnZhbGlkXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSByZWZlcmVuY2UgVGhlIGludmFsaWQgcmVmZXJlbmNlLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihyZWZlcmVuY2U6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGluZyB0aGUgZXJyb3IncyBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMubWVzc2FnZSA9IHJlZmVyZW5jZS5sZW5ndGggPiAwID8gYOKAnCR7cmVmZXJlbmNlfeKAnSBpcyBhbiBpbnZhbGlkIHJlZmVyZW5jZWAgOiB0aGlzLm1lc3NhZ2U7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFRoZSBlcnJvciB0aHJvd24gd2hlbiBhIHRlbXBsYXRlXHJcbiAqIGlzIGludmFsaWQgKGRvZXNuJ3QgaGF2ZSBhIOKAnHJlZuKAnSBvcHRpb24pLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbnZhbGlkVGVtcGxhdGVFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkVGVtcGxhdGVFcnJvclwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nID0gXCJBIHRlbXBsYXRlIGRvZXMgbm90IGhhdmUgYSDigJxyZWbigJ0gb3B0aW9uXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogSGVyZSBnb2VzJ3MgZXZlcnl0aGluZyB0aGF0IElELWZpZXNcclxuICogYW55dGhpbmcgdG8gZG8gd2l0aCB0aGUgaGllcmFyY2h5IG9iamVjdC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IHsgSGllcmFyY2h5IH0gZnJvbSBcIi4vbW9kZWxzL0hpZXJhcmNoeVwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuL21vZGVscy9UZW1wbGF0ZVwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBc3NpZ25zIHRlbW1lSWRzIHRvIGEgaGllcmFyY2h5IG9iamVjdC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gYXNzaW5nIGEgdGVtbWVJZCB0by5cclxuICogQHBhcmFtIHRlbW1lSWRzIFRoZSBzZXJpZXMgb2YgdGVtbWVJZHMgbGVhZGluZyB0byB0aGUgY3VycmVudCBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKiBAcGFyYW0gbW9kZSBUaGUgbW9kZSBvZiB0aGUgdGVtbWVJZCwgaWYgaXQncyBmYWxzZSwgdGhlIHRlbW1lSWQgd2lsbCBiZSBvZiA2IGNoYXJhY3RlcnNcclxuICogaW5kaWNhdGluZyBpdCdzIGEgaGllcmFyY2h5IG9iamVjdCwgaWYgaXQncyB0cnVlLCBpdCdsbCBoYXZlIDQgY2hhcmFjdGVycyBpbmRpY2F0aW5nIGl0J3NcclxuICogYSB0ZW1wbGF0ZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBpZGZ5KGhpZXJhcmNoeTogYW55LCB0ZW1tZUlkczogQXJyYXk8c3RyaW5nPiA9IFtdLCBtb2RlOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgIFxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gR2VuZXJhdGluZyBhIHRlbW1lIElkLlxyXG4gICAgICAgIGNvbnN0IHRlbW1lSWQ6IHN0cmluZyA9IGdlbmVyYXRlVGVtbWVJZChtb2RlKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBBc3NpZ25pbmcgYSB0ZW1tZUlkLlxyXG4gICAgICAgIGhpZXJhcmNoeS50ZW1tZUlkcyA9IFsuLi50ZW1tZUlkcywgdGVtbWVJZF07XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgb2YgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoJ2NoaWxkTm9kZXMnIGluIGhpZXJhcmNoeSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IE9iamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZGZ5KGNoaWxkLCBoaWVyYXJjaHkudGVtbWVJZHMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICAvLyBDaGVja2luZyBvZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IHRlbXBsYXRlcy5cclxuICAgICAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5KSB7XHJcbiAgICBcclxuICAgICAgICAgICAgaGllcmFyY2h5LnRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZTogT2JqZWN0KSA9PiB7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIGlkZnkodGVtcGxhdGUsIGhpZXJhcmNoeS50ZW1tZUlkcywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSB0ZW1tZUlkIG9mIGEgaGllcmFyY2h5IG9yIHRlbXBsYXRlIG9iamVjdC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSB0byBnZXQgdGhlIHRlbW1lSWQgb2YuXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgZ2V0VGVtbWVJZCA9IChoaWVyYXJjaHk6IEhpZXJhcmNoeSB8IFRlbXBsYXRlKTogc3RyaW5nID0+IGhpZXJhcmNoeS50ZW1tZUlkc1toaWVyYXJjaHkudGVtbWVJZHMubGVuZ3RoIC0gMV07XHJcblxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHVuaXF1ZSB0ZW1tZUlkLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVUZW1tZUlkKG1vZGU6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG5cclxuICAgIGNvbnN0XHJcbiAgICAgICAgY2hhcnMgPSBcIjAxMjM0NTY3ODlhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiLFxyXG4gICAgICAgIG1heCA9IChtb2RlID09PSBmYWxzZSkgPyA2IDogNDtcclxuXHJcbiAgICBsZXQga2V5ID0gJyc7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGk8bWF4OyBpKyspIHtcclxuXHJcbiAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgaW5kZXggPSBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpICogY2hhcnMubGVuZ3RoKSksXHJcbiAgICAgICAgICAgIHVwcGVyY2FzZSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xyXG5cclxuICAgICAgICBrZXkgKz0gdXBwZXJjYXNlID09PSAxID8gY2hhcnNbaW5kZXhdLnRvVXBwZXJDYXNlKCkgOiBjaGFyc1tpbmRleF07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGtleTtcclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgdGVtcGxhdGVcclxuICogaGFzIGlzIHJlZmVyZW5jaW5nIGEgbm9uLXRlbXBsYXRlIG9iamVjdC5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4uL21vZGVscy9UZW1teUVycm9yXCI7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW52YWxpZFRlbXBsYXRlUmVmZXJlbmNpbmdFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIlRlbXBsYXRlcyBjYW4gb25seSByZWZlcmVuY2Ugb3RoZXIgdGVtcGxhdGVzLlwiO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzLlxyXG4gICAgICogXHJcbiAgICAgKiBAcGFyYW0gcmVmIFRoZSB0ZW1wbGF0ZSdzIHJlZmVyZW5jZS5cclxuICAgICAqIEBwYXJhbSB0YXJnZXQgVGhlIHJlZmVyZW5jZSB0YXJnZXQuXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKHJlZjogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZykge1xyXG5cclxuICAgICAgICAvLyBDYWxsaW5nIHRoZSBwYXJlbnQgY2xhc3MgYFRlbW15RXJyb3JgLlxyXG4gICAgICAgIHN1cGVyKFwiXCIpO1xyXG5cclxuICAgICAgICAvLyBDb25zdHJ1Y3RpbmcgdGhlIGVycm9yIG1lc3NhZ2UuXHJcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSB0ZW1wbGF0ZSB3aXRoIHRoZSByZWZlcmVuY2Ug4oCcJHtyZWZ94oCdIGlzIHRyeWluZyB0byByZWZlcmVuY2Ug4oCcJHt0YXJnZXR94oCdIGEgbm9uLXRlbXBsYXRlIG9iamVjdGA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gcmVmLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBUaGUgZXJyb3IgdGhyb3duIHdoZW4gYSBhIGhpZXJhcmNoeSBvYmplY3lcclxuICogaXMgcmVmZXJlbmNpbmcgYW4gZWxlbWVudCBvdXQgb2YgaXRzIHNjb3BlLlxyXG4gKi9cclxuXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWZlcmVuY2VPdXRPZlNjb3BlRXJyb3IgZXh0ZW5kcyBUZW1teUVycm9yIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG5hbWU6IHN0cmluZyA9IFwiUmVmZXJlbmNlT3V0T2ZTY29wZUVycm9yXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbWVzc2FnZSBvZiB0aGUgZXJyb3IuXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmcgPSBcIkFuIG9iamVjdCBpcyByZWZlcmVuY2luZyBhbiBlbGVtZW50IG91dCBvZiBpdHMgc2NvcGVcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIG1vZHVsZSByZXNwb25zaWJsZSBmb3IgdmFsaWRhdGluZyB0aGUgaW5wdXQuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCB7IG9wdGlvbnMsIGZvcmJpZGRlbk9wdGlvbnMsIGdldFN1Yk9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcbmltcG9ydCBJbnZhbGlkVGVtcGxhdGVPcHRpb25FcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRPcHRpb25OYW1lRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRPcHRpb25OYW1lRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRPcHRpb25UeXBlRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRPcHRpb25UeXBlRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRPcHRpb25WYWx1ZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFN1Yk9wdGlvblR5cGVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFN1Yk9wdGlvblZhbHVlRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yXCI7XHJcbmltcG9ydCBJbnZhbGlkUmVmZXJlbmNpbmdPcHRpb25FcnJvciBmcm9tIFwiLi9lcnJvcnMvSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRSZWZlcmVuY2VPcHRpb25WYWx1ZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFJlZmVyZW5jZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkUmVmZXJlbmNlRXJyb3JcIjtcclxuaW1wb3J0IEludmFsaWRUZW1wbGF0ZUVycm9yIGZyb20gXCIuL2Vycm9ycy9JbnZhbGlkVGVtcGxhdGVFcnJvclwiO1xyXG5pbXBvcnQgeyBSZWZlcmVuY2VUeXBlIH0gZnJvbSBcIi4vcmVmZXJlbmNlclwiO1xyXG5pbXBvcnQgeyBnZXRUZW1tZUlkIH0gZnJvbSBcIi4vaWRmaWVyXCI7XHJcbmltcG9ydCB7IEhpZXJhcmNoeSB9IGZyb20gXCIuL21vZGVscy9IaWVyYXJjaHlcIjtcclxuaW1wb3J0IHsgVGVtcGxhdGUgfSBmcm9tIFwiLi9tb2RlbHMvVGVtcGxhdGVcIjtcclxuaW1wb3J0IEludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3IgZnJvbSBcIi4vZXJyb3JzL0ludmFsaWRUZW1wbGF0ZVJlZmVyZW5jaW5nRXJyb3JcIjtcclxuaW1wb3J0IFJlZmVyZW5jZU91dE9mUmFuZ2VFcnJvciBmcm9tIFwiLi9lcnJvcnMvUmVmZXJlbmNlT3V0T2ZTY29wZUVycm9yXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhbiBvYmplY3QgaXMgYSB2YWxpZCBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgb2JqZWN0IHRvIGNoZWNrLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGlzVmFsaWRIaWVyYXJjaHkgPSAoaGllcmFyY2h5OiBPYmplY3QpOiBib29sZWFuID0+IGhpZXJhcmNoeSAhPSBudWxsICYmIHR5cGVvZiBoaWVyYXJjaHkgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KGhpZXJhcmNoeSk7XHJcblxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBpZiBhbiBvYmplY3QgaXMgYSB2YWxpZCBIVE1MIGVsZW1lbnQuXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSBvYmplY3QgdG8gY2hlY2suXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNWYWxpZEhUTUxFbGVtZW50ID0gKHRhcmdldDogSFRNTEVsZW1lbnQpOiBib29sZWFuID0+IHRhcmdldCAhPSBudWxsICYmIHRhcmdldCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIG9wdGlvbnMgaW4gYSBoaWVyYXJjaHkgb2JqZWN0IGZvciBhbnlcclxuICogb3B0aW9ucyBpdCBoYXMgb3IgdmFsdWVzIGl0IGNvbnRhaW5zLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0byB2YWxpZGF0ZSB0aGUgb3B0aW9ucyBmb3IuXHJcbiAqIFxyXG4gKiBAdGhyb3dzIEludmFsaWRPcHRpb25OYW1lRXJyb3IsIEludmFsaWRPcHRpb25UeXBlRXJyb3IsIEludmFsaWRPcHRpb25WYWx1ZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uTmFtZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uVHlwZUVycm9yLCBJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvciwgSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU9wdGlvbnMoaGllcmFyY2h5OiBhbnkpOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBMb29waW5nIHRocm91Z2ggdGhlIGhpZXJhcmNoeSdzIG9wdGlvbnMuXHJcbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gaW4gaGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgbWF0Y2hpbmdPcHRpb246IE9wdGlvbiA9IDxPcHRpb24+b3B0aW9ucy5maWx0ZXIoKG9wdDogT3B0aW9uKSA9PiBvcHQubGFiZWwgPT09IG9wdGlvbilbMF0sXHJcbiAgICAgICAgICAgICAgICBvcHRpb25WYWx1ZTogYW55ID0gaGllcmFyY2h5W29wdGlvbl07XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBvcHRpb24ncyBuYW1lLlxyXG4gICAgICAgICAgICBpZiAoT3B0aW9uLnZhbGlkYXRlT3B0aW9uTmFtZShtYXRjaGluZ09wdGlvbikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wdGlvbk5hbWVFcnJvcihvcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBvcHRpb24ncyB0eXBlLlxyXG4gICAgICAgICAgICBjb25zdCB0eXBlVmFsaWRhdGlvbjogeyB2YWxpZDogYm9vbGVhbiwgdHlwZTogc3RyaW5nIH0gPSBPcHRpb24udmFsaWRhdGVPcHRpb25UeXBlKG9wdGlvblZhbHVlLCBtYXRjaGluZ09wdGlvbik7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZVZhbGlkYXRpb24udmFsaWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wdGlvblR5cGVFcnJvcihvcHRpb24sIHR5cGVWYWxpZGF0aW9uLnR5cGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBvcHRpb24ncyB2YWx1ZS5cclxuICAgICAgICAgICAgaWYgKE9wdGlvbi52YWxpZGF0ZU9wdGlvblZhbHVlKG9wdGlvblZhbHVlLCBtYXRjaGluZ09wdGlvbikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZE9wdGlvblZhbHVlRXJyb3Iob3B0aW9uLCBvcHRpb25WYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFJlcGVhdGluZyB0aGUgc2FtZSBjaGVjayBmb3Igb3B0aW9ucyB0aGF0IGhhdmUga2V5cy5cclxuICAgICAgICAgICAgaWYgKCdrZXlzJyBpbiBtYXRjaGluZ09wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIG9wdGlvbidzIHN1Yi1vcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9ucyA9ICg8SUtleXM+bWF0Y2hpbmdPcHRpb24pLmtleXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgc3ViLW9wdGlvbnMuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVN1Yk9wdGlvbnMob3B0aW9uLCBvcHRpb25WYWx1ZSwgc3ViT3B0aW9ucyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFZhbGlkYXRpbmcgcmVmZXJlbmNlcy5cclxuICAgICAgICBpZiAodmFsaWRhdGVSZWZlcmVuY2luZ09wdGlvbihoaWVyYXJjaHkpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFJlZmVyZW5jaW5nT3B0aW9uRXJyb3IoXCJUaGUg4oCcZnJvbeKAnSBvcHRpb24gbXVzdCBhbHdheXMgaGF2ZSBhIOKAnHJlZuKAnSBzdWItb3B0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgY29udGFpbnMgYW55IHRlbXBsYXRlcy5cclxuICAgICAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkudGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBPYmplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlVGVtcGxhdGVzKHRlbXBsYXRlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBSZXBlYXRpbmcgdGhlIHNhbWUgY2hlY2sgZm9yIHRoZSBoaWVyYXJjaHkncyBjaGlsZHJlbi5cclxuICAgICAgICBpZiAoJ2NoaWxkTm9kZXMnIGluIGhpZXJhcmNoeSkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IE9iamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVPcHRpb25zKGNoaWxkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHRlbXBsYXRlcyBpbiBhIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGVtcGxhdGUgVGhlIHRlbXBsYXRlIG9iamVjdCB0byB2YWxpZGF0ZS5cclxuICogXHJcbiAqIEB0aHJvd3MgSW52YWxpZE9wdGlvbk5hbWVFcnJvciwgSW52YWxpZE9wdGlvblR5cGVFcnJvciwgSW52YWxpZE9wdGlvblZhbHVlRXJyb3IsIEludmFsaWRTdWJPcHRpb25OYW1lRXJyb3IsIEludmFsaWRTdWJPcHRpb25UeXBlRXJyb3IsIEludmFsaWRTdWJPcHRpb25WYWx1ZUVycm9yLCBJbnZhbGlkVGVtcGxhdGVFcnJvciwgSW52YWxpZFRlbXBsYXRlT3B0aW9uRXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVRlbXBsYXRlcyh0ZW1wbGF0ZTogYW55KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgaWYgKCEoJ3JlZicgaW4gdGVtcGxhdGUpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkVGVtcGxhdGVFcnJvcihcIlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIExvb3BpbmcgdGhyb3VnaCB0aGUgb3B0aW9ucyBvZiB0aGUgdGVtcGxhdGUuXHJcbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gaW4gdGVtcGxhdGUpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSB0ZW1wbGF0ZSBjb250YWlucyBhbnkgaW52YWxpZCBvcHRpb25zLlxyXG4gICAgICAgICAgICBpZiAoZm9yYmlkZGVuT3B0aW9ucy5pbmRleE9mKG9wdGlvbikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRUZW1wbGF0ZU9wdGlvbkVycm9yKG9wdGlvbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZU9wdGlvbnModGVtcGxhdGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHJlZmVyZW5jZXMgaW4gdGhlIGhpZXJhcmNoeSBvYmplY3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIHZhbGlkYXRlIHRoZSByZWZlcmVuY2VzIGZvci5cclxuICogQHBhcmFtIHJlZmVyZW5jZXMgVGhlIHZhbGlkIHJlZmVybmNlcy5cclxuICogXHJcbiAqIEB0aHJvd3MgSW52YWxpZFJlZmVyZW5jZUVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSZWZlcmVuY2VzKGhpZXJhcmNoeTogYW55LCByZWZlcmVuY2VzOiBBcnJheTxSZWZlcmVuY2VUeXBlPik6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSDigJxyZWbigJ0gb3B0aW9uIHN0YXJ0cyB3aXRoIHRoZSDigJxA4oCdIHN5bWJvbC5cclxuICAgICAgICBpZiAoaGllcmFyY2h5LnJlZlswXSA9PT0gJ0AnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvcihcIlwiKTtcclxuICAgICAgICB9IFxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBvYmplY3QgaXMgcmVmZXJlbmNpbmcgYW4gb3V0ZXIgZWxlbWVudC5cclxuICAgICAgICBpZiAoaGllcmFyY2h5LmZyb20ucmVmWzBdID09PSAnQCcpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rvcjogc3RyaW5nID0gKDxzdHJpbmc+aGllcmFyY2h5LmZyb20ucmVmKS5zdWJzdHJpbmcoMSksXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkUmVmZXJlbmNlT3B0aW9uVmFsdWVFcnJvcihgTm8gb3V0ZXIgZWxlbWVudCBjb3JyZXNwb25kcyB0byB0aGUgc2VsZWN0b3Ig4oCcJHtzZWxlY3Rvcn3igJ1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVja2luZyBvZiB0aGUgcmVmZXJlbmNlIGV4aXN0cy5cclxuICAgICAgICAgICAgaWYgKHZhbGlkYXRlUmVmZXJlbmNlKGhpZXJhcmNoeSwgcmVmZXJlbmNlcykgPT09IGZhbHNlICYmIGhpZXJhcmNoeS5mcm9tLnJlZiAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRSZWZlcmVuY2VFcnJvcihoaWVyYXJjaHkuZnJvbS5yZWYpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBIaWVyYXJjaHkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJlZmVyZW5jZXMoY2hpbGQsIHJlZmVyZW5jZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgdGVtcGxhdGVzLlxyXG4gICAgICAgIGlmICgndGVtcGxhdGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LnRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICBoaWVyYXJjaHkudGVtcGxhdGVzLmZvckVhY2goKHRlbXBsYXRlOiBhbnkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVJlZmVyZW5jZXModGVtcGxhdGUsIHJlZmVyZW5jZXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFZhbGlkYXRlcyBhIHBhc3NlZCByZWZlcmVuY2UuXHJcbiAqIFxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgdG8gdmFsaWRhdGUuXHJcbiAqIEBwYXJhbSByZWZlcmVuY2VzIFRoZSB2YWxpZCByZWZlcmVuY2VzLlxyXG4gKi9cclxuY29uc3QgdmFsaWRhdGVSZWZlcmVuY2UgPSAoaGllcmFyY2h5OiBhbnksIHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+KTogYm9vbGVhbiA9PiByZWZlcmVuY2VzLmZpbHRlcigocmVmOiBSZWZlcmVuY2VUeXBlKSA9PiByZWYuaGllcmFyY2h5LnJlZiA9PT0gaGllcmFyY2h5LmZyb20ucmVmICYmIGdldFRlbW1lSWQoaGllcmFyY2h5KSAhPT0gZ2V0VGVtbWVJZChyZWYuaGllcmFyY2h5KSlbMF0gIT0gbnVsbDtcclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHdoZXRoZXIgdGVtcGxhdGVzIGFyZSByZWZlcmVuY2luZyBub24tdGVtcGxhdGUgZWxlbWVudFxyXG4gKiBvciBub3QsIGluIHdoaWNoIGNhc2UsIGFuIGVycm9yIGlzIHRocm93bi5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSB0byB2YWxpZGF0ZSB0aGUgdGVtcGxhdGUgaW5oZXJpdGFuY2UgZm9yLlxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlcyBUaGVyZSB2YWxpZCByZWZlcmVuY2VzLlxyXG4gKiBcclxuICogQHRocm93cyBJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVUZW1wbGF0ZVJlZmVyZW5jZShoaWVyYXJjaHk6IGFueSwgcmVmZXJlbmNlczogQXJyYXk8UmVmZXJlbmNlVHlwZT4pOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBHZXR0aW5nIHRoZSB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGVzID0gaGllcmFyY2h5LnRlbXBsYXRlcztcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlcmUgYXJlIGFueSB2YWxpZCB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKHRlbXBsYXRlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICB0ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSB0ZW1wbGF0ZSdzIHJlZmVyZW5jaW5nIHZhbHVlIGlzIHZhbGlkLlxyXG4gICAgICAgICAgICAgICAgaWYgKHRlbXBsYXRlLmZyb20ucmVmLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlZEVsZW1lbnQ6IGFueSA9IHJlZmVyZW5jZXMuZmlsdGVyKChyZWY6IFJlZmVyZW5jZVR5cGUpID0+ICg8SGllcmFyY2h5PnJlZi5oaWVyYXJjaHkpLnJlZiA9PT0gdGVtcGxhdGUuZnJvbS5yZWYpWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1RlbXBsYXRlOiBib29sZWFuID0gZ2V0VGVtbWVJZChyZWZlcmVuY2VkRWxlbWVudC5oaWVyYXJjaHkpLmxlbmd0aCA9PT0gNDtcclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1RlbXBsYXRlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkVGVtcGxhdGVSZWZlcmVuY2luZ0Vycm9yKHRlbXBsYXRlLnJlZiwgdGVtcGxhdGUuZnJvbS5yZWYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoaWVyYXJjaHkuY2hpbGROb2Rlcy5mb3JFYWNoKChjaGlsZDogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICB2YWxpZGF0ZVRlbXBsYXRlUmVmZXJlbmNlKGNoaWxkLCByZWZlcmVuY2VzKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhdGNoKGUpXHJcbiAgICB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHdoZXRoZXIgYSBoaWVyYXJjaHkgb2JqZWN0IGlzIHJlZmVyZW5jaW5nIGl0cyBjaGlsZC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSB0byB2YWxpZGF0ZS5cclxuICogQHBhcmFtIHJlZmVyZW5jZXMgVGhlcmUgdmFsaWQgcmVmZXJlbmNlcy5cclxuICogQHBhcmFtIGRlcHRoIFRoZSBkZXB0aCBvZiB0aGUgdmFsaWRhdGlvbi5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVBhcmVudFRvQ2hpbGRSZWZlcmVuY2UoaGllcmFyY2h5OiBhbnksIHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+LCBkZXB0aDogbnVtYmVyID0gMCk6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZjogc3RyaW5nID0gaGllcmFyY2h5LmZyb20ucmVmO1xyXG5cclxuICAgICAgICAvLyBJbmNyZW1lbnRpbmcgdGhlIGRlcHRoXHJcbiAgICAgICAgZGVwdGgrKztcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIHJlZmVyZW5jZSBpcyB2YWxpZC5cclxuICAgICAgICBpZiAocmVmICE9PSBcIlwiKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBHZXR0aW5nIHRoZSByZWZlcmVuY2VkIGhpZXJhcmNoeS5cclxuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlZEhpZXJhcmNoeTogUmVmZXJlbmNlVHlwZSA9IHJlZmVyZW5jZXMuZmlsdGVyKChyZWZPYmplY3Q6IFJlZmVyZW5jZVR5cGUpID0+ICg8SGllcmFyY2h5PnJlZk9iamVjdC5oaWVyYXJjaHkpLnJlZiA9PT0gcmVmICYmIGRlcHRoID49IHJlZk9iamVjdC5kZXB0aClbMF07XHJcblxyXG4gICAgICAgICAgICBpZiAocmVmZXJlbmNlZEhpZXJhcmNoeSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlT3V0T2ZSYW5nZUVycm9yKFwiXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBIaWVyYXJjaHkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0ZVBhcmVudFRvQ2hpbGRSZWZlcmVuY2UoY2hpbGQsIHJlZmVyZW5jZXMsIGRlcHRoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IHRlbXBsYXRlcy5cclxuICAgICAgICBpZiAoJ3RlbXBsYXRlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS50ZW1wbGF0ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LnRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZTogYW55KSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsaWRhdGVQYXJlbnRUb0NoaWxkUmVmZXJlbmNlKHRlbXBsYXRlLCByZWZlcmVuY2VzLCBkZXB0aCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuICAgIGNhdGNoKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgdGhlIHN1Yi1vcHRpb25zIG9mIGFub3RoZXIgb3B0aW9uLlxyXG4gKiBAcGFyYW0gb3B0aW9uTmFtZSBUaGUgbmFtZSBvZiB0aGUgb3B0aW9uIHRvIHZhbGlkYXRlIHRoZSBzdWItb3B0aW9ucyBmb3IuIFxyXG4gKiBAcGFyYW0gb3B0aW9uVmFsdWUgVGhlIHN1Yi1vcHRpb25zIHRvIHZhbGlkYXRlLlxyXG4gKiBAcGFyYW0gc3ViT3B0aW9ucyBUaGUgZXhwZWN0ZWQgc3ViLW9wdGlvbnMuXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZVN1Yk9wdGlvbnMob3B0aW9uTmFtZTogc3RyaW5nLCBvcHRpb25WYWx1ZTogYW55LCBzdWJPcHRpb25zOiBJS2V5cyk6IHZvaWQge1xyXG5cclxuICAgIC8vIExvb3BpbmcgdGhyb3VnaCB0aGUgZXhwZWN0ZWQgc3ViLW9wdGlvbnMuXHJcbiAgICBmb3IgKGNvbnN0IHN1Yk9wdGlvbiBpbiBvcHRpb25WYWx1ZSkge1xyXG5cclxuICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICBtYXRjaGluZ1N1Yk9wdGlvbjogT3B0aW9uID0gZ2V0U3ViT3B0aW9ucyhvcHRpb25OYW1lKS5maWx0ZXIoKHN1Yk9wdGlvbnM6IE9wdGlvbikgPT4gc3ViT3B0aW9ucy5sYWJlbCA9PT0gc3ViT3B0aW9uKVswXSxcclxuICAgICAgICAgICAgc3ViT3B0aW9uVmFsdWU6IGFueSA9IG9wdGlvblZhbHVlW3N1Yk9wdGlvbl07XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIGEgc3ViLW9wdGlvbiBpcyBpbiB0aGUgcGFyZW50IG9wdGlvbi5cclxuICAgICAgICBpZiAoc3ViT3B0aW9uIGluIHN1Yk9wdGlvbnMpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFZhbGlkYXRpbmcgdGhlIHN1Yi1vcHRpb24ncyBuYW1lLlxyXG4gICAgICAgICAgICBpZiAoT3B0aW9uLnZhbGlkYXRlT3B0aW9uTmFtZShtYXRjaGluZ1N1Yk9wdGlvbikgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFN1Yk9wdGlvbk5hbWVFcnJvcihvcHRpb25OYW1lLCBzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW5nIHRoZSBzdWItb3B0aW9ucydzIGRhdGEgdHlwZS5cclxuICAgICAgICAgICAgY29uc3QgdHlwZVZhbGlkYXRpb246IHsgdmFsaWQ6IGJvb2xlYW4sIHR5cGU6IHN0cmluZyB9ID0gT3B0aW9uLnZhbGlkYXRlT3B0aW9uVHlwZShzdWJPcHRpb25WYWx1ZSwgbWF0Y2hpbmdTdWJPcHRpb24pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVWYWxpZGF0aW9uLnZhbGlkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTdWJPcHRpb25UeXBlRXJyb3Ioc3ViT3B0aW9uLCB0eXBlVmFsaWRhdGlvbi50eXBlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVmFsaWRhdGluZyB0aGUgc3ViLW9wdGlvbidzIHZhbHVlLlxyXG4gICAgICAgICAgICBpZiAoT3B0aW9uLnZhbGlkYXRlT3B0aW9uVmFsdWUoc3ViT3B0aW9uVmFsdWUsIG1hdGNoaW5nU3ViT3B0aW9uKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkU3ViT3B0aW9uVmFsdWVFcnJvcihzdWJPcHRpb24sIHN1Yk9wdGlvblZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCdrZXlzJyBpbiBtYXRjaGluZ1N1Yk9wdGlvbikge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIG9wdGlvbidzIHN1Yi1vcHRpb25zLlxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9uVmFsdWUgPSBvcHRpb25WYWx1ZVtzdWJPcHRpb25dO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlU3ViT3B0aW9ucyhzdWJPcHRpb24sIHN1Yk9wdGlvblZhbHVlLCAoPElLZXlzPm1hdGNoaW5nU3ViT3B0aW9uKS5rZXlzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgdGhyb3cgbmV3IEludmFsaWRTdWJPcHRpb25OYW1lRXJyb3Iob3B0aW9uTmFtZSwgc3ViT3B0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogVmFsaWRhdGVzIHRoZSByZWZlcmVuY2VzIGluIGEgaGllcmFyY2h5IG9iamVjdC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gdmFsaWRhdGUgdGhlIHJlZmVyZW5jZXMgZm9yLlxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVSZWZlcmVuY2luZ09wdGlvbihoaWVyYXJjaHk6IGFueSk6IGJvb2xlYW4ge1xyXG5cclxuICAgIGlmICgnZnJvbScgaW4gaGllcmFyY2h5KSB7XHJcblxyXG4gICAgICAgIHJldHVybiAncmVmJyBpbiBoaWVyYXJjaHkuZnJvbTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4iLCIvKipcclxuICogV2hhdCdzIHJlc3BvbnNpYmxlIGZvciBzYW5pdGl6aW5nIHRoZSBpbnB1dFxyXG4gKiBhbmQgcG9wdWxhdGluZyB0aGUgZGVmYXVsdHMuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBPcHRpb24sIHsgSUtleXMgfSBmcm9tIFwiLi9tb2RlbHMvT3B0aW9uXCI7XHJcbmltcG9ydCB7IG9wdGlvbnMsIGZvcmJpZGRlbk9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIFNhbml0aXplcyBhIGhpZXJhcmNoeSBvYmplY3QgaW50byBhbiBhcHJvcHJpYXRlIG9uZS5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gc2FuaXRpemUuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gc2FuaXRpemUoaGllcmFyY2h5OiBhbnkpOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICAvLyBMb29waW5nIHRocm91Z2ggdGhlIGF2YWlsYWJsZSBvcHRpb25zLlxyXG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaCgob3B0OiBPcHRpb24pID0+IHtcclxuXHJcbiAgICAgICAgICAgIGlmICghKG9wdC5sYWJlbCBpbiBoaWVyYXJjaHkpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUG9wdWxhdGluZyBhIGRlZmF1bHQuXHJcbiAgICAgICAgICAgICAgICBoaWVyYXJjaHlbb3B0LmxhYmVsXSA9IG9wdC5kZWZhdWx0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNhbml0aXppbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICBpZiAoJ2tleXMnIGluIG9wdCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiAoPElLZXlzPm9wdCkua2V5cykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViT3B0aW9uOiBPcHRpb24gPSAoPElLZXlzPm9wdCkua2V5c1trZXldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FuaXRpemluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FuaXRpemVPcHRpb24oaGllcmFyY2h5Wyg8T3B0aW9uPm9wdCkubGFiZWxdLCBzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZpbmcgZHVwbGljYXRlcy5cclxuICAgICAgICBoaWVyYXJjaHkuY2xhc3NlcyA9IGhpZXJhcmNoeS5jbGFzc2VzLmZpbHRlcigoY2xzOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IGhpZXJhcmNoeS5jbGFzc2VzLmluZGV4T2YoY2xzKSA9PT0gaW5kZXgpO1xyXG5cclxuICAgICAgICAvLyBTb3J0aW5nIHRoZSBjbGFzc2VzLlxyXG4gICAgICAgIGhpZXJhcmNoeS5jbGFzc2VzLnNvcnQoKTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBoYXMgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHNhbml0aXplKGNoaWxkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IGhhcyB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkudGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHNhbml0aXplVGVtcGxhdGUodGVtcGxhdGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFNhbml0aXplcyBhbiBvcHRpb24uXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgb2JqZWN0IHRvIHNhbml0aXplIHRoZSBvcHRpb24gZm9yLlxyXG4gKiBAcGFyYW0gb3B0aW9uIFRoZSBvcHRpb24gdG8gc2FuaXRpemUuXHJcbiAqL1xyXG5mdW5jdGlvbiBzYW5pdGl6ZU9wdGlvbihoaWVyYXJjaHk6IGFueSwgb3B0aW9uOiBPcHRpb24pOiB2b2lkIHtcclxuXHJcbiAgICB0cnkge1xyXG5cclxuICAgICAgICBpZiAoIShvcHRpb24ubGFiZWwgaW4gaGllcmFyY2h5KSkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5W29wdGlvbi5sYWJlbF0gPSBvcHRpb24uZGVmYXVsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgna2V5cycgaW4gb3B0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiAoPElLZXlzPm9wdGlvbikua2V5cykge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0XHJcbiAgICAgICAgICAgICAgICAgICAgc3ViSGllcmFyY2h5OiBhbnkgPSBoaWVyYXJjaHlbKDxPcHRpb24+b3B0aW9uKS5sYWJlbF0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3ViT3B0aW9uID0gKDxJS2V5cz5vcHRpb24pLmtleXNba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICBzYW5pdGl6ZU9wdGlvbihzdWJIaWVyYXJjaHksIHN1Yk9wdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIFNhbml0aXplcyB0ZW1wbGF0ZXMuXHJcbiAqIFxyXG4gKiBAcGFyYW0gdGVtcGxhdGUgVGhlIHRlbXBsYXRlIHRvIHNhbml0aXplLlxyXG4gKi9cclxuZnVuY3Rpb24gc2FuaXRpemVUZW1wbGF0ZSh0ZW1wbGF0ZTogYW55KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gTG9vcGluZyB0aHJvdWdoIHRoZSBhbGxvd2VkIG9wdGlvbnMgaW4gdGVtcGxhdGVzLlxyXG4gICAgICAgIG9wdGlvbnNcclxuICAgICAgICAgICAgLmZpbHRlcigob3B0OiBPcHRpb24pID0+IGZvcmJpZGRlbk9wdGlvbnMuaW5kZXhPZihvcHQubGFiZWwpID09PSAtMSlcclxuICAgICAgICAgICAgLmZvckVhY2goKG9wdDogT3B0aW9uKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2hlY2tpbmcgb2YgdGhlIHRlbXBsYXRlIGRvZXNuJ3QgaGF2ZSBhIHNhaWQgb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgaWYgKCEob3B0LmxhYmVsIGluIHRlbXBsYXRlKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBQb3B1bGF0aW5nIGEgZGVmYXVsdC5cclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVtvcHQubGFiZWxdID0gb3B0LmRlZmF1bHQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTYW5pdGl6aW5nIHRoZSBzdWItb3B0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgna2V5cycgaW4gb3B0KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiAoPElLZXlzPm9wdCkua2V5cykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHN1Yi1vcHRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJPcHRpb246IE9wdGlvbiA9ICg8SUtleXM+b3B0KS5rZXlzW2tleV07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2FuaXRpemluZyB0aGUgc3ViLW9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbml0aXplT3B0aW9uKHRlbXBsYXRlWyg8T3B0aW9uPm9wdCkubGFiZWxdLCBzdWJPcHRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIFdoYXQgcHJvY2Vzc2VzIGFsbCBvZiB0aGUgcmVmZXJlbmNlcy5cclxuICovXHJcblxyXG5cclxuaW1wb3J0IHsgSGllcmFyY2h5IH0gZnJvbSBcIi4vbW9kZWxzL0hpZXJhcmNoeVwiO1xyXG5pbXBvcnQgeyBUZW1wbGF0ZSB9IGZyb20gXCIuL21vZGVscy9UZW1wbGF0ZVwiO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZVJlZmVyZW5jZXMsIHZhbGlkYXRlVGVtcGxhdGVSZWZlcmVuY2UsIHZhbGlkYXRlUGFyZW50VG9DaGlsZFJlZmVyZW5jZSB9IGZyb20gXCIuL3ZhbGlkYXRvclwiO1xyXG5pbXBvcnQgeyBnZXRUZW1tZUlkIH0gZnJvbSBcIi4vaWRmaWVyXCI7XHJcbmltcG9ydCB7IG9wdGlvbnMgfSBmcm9tIFwiLi9vcHRpb25zXCI7XHJcbmltcG9ydCBPcHRpb24gZnJvbSBcIi4vbW9kZWxzL09wdGlvblwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgcmVmZXJlbmNlIHR5cGUuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBSZWZlcmVuY2VUeXBlID0geyBkZXB0aDogbnVtYmVyLCBoaWVyYXJjaHk6IGFueSB9O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUYWtlcyBjYXJlIG9mIGFsbCB0aGUgaW5oZXJpdGFuY2UgYW5kIHJlZmVyZW5jZXMgc3R1ZmYuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdG8gcHJvY2VzcyB0aGUgcmVmZXJlbmNlcyBmb3IuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcHJvY2VzcyhoaWVyYXJjaHk6IGFueSk6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZmVyZW5jZXM6IEFycmF5PFJlZmVyZW5jZVR5cGU+ID0gZ2V0UmVmZXJlbmNlcyhoaWVyYXJjaHkpO1xyXG5cclxuICAgICAgICAvLyBWYWxpZGF0aW5nIGFsbCBvZiB0aGUgcmVmZXJlY2VzLlxyXG4gICAgICAgIHZhbGlkYXRlUmVmZXJlbmNlcyhoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0ZW1wbGF0ZXMgYXJlIGluaGVyaXRpbmcgaGllcmFyY2h5IG9iamVjdHMuXHJcbiAgICAgICAgdmFsaWRhdGVUZW1wbGF0ZVJlZmVyZW5jZShoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiBhIHBhcmVudCBpcyB0cnlpbmcgdG8gcmVmZXJlbmNlIHRoZWlyIGNoaWxkZXJuLlxyXG4gICAgICAgIHZhbGlkYXRlUGFyZW50VG9DaGlsZFJlZmVyZW5jZShoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG5cclxuICAgICAgICAvLyBQcm9jZXNzaW5nIHRlbXBsYXRlIHJlZmVyZW5jZXMuXHJcbiAgICAgICAgcHJvY2Vzc1RlbXBsYXRlcyhoaWVyYXJjaHksIHJlZmVyZW5jZXMuZmlsdGVyKChyZWY6IFJlZmVyZW5jZVR5cGUpID0+IGlzVGVtcGxhdGUocmVmLmhpZXJhcmNoeSkpKTtcclxuXHJcbiAgICAgICAgLy8gUHJvY2Vzc2luZyBoaWVyYXJjaGllcyAobm9uLXRlbXBsYXRlKSByZWZlcmVuY2VzLlxyXG4gICAgICAgIHByb2Nlc3NIaWVyYXJjaGllcyhoaWVyYXJjaHksIHJlZmVyZW5jZXMpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbi8qKlxyXG4gKiBDaGVja3MgaWYgYSBoaWVyYXJjaHkgaXMgYSB0ZW1wbGF0ZSBvciBub3QuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdG8gY2hlY2suXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNUZW1wbGF0ZSA9IChoaWVyYXJjaHk6IGFueSk6IGJvb2xlYW4gPT4gZ2V0VGVtbWVJZChoaWVyYXJjaHkpLmxlbmd0aCA9PT0gNDtcclxuXHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIGFsbCBvZiB0aGUgcmVmZXJlbmNlcyBmb3IgdGVtcGxhdGUgaGllcmFyY2hpZXMuXHJcbiAqIFxyXG4gKiBAcGFyYW0gaGllcmFyY2h5IFRoZSBoaWVyYXJjaHkgdGhhdCBjb250YWluIHRlbXBsYXRlcyB0byByZWZlcmVuY2UuXHJcbiAqIEBwYXJhbSByZWZlcmVuY2UgVGhlIHZhbGlkYSByZWZlcmVuY2VzLlxyXG4gKi9cclxuZnVuY3Rpb24gcHJvY2Vzc1RlbXBsYXRlcyhoaWVyYXJjaHk6IGFueSwgcmVmZXJlbmNlOiBBcnJheTxSZWZlcmVuY2VUeXBlPik6IHZvaWQge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgY2hpbGRyZW4uXHJcbiAgICAgICAgaWYgKCdjaGlsZE5vZGVzJyBpbiBoaWVyYXJjaHkgJiYgaGllcmFyY2h5LmNoaWxkTm9kZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgaGllcmFyY2h5LmNoaWxkTm9kZXMuZm9yRWFjaCgoY2hpbGQ6IEhpZXJhcmNoeSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHByb2Nlc3NUZW1wbGF0ZXMoY2hpbGQsIHJlZmVyZW5jZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaGFzIGFueSB0ZW1wbGF0ZXMuXHJcbiAgICAgICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkudGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS50ZW1wbGF0ZXMuZm9yRWFjaCgodGVtcGxhdGU6IGFueSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZS5mcm9tLnJlZiAhPT0gXCJcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2V0dGluZyB0aGUgcHJvcGVyIG9wdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbjogYW55ID0gb3B0aW9ucy5maWx0ZXIoKG9wdDogT3B0aW9uKSA9PiBvcHQubGFiZWwgPT09IGtleSlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2VkSGllcmFyY2h5OiBSZWZlcmVuY2VUeXBlID0gcmVmZXJlbmNlLmZpbHRlcigocmVmOiBSZWZlcmVuY2VUeXBlKSA9PiByZWYuaGllcmFyY2h5LnJlZiA9PT0gdGVtcGxhdGUuZnJvbS5yZWYpWzBdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5oZXJpdGluZyB0aGUgdmFsdWUuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi5pbmhlcml0KHRlbXBsYXRlLCByZWZlcmVuY2VkSGllcmFyY2h5LmhpZXJhcmNoeVtrZXldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogUHJvY2Vzc2VzIGFsbCBvZiB0aGUgcmVmZXJlbmNlcyBmb3IgaGllcmFyY2h5IG9iamVjdHMgKG5vbi10ZW1wbGF0ZXMpLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2hpZXMgdG8gcmVmZXJlbmNlLlxyXG4gKiBAcGFyYW0gcmVmZXJlbmNlIFRoZSB2YWxpZCByZWZlcmVuY2VzLlxyXG4gKi9cclxuZnVuY3Rpb24gcHJvY2Vzc0hpZXJhcmNoaWVzKGhpZXJhcmNoeTogYW55LCByZWZlcmVuY2U6IEFycmF5PFJlZmVyZW5jZVR5cGU+KTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgaWYgKGhpZXJhcmNoeS5mcm9tLnJlZiAhPT0gXCJcIikge1xyXG5cclxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gaGllcmFyY2h5KSB7XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIC8vIEdldHRpbmcgdGhlIHByb3BlciBvcHRpb24uXHJcbiAgICAgICAgICAgICAgICBjb25zdFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbjogYW55ID0gb3B0aW9ucy5maWx0ZXIoKG9wdDogT3B0aW9uKSA9PiBvcHQubGFiZWwgPT09IGtleSlbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlZEhpZXJhcmNoeTogUmVmZXJlbmNlVHlwZSA9IHJlZmVyZW5jZS5maWx0ZXIoKHJlZjogUmVmZXJlbmNlVHlwZSkgPT4gcmVmLmhpZXJhcmNoeS5yZWYgPT09IGhpZXJhcmNoeS5mcm9tLnJlZilbMF07XHJcbiAgICBcclxuICAgICAgICAgICAgICAgIC8vIEluaGVyaXRpbmcgdGhlIHZhbHVlLlxyXG4gICAgICAgICAgICAgICAgb3B0aW9uLmluaGVyaXQoaGllcmFyY2h5LCByZWZlcmVuY2VkSGllcmFyY2h5LmhpZXJhcmNoeVtrZXldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBoYXMgYW55IGNoaWxkcmVuLlxyXG4gICAgICAgIGlmICgnY2hpbGROb2RlcycgaW4gaGllcmFyY2h5ICYmIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBIaWVyYXJjaHkpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzSGllcmFyY2hpZXMoY2hpbGQsIHJlZmVyZW5jZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcblxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogR2V0dGluZyBhbGwgdGhlIHJlZmVyZW5jZXMgaW4gYSBzYWlkIGhpZXJhcmNoeS5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gZ2V0IHRoZSByZWZlcmVuY2VzIGZyb20uXHJcbiAqIEBwYXJhbSBkZXB0aCBUaGUgY3VycmVudCBkZXB0aCBpbiB0aGUgc2FpZCBoaWVyYXJjaHkgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0UmVmZXJlbmNlcyhoaWVyYXJjaHk6IGFueSwgZGVwdGg6IG51bWJlciA9IDApOiBBcnJheTxSZWZlcmVuY2VUeXBlPiB7XHJcblxyXG4gICAgY29uc3QgcmVmZXJlbmNlczogQXJyYXk8UmVmZXJlbmNlVHlwZT4gPSBbXTtcclxuXHJcbiAgICAvLyBJbmNyZW1lbnRpbmcgdGhlIGRlcHRoLlxyXG4gICAgZGVwdGgrKztcclxuXHJcbiAgICAvLyBDaGVja2luZyBpZiB0aGUgcmVmZXJlbmNlIGlzIHZhbGlkLlxyXG4gICAgaWYgKGhpZXJhcmNoeS5yZWYgIT09IFwiXCIpIHtcclxuXHJcbiAgICAgICAgcmVmZXJlbmNlcy5wdXNoKHtcclxuICAgICAgICAgICAgZGVwdGg6IGRlcHRoLFxyXG4gICAgICAgICAgICBoaWVyYXJjaHk6IGhpZXJhcmNoeVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgY2hpbGRyZW4uXHJcbiAgICBpZiAoJ2NoaWxkTm9kZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgIGhpZXJhcmNoeS5jaGlsZE5vZGVzLmZvckVhY2goKGNoaWxkOiBIaWVyYXJjaHkpID0+IHtcclxuXHJcbiAgICAgICAgICAgIHJlZmVyZW5jZXMucHVzaCguLi5nZXRSZWZlcmVuY2VzKGNoaWxkLCBkZXB0aCkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIENoZWNraW5nIGlmIHRoZSBoaWVyYXJjaHkgb2JqZWN0IGhhcyBhbnkgdGVtcGxhdGVzLlxyXG4gICAgaWYgKCd0ZW1wbGF0ZXMnIGluIGhpZXJhcmNoeSAmJiBoaWVyYXJjaHkudGVtcGxhdGVzLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgaGllcmFyY2h5LnRlbXBsYXRlcy5mb3JFYWNoKCh0ZW1wbGF0ZTogVGVtcGxhdGUpID0+IHtcclxuXHJcbiAgICAgICAgICAgIC8vIFN1YnN0cmFjdGluZyAxIHRvIG1ha2UgdGVtcGxhdGVzIG9uIHRoZSBzYW1lIGRlcHRoIGxldmVsXHJcbiAgICAgICAgICAgIC8vIGFzIHRoZWlyIGhpZXJhcmNoeSBwYXJlbnQuXHJcbiAgICAgICAgICAgIHJlZmVyZW5jZXMucHVzaCguLi5nZXRSZWZlcmVuY2VzKHRlbXBsYXRlLCBkZXB0aCAtIDEpKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSZXR1cm5pbmcgYWxsIGZvdW5kIHJlZmVyZW5jZXMuXHJcbiAgICByZXR1cm4gcmVmZXJlbmNlcztcclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgaGllcmFyY2h5IG9iamVjdFxyXG4gKiBpcyBub3QgdmFsaWQuXHJcbiAqL1xyXG5cclxuXHJcbmltcG9ydCBUZW1teUVycm9yIGZyb20gXCIuLi9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRIaWVyYXJjaHlFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkSGllcmFyY2h5RXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiVGhlIGhpZXJhcmNoeSBvYmplY3QgaXMgbm90IHZhbGlkXCI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb25zdHJ1Y3RvciB3aXRoIHBhcmFtZXRlcnMuXHJcbiAgICAgKiBcclxuICAgICAqIEBwYXJhbSBtZXNzYWdlIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZTogc3RyaW5nKSB7XHJcblxyXG4gICAgICAgIC8vIENhbGxpbmcgdGhlIHBhcmVudCBjbGFzcyBgVGVtbXlFcnJvcmAuXHJcbiAgICAgICAgc3VwZXIoXCJcIik7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0aW5nIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZS5sZW5ndGggPiAwID8gbWVzc2FnZSA6IHRoaXMubWVzc2FnZTtcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogVGhlIGVycm9yIHRocm93biB3aGVuIGEgdGFyZ2V0IGlzIG5vdCBhIHZhbGlkXHJcbiAqIEhUTUwgZWxlbWVudC5cclxuICovXHJcblxyXG5pbXBvcnQgVGVtbXlFcnJvciBmcm9tIFwiLi4vbW9kZWxzL1RlbW15RXJyb3JcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEludmFsaWRUYXJnZXRFcnJvciBleHRlbmRzIFRlbW15RXJyb3Ige1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nID0gXCJJbnZhbGlkVGFyZ2V0RXJyb3JcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoZSBtZXNzYWdlIG9mIHRoZSBlcnJvci5cclxuICAgICAqL1xyXG4gICAgcHVibGljIG1lc3NhZ2U6IHN0cmluZyA9IFwiVGhlIHRhcmdldCBpcyBub3QgYSB2YWxpZCBIVE1MIGVsZW1lbnRcIjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnN0cnVjdG9yIHdpdGggcGFyYW1ldGVycy5cclxuICAgICAqIFxyXG4gICAgICogQHBhcmFtIG1lc3NhZ2UgVGhlIG1lc3NhZ2Ugb2YgdGhlIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgcGFyZW50IGNsYXNzIGBUZW1teUVycm9yYC5cclxuICAgICAgICBzdXBlcihcIlwiKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRpbmcgdGhlIGVycm9yJ3MgbWVzc2FnZS5cclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlLmxlbmd0aCA+IDAgPyBtZXNzYWdlIDogdGhpcy5tZXNzYWdlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBcclxuICogQG5hbWU6ICAgICAgIHRlbW1lanNcclxuICogQHZlcnNpb246ICAgIDEuMC4wXHJcbiAqIEBhdXRob3I6ICAgICBFT3Vzc2FtYVxyXG4gKiBAbGljZW5zZSAgICAgTUlUXHJcbiAqIEBzb3VyY2U6ICAgICBodHRwczovL2dpdGh1Yi5jb20vRU91c3NhbWEvdGVtbWVqc1xyXG4gKiBcclxuICogVGVtbWUgKG9yIEVtbWV0IGluIHJldmVyc2UpIGlzIHRvIGphdmFzY3JpcHQgd2hhdCBFbW1ldCBpcyB0byBIVE1MIGFuZCBDU1MsXHJcbiAqIHdpdGggbm8gZG91YnRzLCBFbW1ldCBzYXZlZCB1cyBmcm9tIHRoZSBoZWFkYWNoZSBvZiB3b3JraW5nIHdpdGggSFRNTCBhbmQgQ1NTLCBcclxuICogYW5kIG5vdywgVGVtbWUgaXMgZG9pbmcgSmF2YXNjcmlwdCB0aGUgc2FtZSBmYXZvdXIgdG9vLlxyXG4gKiBcclxuICovXHJcblxyXG4gXHJcbmltcG9ydCAqIGFzIFZhbGlkYXRvciBmcm9tIFwiLi9tb2R1bGVzL3ZhbGlkYXRvclwiO1xyXG5pbXBvcnQgKiBhcyBTYW5pdGl6ZXIgZnJvbSBcIi4vbW9kdWxlcy9zYW5pdGl6ZXJcIjtcclxuaW1wb3J0ICogYXMgUmVmZXJlbmNlciBmcm9tIFwiLi9tb2R1bGVzL3JlZmVyZW5jZXJcIjtcclxuaW1wb3J0ICogYXMgUGFyc2VyIGZyb20gJy4vbW9kdWxlcy9wYXJzZXInO1xyXG5pbXBvcnQgKiBhcyBJZGZpZXIgZnJvbSBcIi4vbW9kdWxlcy9pZGZpZXJcIjtcclxuaW1wb3J0IFRlbW15RXJyb3IgZnJvbSBcIi4vbW9kdWxlcy9tb2RlbHMvVGVtbXlFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZEhpZXJhcmNoeUVycm9yIGZyb20gXCIuL21vZHVsZXMvZXJyb3JzL0ludmFsaWRIaWVyYXJjaHlFcnJvclwiO1xyXG5pbXBvcnQgSW52YWxpZFRhcmdldEVycm9yIGZyb20gXCIuL21vZHVsZXMvZXJyb3JzL0ludmFsaWRUYXJnZXRFcnJvclwiO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBUaGUgZW50cnkgcG9pbnQgb2YgVGVtbWUsIGl0J3Mgd2hhdCBpbml0aWF0ZXMgZXZlcnl0aGluZ1xyXG4gKiBmcm9tIHNhbml0aXppbmcsIHRvIHBhcnNpbmcsIGxpa2UgYSBib3NzLlxyXG4gKiBcclxuICogQHBhcmFtIGhpZXJhcmNoeSBUaGUgaGllcmFyY2h5IG9iamVjdCB0aGF0IG1hcHMgdGhlIEhUTUwgc2tlbGV0b24uXHJcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIEhUTUwgZWxlbWVudCB0aGF0IHdpbGwgaG9zdCB0aGUgcGFyc2VkIHNrZWxldG9uLlxyXG4gKiBAcGFyYW0gZW5kQ2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZSB3aGVuIHRoZSBza2VsZXRvbiBoYXMgYmVlbiBwYXJzZWQuXHJcbiAqIEBwYXJhbSBub2RlQ2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZXhlY3V0ZXMgd2hlbmV2ZXIgYW4gZWxlbWVudCBoYXMgYmVlbiBwYXJzZWQuXHJcbiAqIFxyXG4gKiBAdGhyb3dzIEludmFsaWRUYXJnZXRFcnJvciwgSW52YWxpZEhpZXJhcmNoeUVycm9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaGllcmFyY2h5OiBPYmplY3QsIHRhcmdldDogSFRNTEVsZW1lbnQsIGVuZENhbGxiYWNrOiAocmVzdWx0ZWRIaWVyYXJjaHk6IGFueSkgPT4gdm9pZCA9IChoaWVyYXJjaHkpID0+IHt9LCBub2RlQ2FsbGJhY2s6ICh0ZW1tZUlkOiBzdHJpbmcsIGN1cnJlbnRIaWVyYXJjaHk6IGFueSwgZGVwdGg6IG51bWJlcikgPT4gdm9pZCk6IE9iamVjdCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIHRhcmdldCBpcyBhIHZhbGlkIEhUTUwgZWxlbWVudCBhbmQgdGhyb3dpbmdcclxuICAgICAgICAvLyBhbiBlcnJvciBpZiBpdCdzIG5vdC5cclxuICAgICAgICBpZiAoIVZhbGlkYXRvci5pc1ZhbGlkSFRNTEVsZW1lbnQodGFyZ2V0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgSW52YWxpZFRhcmdldEVycm9yKFwiXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2tpbmcgaWYgdGhlIGhpZXJhcmNoeSBvYmplY3QgaXMgYW5kIHRocm93aW5nXHJcbiAgICAgICAgLy8gYW4gZXJyb3IgaWYgaXQncyBub3QuXHJcbiAgICAgICAgaWYgKCFWYWxpZGF0b3IuaXNWYWxpZEhpZXJhcmNoeShoaWVyYXJjaHkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhbGlkSGllcmFyY2h5RXJyb3IoXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVja2luZyBpZiB0aGUgaGllcmFyY2h5IG9iamVjdCBjb250YWluc1xyXG4gICAgICAgIC8vIHZhbGlkIG9wdGlvbnMuXHJcbiAgICAgICAgVmFsaWRhdG9yLnZhbGlkYXRlT3B0aW9ucyhoaWVyYXJjaHkpO1xyXG5cclxuICAgICAgICAvLyBTYW5pdGl6aW5nIHRoZSBoaWVyYXJjaHkuXHJcbiAgICAgICAgU2FuaXRpemVyLnNhbml0aXplKGhpZXJhcmNoeSk7XHJcblxyXG4gICAgICAgIC8vIEFzc2lnbmluZyB0ZW1tZUlkcyB0byB0aGUgaGllcmFyY2h5IG9iamVjdC5cclxuICAgICAgICBJZGZpZXIuaWRmeShoaWVyYXJjaHkpO1xyXG5cclxuICAgICAgICAvLyBQcm9jZXNzaW5nIGFsbCBvZiB0aGUgcmVmZXJlbmNlcy5cclxuICAgICAgICBSZWZlcmVuY2VyLnByb2Nlc3MoaGllcmFyY2h5KTtcclxuXHJcbiAgICAgICAgLy8gUGFyc2luZyB0aGUgaGllcmFyY2h5IGludG8gYW4gSFRNTCB0cmVlLlxyXG4gICAgICAgIFBhcnNlci5wYXJzZShoaWVyYXJjaHksIG5vZGVDYWxsYmFjayk7XHJcblxyXG4gICAgICAgIC8vIEV4ZWN1dGluZyB0aGUgZW5kIGNhbGxiYWNrLlxyXG4gICAgICAgIGVuZENhbGxiYWNrKGhpZXJhcmNoeSk7XHJcblxyXG4gICAgICAgIC8vIFJldHVybmluZyB0aGUgcmVzdWx0ZWQgaGllcmFyY2h5IG9iamVjdC5cclxuICAgICAgICByZXR1cm4gaGllcmFyY2h5O1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuXHJcbiAgICAgICAgLy8gQXBwZW5kaW5nIGEgdGFnIGluIGZyb250IG9mIHRoZSBlcnJvcidzIG1lc3NhZ2UuXHJcbiAgICAgICAgKDxUZW1teUVycm9yPmUpLm1lc3NhZ2UgPSBgW1RlbW1lXTogJHtlLm1lc3NhZ2V9LmA7XHJcblxyXG4gICAgICAgIC8vIFRocm93aW5nIHRoZSBlcnJvci5cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBXaGF0IHBhcnNlcyB0aGUgaGllcmFyY2h5IHRvIGFuIEhUTUwgdHJlZS5cclxuICovXHJcblxyXG5cclxuLyoqXHJcbiAqIFBhcnNlcyB0aGUgaGllcmFyY2h5IG9iamVjdCBpbnRvIGFuIEhUTUwgZWxlbWVudC5cclxuICogXHJcbiAqIEBwYXJhbSBoaWVyYXJjaHkgVGhlIGhpZXJhcmNoeSBvYmplY3QgdG8gcGFyc2UuXHJcbiAqIEBwYXJhbSBub2RlQ2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRoYXQgZXhlY3V0ZXMgd2hlbmV2ZXIgYW4gSFRNTCBlbGVtZW50IGhhcyBiZWVuIGNyZWF0ZWQuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoaGllcmFyY2h5OiBhbnksIG5vZGVDYWxsYmFjazogKHRlbW1lSWQ6IHN0cmluZywgY3VycmVudEhpZXJhcmNoeTogYW55LCBkZXB0aDogbnVtYmVyKSA9PiB2b2lkKTogdm9pZCB7XHJcblxyXG4gICAgdHJ5IHtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coJ3BhcnNpbmcuLi4nKTtcclxuICAgIH1cclxuICAgIGNhdGNoKGUpIHtcclxuXHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9