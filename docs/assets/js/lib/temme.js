var Temme=function(t){var n={};function r(o){if(n[o])return n[o].exports;var e=n[o]={i:o,l:!1,exports:{}};return t[o].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=t,r.c=n,r.d=function(t,n,o){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var e in t)r.d(o,e,function(n){return t[n]}.bind(null,e));return o},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";r.r(n);var o,e=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},i=function(t){return null!=t&&t instanceof HTMLElement},u=function(){return function(t,n,r,o){var e=this;this.isValid=function(){return null!=e.name&&typeof e.name==e.type},this.name=t,this.type=n,this.default=r,this.values=o}}(),c=(o=function(t,n){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}o(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),f=function(t){function n(){var n=t.call(this,"ref","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return c(n,t),n}(u),a=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),p=function(t){function n(){var n=t.call(this,"name","string","div",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return a(n,t),n}(u),s=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),l=function(t){function n(){var n=t.call(this,"id","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return s(n,t),n}(u),y=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),_=function(t){function n(){var n=t.call(this,"text","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return y(n,t),n}(u),h=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),O=function(t){function n(){var n=t.call(this,"html","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return h(n,t),n}(u),m=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),v=function(t){function n(){var n=t.call(this,"temmeIds","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return m(n,t),n}(u),w=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),b=function(t){function n(){var n=t.call(this,"templates","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return w(n,t),n}(u),d=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),j=function(t){function n(){var n=t.call(this,"classes","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return d(n,t),n}(u),P=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),g=function(t){function n(){var n=t.call(this,"children","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return P(n,t),n}(u),A=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),V=function(t){function n(){var n=t.call(this,"attributes","object",{},[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return A(n,t),n}(u),T=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),x=function(t){function n(){var n=t.call(this,"dataset","object",{},[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return T(n,t),n}(u),M=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),E=function(t){function n(){var n=t.call(this,"mode","string","append",["append","override"])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return M(n,t),n}(u),S=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),H=function(t){function n(){var n=t.call(this,"placement","string","after",["after","before"])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return S(n,t),n}(u),I=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),k=function(t){function n(){var n=t.call(this,"children","object","",[])||this;return n.keys=new L,n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return I(n,t),n}(u),L=function(){return function(){this.allow=!1,this.placement=new H}}(),q=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),z=function(t){function n(){var n=t.call(this,"from","object","",[])||this;return n.keys=new B,n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return q(n,t),n}(u),B=function(){return function(){this.ref=new f,this.mode=new E,this.children=new k}}(),C=[new f,new p,new l,new _,new O,new v,new b,new j,new g,new V,new x,new z],D=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),F=function(t){function n(n){var r=t.call(this)||this;return r.name="TemmyError",r.message="Temme isn't feeling good",r.message=n.length>0?n:r.message,r}return D(n,t),n}(Error),G=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),J=function(t){function n(n){var r=t.call(this,n)||this;return r.name="InvalidHierarchyError",r.message="The hierarchy object is not valid",r.message=n.length>0?n:r.message,r}return G(n,t),n}(F),K=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),N=function(t){function n(n){var r=t.call(this,n)||this;return r.name="InvalidTargetError",r.message="The target is not a valid HTML element",r.message=n.length>0?n:r.message,r}return K(n,t),n}(F);function Q(t,n,r,o){console.log(C);try{if(!i(n))throw new N("");if(!e(t))throw new J("");r()}catch(t){throw t.message="[Temme]: "+t.message+".",t}}r.d(n,"parse",function(){return Q})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,