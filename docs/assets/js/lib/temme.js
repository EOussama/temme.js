var Temme=function(t){var n={};function r(o){if(n[o])return n[o].exports;var e=n[o]={i:o,l:!1,exports:{}};return t[o].call(e.exports,e,e.exports,r),e.l=!0,e.exports}return r.m=t,r.c=n,r.d=function(t,n,o){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:o})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var e in t)r.d(o,e,function(n){return t[n]}.bind(null,e));return o},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=0)}([function(t,n,r){"use strict";r.r(n);var o,e=(o=function(t,n){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(t,n)},function(t,n){function r(){this.constructor=t}o(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),i=function(t){function n(n){var r=t.call(this)||this;return r.name="TemmyError",r.message="Temme isn't feeling good",r.message=n.length>0?n:r.message,r}return e(n,t),n}(Error),u=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),c=function(t){function n(n){var r=t.call(this,"")||this;r.name="InvalidOptionNameError",r.message="An option is not valid";var o="“"+n+"” is not a valid option";return r.message=n.length>0?o:r.message,r}return u(n,t),n}(i),a=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),f=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidOptionTypeError",o.message="An option doesn't have a valid value type";var e="The “"+n+"” option doesn't accept values of type “"+r+"”";return o.message=n.length>0?e:o.message,o}return a(n,t),n}(i),p=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),s=function(t){function n(n,r){var o=t.call(this,"")||this;o.name="InvalidOptionValueError",o.message="An option doesn't have a valid value";var e="The “"+n+"” option doesn't accept “"+r+"” as a type";return o.message=n.length>0?e:o.message,o}return p(n,t),n}(i),l=function(){return function(t,n,r,o){var e=this;this.isValid=function(){return null!=e.name&&typeof e.name==e.type},this.name=t,this.type=n,this.default=r,this.values=o}}(),y=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),_=function(t){function n(){var n=t.call(this,"ref","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return y(n,t),n}(l),h=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),v=function(t){function n(){var n=t.call(this,"name","string","div",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return h(n,t),n}(l),O=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),m=function(t){function n(){var n=t.call(this,"id","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return O(n,t),n}(l),w=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),d=function(t){function n(){var n=t.call(this,"text","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return w(n,t),n}(l),b=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),j=function(t){function n(){var n=t.call(this,"html","string","",[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return b(n,t),n}(l),P=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),g=function(t){function n(){var n=t.call(this,"temmeIds","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return P(n,t),n}(l),A=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),V=function(t){function n(){var n=t.call(this,"templates","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return A(n,t),n}(l),T=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),E=function(t){function n(){var n=t.call(this,"classes","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return T(n,t),n}(l),x=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),I=function(t){function n(){var n=t.call(this,"children","array",[],[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return x(n,t),n}(l),M=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),S=function(t){function n(){var n=t.call(this,"attributes","object",{},[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return M(n,t),n}(l),H=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),k=function(t){function n(){var n=t.call(this,"dataset","object",{},[])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return H(n,t),n}(l),L=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),N=function(t){function n(){var n=t.call(this,"mode","string","append",["append","override"])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return L(n,t),n}(l),q=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),z=function(t){function n(){var n=t.call(this,"placement","string","after",["after","before"])||this;return n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return q(n,t),n}(l),B=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),C=function(t){function n(){var n=t.call(this,"children","object","",[])||this;return n.keys=new D,n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return B(n,t),n}(l),D=function(){return function(){this.allow=!1,this.placement=new z}}(),F=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),G=function(t){function n(){var n=t.call(this,"from","object","",[])||this;return n.keys=new J,n.isValid=function(){return null!=n.name&&typeof n.name==n.type},n}return F(n,t),n}(l),J=function(){return function(){this.ref=new _,this.mode=new N,this.children=new C}}(),K=[new _,new v,new m,new d,new j,new g,new V,new E,new I,new S,new k,new G],Q=function(t){return null!=t&&"object"==typeof t&&!Array.isArray(t)},R=function(t){return null!=t&&t instanceof HTMLElement};function U(t){var n=function(n){var r=K.filter(function(t){return t.name===n})[0],o=t[n];!function(t,n){if(null==n)throw new c(t)}(n,r),function(t,n,r){var o="";o=Array.isArray(n)?"array":typeof n;if(o!==r.type)throw new f(t,o)}(n,o,r),function(t,n,r){if(null!=r&&r.values.length>0&&-1===r.values.indexOf(n))throw new s(t,n)}(n,o,r)};for(var r in t)n(r);"children"in t&&t.children.forEach(function(t){U(t)})}var W=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),X=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidHierarchyError",r.message="The hierarchy object is not valid",r.message=n.length>0?n:r.message,r}return W(n,t),n}(i),Y=function(){var t=function(n,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var r in n)n.hasOwnProperty(r)&&(t[r]=n[r])})(n,r)};return function(n,r){function o(){this.constructor=n}t(n,r),n.prototype=null===r?Object.create(r):(o.prototype=r.prototype,new o)}}(),Z=function(t){function n(n){var r=t.call(this,"")||this;return r.name="InvalidTargetError",r.message="The target is not a valid HTML element",r.message=n.length>0?n:r.message,r}return Y(n,t),n}(i);function $(t,n,r,o){try{if(!R(n))throw new Z("");if(!Q(t))throw new X("");U(t),r()}catch(t){throw t.message="[Temme]: "+t.message+".",t}}r.d(n,"parse",function(){return $})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,